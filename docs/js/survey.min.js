/* survey.min.js - Updated Version for Refactored Schema */

let currentSection =
  parseInt(sessionStorage.getItem('attemptNumber') || '1', 10) === 1 ? -2 : 0
let userData = null
let chart1Instance = null // Keep this for chart management
let isInitializing = false

const preSurveyQuestions = {
  title: 'Teilnahme am Forschungsprojekt',
  questions: [
    {
      text: 'Nehmen Sie im Rahmen des Forschungsprojektes an der Befragung teil?',
      type: 'radio',
      options: ['Ja', 'Nein'],
      required: true,
    },
    {
      text: 'In welcher Gruppe befinden Sie sich?',
      type: 'radio',
      options: ['Gruppe A', 'Gruppe B', 'Gruppe C', 'Gruppe D'],
      required: true,
      dependsOn: { questionId: 'q-2_0', value: 'Ja' },
    },
  ],
}
// -------------------------------------------------------------------------
// Helper: Lock personal fields (for T2/T3 attempts)
function lockPersonalFields() {
  const attemptNumber = parseInt(
    sessionStorage.getItem('attemptNumber') || '1',
    10
  )
  const form = document.getElementById('surveyForm')
  form.querySelectorAll('input, select, textarea').forEach((el) => {
    // Skip locking t2_course_feedback and t2_course_list if this is T2
    if (el.name === 't2_course_feedback' || el.name === 't2_course_list') {
      if (attemptNumber === 2) {
        el.required = true // Required in T2
        return // Keep editable
      } else if (attemptNumber === 3) {
        el.readOnly = true // Lock in T3
        el.required = false // Remove requirement
        el.style.backgroundColor = '#f0f0f0'
        el.style.cursor = 'not-allowed'
        return
      }
    }
    const tag = el.tagName.toLowerCase()
    if (tag === 'input') {
      if (el.type === 'radio') {
        el.addEventListener('click', function (e) {
          e.preventDefault()
        })
      } else {
        el.readOnly = true
        el.style.backgroundColor = '#f0f0f0'
        el.style.cursor = 'not-allowed'
      }
    } else if (tag === 'select') {
      el.disabled = true
    } else if (tag === 'textarea') {
      el.readOnly = true
      el.style.backgroundColor = '#f0f0f0'
    }
  })
}

// -------------------------------------------------------------------------
// Event Listeners and Utility Functions

function setupEventListeners() {
  const prevBtn = document.getElementById('prevButton')
  const nextBtn = document.getElementById('nextButton')
  const logoutBtn = document.getElementById('logoutButton')
  const saveProgressBtn = document.getElementById('saveProgressButton')
  const surveyForm = document.getElementById('surveyForm')

  if (prevBtn) {
    prevBtn.addEventListener('click', previousSection)
  }
  if (nextBtn) {
    nextBtn.addEventListener('click', nextSection)
  }
  if (logoutBtn) {
    logoutBtn.addEventListener('click', logout)
  }
  if (saveProgressBtn) {
    saveProgressBtn.addEventListener('click', saveAndResumeLater)
  }
  if (surveyForm) {
    // surveyForm.addEventListener('input', function () {
    //   saveSectionData(false)
    // })
  }
}

function checkResumeToken() {
  const token = localStorage.getItem('surveyResumeToken')
  if (token) {
    try {
      const parsed = JSON.parse(atob(token))
      if (parsed.userId === sessionStorage.getItem('userId')) {
        currentSection = parsed.section // Use the saved section
        // Don't remove the token here!
      }
    } catch (err) {
      console.error('Invalid token:', err)
      // Optionally, remove the invalid token:
      localStorage.removeItem('surveyResumeToken')
    }
  }
}

function nextSection() {
  const attemptNumber = parseInt(
    sessionStorage.getItem('attemptNumber') || '1',
    10
  )
  if (currentSection === -2 && attemptNumber === 1) {
    if (validateSection()) {
      const formData = getFormData()
      if (formData['q-2_0'] === 'Nein') {
        formData['q-2_1'] = 'Gruppe A'
      }
      saveSectionData(false, { preSurveyResponses: formData }).then(() => {
        currentSection = -1
        renderSection(currentSection)
        updateProgressBar()
        window.scrollTo({ top: 0, behavior: 'smooth' })
      })
    } else {
      const firstInvalid = markUnansweredQuestions()
      if (firstInvalid)
        firstInvalid.scrollIntoView({ behavior: 'smooth', block: 'center' })
    }
  } else if (currentSection === -1 && attemptNumber === 1) {
    if (validateSection() && validateDatenschutz()) {
      userData.datenschutzConsent =
        document.getElementById('datenschutzKenntnis').checked &&
        document.getElementById('datenschutzVerarbeitung').checked &&
        document.getElementById('teilnahmeEinverstaendnis').checked
      userData.unterschrift = document.getElementById('unterschrift').value
      saveSectionData(false, {
        datenschutzConsent: userData.datenschutzConsent,
        unterschrift: userData.unterschrift,
      }).then(() => {
        localStorage.removeItem('surveyResumeToken')
        currentSection = 0
        renderSection(currentSection)
        updateProgressBar()
        window.scrollTo({ top: 0, behavior: 'smooth' })
      })
    } else {
      const firstInvalid = markUnansweredQuestions()
      if (firstInvalid)
        firstInvalid.scrollIntoView({ behavior: 'smooth', block: 'center' })
    }
  } else if (currentSection < surveyData.length - 1) {
    if (validateSection()) {
      saveSectionData(false).then(() => {
        currentSection++
        renderSection(currentSection)
        updateProgressBar()
        window.scrollTo({ top: 0, behavior: 'smooth' })
      })
    } else {
      const firstInvalid = markUnansweredQuestions()
      if (firstInvalid)
        firstInvalid.scrollIntoView({ behavior: 'smooth', block: 'center' })
    }
  } else {
    finishSurvey()
  }
  updateNavigationButtons()
}

function previousSection() {
  const attemptNumber = parseInt(
    sessionStorage.getItem('attemptNumber') || '1',
    10
  )
  if (currentSection === 0) {
    if (attemptNumber === 1) {
      currentSection = -1
    }
  } else if (currentSection === -1 && attemptNumber === 1) {
    currentSection = -2
  } else if (currentSection > 0) {
    if (hasUnsavedChanges()) {
      Swal.fire({
        title: 'Ungespeicherte Änderungen',
        text: 'Sie haben ungespeicherte Änderungen. Möchten Sie wirklich zurückgehen?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Ja, zurückgehen',
        cancelButtonText: 'Nein, abbrechen',
      }).then((result) => {
        if (result.isConfirmed) {
          currentSection--
          renderSection(currentSection)
          updateProgressBar()
          window.scrollTo({ top: 0, behavior: 'smooth' })
          updateNavigationButtons()
        }
      })
      return
    }
    currentSection--
  }
  renderSection(currentSection)
  updateProgressBar()
  window.scrollTo({ top: 0, behavior: 'smooth' })
  updateNavigationButtons()
}

// NEW FUNCTION to check for unsaved changes
function hasUnsavedChanges() {
  const form = document.getElementById('surveyForm')
  if (!form) return false

  const attemptNumber = parseInt(
    sessionStorage.getItem('attemptNumber') || '1',
    10
  )
  const currentSectionData = {}
  const formData = new FormData(form)

  for (const [key, value] of formData.entries()) {
    currentSectionData[key] = value
  }

  let savedData = {}
  if (currentSection === -1) {
    // Handle the Datenschutzerklärung separately
    savedData.datenschutzConsent = userData.datenschutzConsent
    savedData.unterschrift = userData.unterschrift

    // Compare checkbox values individually
    const datenschutzKenntnis = form.querySelector('#datenschutzKenntnis')
    const datenschutzVerarbeitung = form.querySelector(
      '#datenschutzVerarbeitung'
    )
    const teilnahmeEinverstaendnis = form.querySelector(
      '#teilnahmeEinverstaendnis'
    )

    if (
      (datenschutzKenntnis &&
        datenschutzKenntnis.checked !== userData.datenschutzConsent) ||
      (datenschutzVerarbeitung &&
        datenschutzVerarbeitung.checked !== userData.datenschutzConsent) ||
      (teilnahmeEinverstaendnis &&
        teilnahmeEinverstaendnis.checked !== userData.datenschutzConsent)
    ) {
      return true
    }
    // Compare unterschrift
    const unterschrift = form.querySelector('#unterschrift')
    if (unterschrift && unterschrift.value !== savedData.unterschrift) {
      return true
    }

    return false // No changes in Datenschutzerklärung
  } else if (attemptNumber === 1) {
    savedData = userData.responses.t1 || {}
  } else if (attemptNumber === 2) {
    savedData = userData.responses.t2 || {}
  } else if (attemptNumber === 3) {
    savedData = userData.responses.t3 || {}
  }

  // Compare current section data with saved data
  for (const key in currentSectionData) {
    if (currentSectionData.hasOwnProperty(key)) {
      if (currentSectionData[key] !== String(savedData[key] || '')) {
        return true // Found a difference
      }
    }
  }

  return false // No changes found
}

function updateProgressBar() {
  const attemptNumber = parseInt(
    sessionStorage.getItem('attemptNumber') || '1',
    10
  )
  // If T1 is complete, skip; otherwise, update progress even if surveyCompleted flag is true.
  if (
    sessionStorage.getItem('surveyCompleted') === 'true' &&
    attemptNumber === 1
  ) {
    console.log(
      'Survey is marked complete for T1; skipping progress bar update.'
    )
    return
  }

  const totalSections = surveyData.length + (attemptNumber > 1 ? 0 : 1)
  let currentStep
  if (currentSection === -1) {
    currentStep = 1
  } else {
    currentStep = attemptNumber > 1 ? currentSection + 1 : currentSection + 2
  }
  const progress = (currentStep / totalSections) * 100
  const progressFill = document.getElementById('progressFill')
  const progressText = document.getElementById('progressText')
  if (progressFill) {
    progressFill.style.width = `${progress}%`
    progressFill.setAttribute('aria-valuenow', currentStep)
    progressFill.setAttribute('aria-valuemax', totalSections)
  }
  if (progressText) {
    progressText.textContent = `Schritt ${currentStep} von ${totalSections}`
  }
}

function updateNavigationButtons() {
  // Only hide navigation buttons on the chart generation/results page.
  if (window.location.pathname.includes('results.html')) {
    return
  }

  const container = document.querySelector('.container')
  if (!container) return

  // Remove any existing navigation buttons.
  const existingNav = container.querySelector('.navigation-buttons')
  if (existingNav) {
    existingNav.remove()
  }

  const navDiv = document.createElement('div')
  navDiv.className = 'navigation-buttons'

  const attemptNumber = parseInt(
    sessionStorage.getItem('attemptNumber') || '1',
    10
  )

  if (attemptNumber === 1) {
    if (currentSection === -2) {
      // Pre-survey page: show only "Weiter"
      navDiv.innerHTML = `
        <button type="button" id="nextButton" class="btn btn-primary">
            <i class="fas fa-chevron-right"></i> Weiter
        </button>
      `
    } else if (currentSection === -1) {
      // Datenschutz page: show "Zurück" and "Weiter"
      navDiv.innerHTML = `
        <button type="button" id="prevButton" class="btn btn-secondary">
            <i class="fas fa-chevron-left"></i> Zurück
        </button>
        <button type="button" id="nextButton" class="btn btn-primary">
            <i class="fas fa-chevron-right"></i> Weiter
        </button>
      `
    } else {
      // All other survey pages for T1: show "Zurück", "Fortschritt speichern", and "Weiter"
      navDiv.innerHTML = `
        <button type="button" id="prevButton" class="btn btn-secondary">
            <i class="fas fa-chevron-left"></i> Zurück
        </button>
        <button type="button" id="saveProgressButton" class="btn btn-primary">
            <i class="fas fa-save"></i> Fortschritt speichern
        </button>
        <button type="button" id="nextButton" class="btn btn-primary">
            <i class="fas fa-chevron-right"></i> Weiter
        </button>
      `
    }
  } else {
    // For T2 and T3 (attemptNumber > 1): keep the default behavior (all three buttons)
    navDiv.innerHTML = `
      <button type="button" id="prevButton" class="btn btn-secondary">
          <i class="fas fa-chevron-left"></i> Zurück
      </button>
      <button type="button" id="saveProgressButton" class="btn btn-primary">
          <i class="fas fa-save"></i> Fortschritt speichern
      </button>
      <button type="button" id="nextButton" class="btn btn-primary">
          <i class="fas fa-chevron-right"></i> Weiter
      </button>
    `
  }

  container.appendChild(navDiv)
  setupEventListeners()
}

async function startNewSurvey() {
  const userId = sessionStorage.getItem('userId')
  if (!userId) {
    Swal.fire({
      icon: 'error',
      title: 'Fehler',
      text: 'Benutzer-ID nicht gefunden. Bitte melden Sie sich erneut an.',
    }).then(() => {
      window.location.href = 'login.html'
    })
    return
  }

  try {
    const response = await fetch('/api/reset-user-data', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ userId }),
    })
    if (!response.ok) {
      const errorData = await response.json() // Get more specific error
      throw new Error(
        errorData.message || 'Fehler beim Zurücksetzen der Umfrage.'
      )
    }

    // No need for startNewAttempt flag.  We'll handle this on the server.
    // sessionStorage.setItem('startNewAttempt', 'true');

    // After reset, always start from the beginning for T2/T3
    sessionStorage.setItem('attemptNumber', '2') // Set to 2 for a new attempt
    sessionStorage.setItem('currentSection', '0')
    await loadUserData() // Reload user data, no flag needed
    Swal.fire({
      icon: 'success',
      title: 'Erfolg',
      text: 'Ihre Umfrage wurde erfolgreich zurückgesetzt. Sie können jetzt eine neue Umfrage starten.',
      timer: 3000,
      showConfirmButton: false,
    })
  } catch (error) {
    console.error('Fehler beim Zurücksetzen der Umfrage:', error)
    Swal.fire({
      icon: 'error',
      title: 'Fehler',
      text:
        error.message ||
        'Fehler beim Zurücksetzen der Umfrage. Bitte versuchen Sie es erneut.',
    })
  }
}

async function resetSurveyData() {
  const userId = sessionStorage.getItem('userId')
  if (!userId) {
    Swal.fire({
      icon: 'error',
      title: 'Fehler',
      text: 'Benutzer-ID nicht gefunden. Bitte melden Sie sich erneut an.',
    }).then(() => {
      window.location.href = 'login.html'
    })
    return
  }

  try {
    const response = await fetch('/api/reset-user-data', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ userId }),
    })
    if (!response.ok) {
      const errorData = await response.json() // Get more specific error
      throw new Error(
        errorData.message || 'Fehler beim Zurücksetzen der Umfrage.'
      )
    }

    Swal.fire({
      icon: 'success',
      title: 'Erfolg',
      text: 'Ihre Umfrage wurde erfolgreich zurückgesetzt. Sie können jetzt eine neue Umfrage starten.',
      timer: 3000,
      showConfirmButton: false,
    })

    // Reset local data and re-render
    resetUserData()
    currentSection = -1
    renderSection(currentSection)
    updateProgressBar()
    updateNavigationButtons()
  } catch (error) {
    console.error('Fehler beim Zurücksetzen der Umfrage:', error)
    Swal.fire({
      icon: 'error',
      title: 'Fehler',
      text:
        error.message ||
        'Fehler beim Zurücksetzen der Umfrage. Bitte versuchen Sie es erneut.',
    })
  }
}

function logout() {
  sessionStorage.clear()
  localStorage.removeItem('surveyResumeToken')
  userData = null
  currentSection = -1 // Reset to initial section
  window.location.href = 'login.html'
}

function hideNavigationButtons() {
  const navButtons = document.querySelector('.navigation-buttons')
  if (navButtons) {
    navButtons.style.display = 'none'
  }
}

function resetUserData() {
  userData = {
    responses: {
      t1: {},
      t2: {},
      t3: {},
    },
    scores: {
      t1: {},
      t2: {},
      t3: {},
    },
    openEndedResponses: {},
    attemptNumber: 1,
    datenschutzConsent: false,
    unterschrift: '',
    timeStamps: {
      t1: null,
      t2: null,
      t3: null,
    },
    courses: [],
    isComplete: false,
    currentSection: attemptNumber === 1 ? -2 : 0,
    t1Complete: false,
    t2Complete: false,
    t3Complete: false,
  }
}
function getFormData() {
  const form = document.getElementById('surveyForm')
  const formData = new FormData(form)
  const data = {}
  for (const [key, value] of formData.entries()) {
    data[key] = value
  }
  return data
}

async function loadUserData() {
  try {
    if (isInitializing) return
    isInitializing = true

    const userId = sessionStorage.getItem('userId')
    if (!userId) {
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: 'User ID not found. Please log in again.',
      }).then(() => {
        window.location.href = 'login.html'
      })
      return
    }

    const response = await fetch(`/api/user-data/${userId}`)
    if (!response.ok) throw new Error('Failed to load user data')
    const data = await response.json()

    const attemptNumber = parseInt(
      sessionStorage.getItem('attemptNumber') || '1',
      10
    )

    if (data && Object.keys(data).length > 0) {
      userData = {
        responses: {
          t1: data.initialResponses || {},
          t2: data.updatedResponses || {},
          t3: data.followUpResponses || {},
        },
        scores: {
          t1: data.initialScores || {},
          t2: data.updatedScores || {},
          t3: data.followUpScores || {},
        },
        openEndedResponses: data.openEndedResponses || {},
        attemptNumber: attemptNumber,
        datenschutzConsent: data.datenschutzConsent || false,
        unterschrift: data.unterschrift || '',
        timeStamps: data.timeStamps || {},
        courses: data.courses || [],
        isComplete: data.isComplete || false,
        currentSection: attemptNumber === 1 ? -2 : 0,
        t1Complete: data.t1Complete || false,
        t2Complete: data.t2Complete || false,
        t3Complete: data.t3Complete || false,
        preSurveyResponses: data.preSurveyResponses || {},
        initialResponses: data.initialResponses || {},
        updatedResponses: data.updatedResponses || {},
        followUpResponses: data.followUpResponses || {},
      }
    } else {
      userData = {
        responses: { t1: {}, t2: {}, t3: {} },
        scores: { t1: {}, t2: {}, t3: {} },
        openEndedResponses: {},
        attemptNumber: 1,
        datenschutzConsent: false,
        unterschrift: '',
        timeStamps: { t1: null, t2: null, t3: null },
        courses: [],
        isComplete: false,
        currentSection: attemptNumber === 1 ? -2 : 0,
        t1Complete: false,
        t2Complete: false,
        t3Complete: false,
        preSurveyResponses: {},
        initialResponses: {},
        updatedResponses: {},
        followUpResponses: {},
      }
    }

    console.log('loadUserData - userData:', userData)

    currentSection = userData.currentSection
    renderSection(currentSection)
    updateProgressBar()
    updateNavigationButtons()
  } catch (error) {
    console.error('Fatal error in loadUserData:', error)
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: 'Failed to load user data. Please try again.',
    }).then(() => {
      window.location.href = 'login.html'
    })
  } finally {
    isInitializing = false
  }
}

async function saveSectionData(isComplete, additionalData = {}) {
  removeUnansweredMarkers()

  const userId = sessionStorage.getItem('userId')
  const attemptNumber = parseInt(
    sessionStorage.getItem('attemptNumber') || '1',
    10
  )
  if (!userId) {
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: 'User ID not found. Please log in again.',
    }).then(() => {
      window.location.href = 'login.html'
    })
    return Promise.reject(new Error('No userId found'))
  }

  const form = document.getElementById('surveyForm')
  const formData = new FormData(form)
  const cleanAnswers = {}
  for (const [key, value] of formData.entries()) {
    cleanAnswers[key] = value
  }

  const payload = {
    userId: userId,
    data: cleanAnswers,
    isComplete: isComplete === true,
    currentSection: parseInt(currentSection, 10),
    attemptNumber: attemptNumber,
    datenschutzConsent:
      additionalData.datenschutzConsent !== undefined
        ? additionalData.datenschutzConsent
        : userData?.datenschutzConsent === true,
    unterschrift:
      additionalData.unterschrift ||
      sessionStorage.getItem('generatedCode') ||
      '',
    openEndedResponses: {},
    courses: [],
    preSurveyResponses: additionalData.preSurveyResponses || {},
  }

  const openEndedFields = {
    1: { t1OpenEndedResponse: 't1_strategy' },
    2: {
      t2OpenEndedResponse: 't2_reflection',
      t2_course_feedback: 't2_course_feedback',
      t2_course_list: 't2_course_list',
    },
    3: { t3OpenEndedResponse: 't3_reflection' },
  }

  if (openEndedFields[attemptNumber]) {
    for (const [fieldId, responseKey] of Object.entries(
      openEndedFields[attemptNumber]
    )) {
      const field = document.getElementById(fieldId)
      if (field && field.value.trim()) {
        payload.openEndedResponses[responseKey] = field.value.trim()
      }
    }
  }

  if (attemptNumber === 2 && payload.openEndedResponses.t2_course_list) {
    payload.courses = payload.openEndedResponses.t2_course_list
      .split(',')
      .map((c) => c.trim())
  }

  try {
    const res = await fetch('/api/save-user-data', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload),
    })

    if (!res.ok) {
      const errData = await res.json()
      throw new Error(errData.message || 'Server error')
    }
    const data = await res.json()

    if (currentSection === -2) {
      userData.preSurveyResponses = {
        ...(userData.preSurveyResponses || {}),
        ...cleanAnswers,
      }
      if (userData.preSurveyResponses['q-2_0'] === 'Nein') {
        userData.preSurveyResponses['q-2_1'] = 'Gruppe A'
      }
    } else if (attemptNumber === 1) {
      userData.responses.t1 = {
        ...(userData.responses.t1 || {}),
        ...cleanAnswers,
      }
    } else if (attemptNumber === 2) {
      userData.responses.t2 = {
        ...(userData.responses.t2 || {}),
        ...cleanAnswers,
      }
      userData.updatedResponses = {
        ...userData.updatedResponses,
        ...cleanAnswers,
      }
    } else if (attemptNumber === 3) {
      userData.responses.t3 = {
        ...(userData.responses.t3 || {}),
        ...cleanAnswers,
      }
      userData.followUpResponses = {
        ...userData.followUpResponses,
        ...cleanAnswers,
      }
    }

    userData.openEndedResponses = {
      ...userData.openEndedResponses,
      ...data.openEndedResponses,
    }
    if (data.initialScores) userData.scores.t1 = data.initialScores
    if (data.updatedScores) userData.scores.t2 = data.updatedScores
    if (data.followUpScores) userData.scores.t3 = data.followUpScores

    if (data.isComplete) {
      localStorage.setItem('surveyCompleted', 'true')
      sessionStorage.removeItem('surveyResumeToken')
    }

    return data
  } catch (error) {
    console.error('Error saving user data:', error)
    Swal.fire({
      icon: 'error',
      title: 'Error saving data',
      text:
        error.message ||
        'An error occurred while saving your data. Please try again.',
    })
    return Promise.reject(error)
  }
}

async function finishSurvey() {
  if (validateSection()) {
    try {
      await saveSectionData(true) // Await the save operation
      showResults()
    } catch (err) {
      console.error('Error finishing survey:', err)
      Swal.fire({
        // Use SweetAlert2 for error display
        icon: 'error',
        title: 'Error finishing survey',
        text: 'An error occurred while saving your data. Please try again.',
      })
    }
  } else {
    const firstInvalid = markUnansweredQuestions()
    if (firstInvalid) {
      firstInvalid.scrollIntoView({ behavior: 'smooth', block: 'center' })
    }
  }
}

async function saveAndResumeLater() {
  try {
    await saveSectionData(false) // Await the save operation
    const resumeToken = btoa(
      JSON.stringify({
        userId: sessionStorage.getItem('userId'),
        section: currentSection,
      })
    )
    localStorage.setItem('surveyResumeToken', resumeToken)
    Swal.fire({
      // Use SweetAlert2
      icon: 'success',
      title: 'Fortschritt gespeichert',
      text: 'Ihr Fortschritt wurde gespeichert. Sie können später fortfahren.',
      timer: 3000,
      showConfirmButton: false,
    })
  } catch (error) {
    console.error('Error saving progress:', error)
    Swal.fire({
      // Use SweetAlert2
      icon: 'error',
      title: 'Fehler beim Speichern',
      text: 'Ihr Fortschritt konnte nicht gespeichert werden. Bitte versuchen Sie es erneut.',
    })
  }
}

function populatePersonalInfo(form, data, lockFields = false) {
  surveyData.forEach((section, sectionIndex) => {
    if (section.title === 'Persönliche Angaben') {
      section.questions.forEach((question, questionIndex) => {
        const fieldName = `q${sectionIndex}_${questionIndex}`
        const value = data[fieldName]
        if (value !== undefined) {
          const fields = form.querySelectorAll(`[name="${fieldName}"]`)
          fields.forEach((field) => {
            if (field.type === 'radio') {
              const radioField = form.querySelector(
                `[name="${fieldName}"][value="${value}"]`
              )
              if (radioField) {
                radioField.checked = true
                if (lockFields) {
                  radioField.addEventListener('click', function (e) {
                    e.preventDefault()
                  })
                }
              }
            } else {
              field.value = value
              if (lockFields) {
                field.readOnly = true
                field.style.backgroundColor = '#f0f0f0'
                field.style.cursor = 'not-allowed'
              }
            }
          })
        }
      })
    }
  })
}
// Helper function to get the correct response object based on attempt number
function getResponseObject(userData, attemptNumber) {
  if (attemptNumber === 1) {
    return userData.responses.t1 || {}
  } else if (attemptNumber === 2) {
    return userData.responses.t2 || {}
  } else if (attemptNumber === 3) {
    return userData.responses.t3 || {}
  }
  return {} // Should never happen, but good practice to have a default
}

// Helper function to determine if a field should be locked (readonly/disabled)
function isFieldLocked(attemptNumber, sectionIndex, fieldName) {
  if (attemptNumber > 1 && sectionIndex === 0) {
    // Lock all personal info fields in T2 and T3, except t2_course_feedback
    if (fieldName === 't2_course_feedback') {
      return false // Keep t2_course_feedback editable in T2
    }
    return true
  }
  if (attemptNumber === 3 && fieldName === 't2_course_feedback') {
    return true
  }

  return false // Default: not locked
}

// Helper to get value with fallback for T2/T3 personal data
// Helper to get value with fallback for T2/T3 personal data
function getPersonalDataValue(userData, attemptNumber, fieldName) {
  if (attemptNumber === 1) {
    return (
      (userData.initialResponses && userData.initialResponses[fieldName]) || ''
    )
  } else if (attemptNumber === 2) {
    return (
      (userData.updatedResponses && userData.updatedResponses[fieldName]) ||
      (userData.initialResponses && userData.initialResponses[fieldName]) ||
      ''
    )
  } else {
    // attemptNumber === 3
    return (
      (userData.followUpResponses && userData.followUpResponses[fieldName]) ||
      (userData.updatedResponses && userData.updatedResponses[fieldName]) ||
      (userData.initialResponses && userData.initialResponses[fieldName]) ||
      ''
    )
  }
}

function populateFormFields(form, userData, sectionIndex) {
  const attemptNumber = parseInt(
    sessionStorage.getItem('attemptNumber') || '1',
    10
  )
  const section = surveyData[sectionIndex]

  if (!section) {
    console.warn(`Section ${sectionIndex} not found in surveyData.`)
    return
  }

  section.questions.forEach((question, qIndex) => {
    const fieldName = `q${sectionIndex}_${qIndex}`
    const isLocked = isFieldLocked(attemptNumber, sectionIndex, fieldName)
    let fieldValue = ''

    if (sectionIndex === 0) {
      // Personal Info Section
      fieldValue = getPersonalDataValue(userData, attemptNumber, fieldName)
    } else {
      // Other Sections
      const responses = getResponseObject(userData, attemptNumber)
      fieldValue = responses[fieldName] || ''
    }

    const fields = form.querySelectorAll(`[name="${fieldName}"]`)
    fields.forEach((field) => {
      if (field.type === 'radio') {
        if (field.value === fieldValue.toString()) {
          field.checked = true
        }
        if (isLocked) {
          field.disabled = true // Disable radio buttons if locked
        }
      } else {
        field.value = fieldValue
        if (isLocked) {
          field.readOnly = true
          field.style.backgroundColor = '#f0f0f0'
          field.style.cursor = 'not-allowed'
          if (field.tagName.toLowerCase() === 'select') {
            field.disabled = true
          }
        }
      }
    })
  })
}

function validateSection(checkRequired = false) {
  const form = document.getElementById('surveyForm')
  if (!form) return false

  let valid = true
  form
    .querySelectorAll('.question')
    .forEach((q) => q.classList.remove('unanswered'))

  form.querySelectorAll('[required]').forEach((field) => {
    if (field.readOnly || field.disabled) return

    const conditionalParent = field.closest('.conditional-field')
    if (conditionalParent) {
      const controllingRadioName = 'q-2_0'
      const controllingRadio = form.querySelector(
        `input[name="${controllingRadioName}"]:checked`
      )
      if (controllingRadio && controllingRadio.value !== 'Ja') {
        return // Skip validation if "Nein" is selected
      }
    }

    if (field.offsetParent !== null) {
      // Check for visibility
      if (
        (field.type === 'radio' &&
          !form.querySelector(`[name="${field.name}"]:checked`)) ||
        (field.type === 'checkbox' && !field.checked) ||
        (field.type !== 'radio' &&
          field.type !== 'checkbox' &&
          !field.value.trim())
      ) {
        valid = false
        const questionDiv = field.closest('.question') || field.parentElement
        if (questionDiv) questionDiv.classList.add('unanswered')
      }
    }
  })

  if (!valid) {
    Swal.fire({
      icon: 'error',
      title: 'Fehler',
      text: 'Bitte füllen Sie alle Pflichtfelder aus.',
    })
  }
  return valid
}

function validateDatenschutz() {
  const checks = [
    {
      el: document.getElementById('datenschutzKenntnis'),
      label: 'Datenschutzkenntnis',
    },
    {
      el: document.getElementById('datenschutzVerarbeitung'),
      label: 'Datenverarbeitung',
    },
    {
      el: document.getElementById('teilnahmeEinverstaendnis'),
      label: 'Teilnahmeeinverständnis',
    },
    { el: document.getElementById('unterschrift'), label: 'Unterschrift' }, // Keep this for consistent structure
  ]

  let valid = true

  // Remove existing 'unanswered' classes and shake animations, and messages
  checks.forEach(({ el }) => {
    if (el?.parentElement) {
      el.parentElement.classList.remove('unanswered')
      el.parentElement.style.animation = '' // Remove shake
      const existingMessage = el.parentElement.querySelector(
        '.unanswered-message'
      )
      if (existingMessage) {
        existingMessage.remove()
      }
    }
  })

  // Validate each field
  for (const { el, label } of checks) {
    //Destructure label here
    if (!el) {
      valid = false
      continue // Skip to the next check if element is missing
    }

    let isFieldValid = true
    if (el.type === 'checkbox') {
      isFieldValid = el.checked
    } else if (el.id === 'unterschrift') {
      //For the unterschrift, we just need to check if it exists,
      //as it is prefilled and readonly
      isFieldValid = el.value.trim() !== ''
    } else {
      isFieldValid = el.value.trim() !== ''
    }

    if (!isFieldValid) {
      valid = false
      if (el.parentElement) {
        el.parentElement.classList.add('unanswered')
        el.parentElement.style.animation = 'shake 0.3s' // Add shake

        // Add the error message
        const messageSpan = document.createElement('span')
        messageSpan.className = 'unanswered-message'
        messageSpan.textContent = `⚠️ Bitte ${label} bestätigen.` // Use the label
        el.parentElement.appendChild(messageSpan)
      }
    }
  }

  return valid
}

function validateYear(input) {
  input.value = input.value.replace(/\D/g, '').slice(0, 4) // Ensure only numbers and max 4 digits
  const currentYear = new Date().getFullYear()
  const year = parseInt(input.value, 10)
  const isValid =
    input.value.length === 4 && year >= 1900 && year <= currentYear

  if (input.value === '') {
    input.setCustomValidity('Bitte geben Sie Ihr Geburtsjahr ein.')
  } else if (!isValid) {
    input.setCustomValidity(
      `Geben Sie ein Jahr zwischen 1900 und ${currentYear} ein.`
    )
  } else {
    input.setCustomValidity('')
  }
  input.style.borderColor = isValid ? '' : 'red'
  input.reportValidity()
}

function renderSection(sectionIndex) {
  const surveyForm = document.getElementById('surveyForm')
  const attemptNumber = parseInt(
    sessionStorage.getItem('attemptNumber') || '1',
    10
  )
  // Define group from userData
  const group = userData.preSurveyResponses?.['q-2_1'] || 'Gruppe A'
  surveyForm.innerHTML = ''

  // Skip pre-survey questions for T2 and T3
  if (attemptNumber > 1 && (sectionIndex === -2 || sectionIndex === -1)) {
    // For T2 and T3, skip to personal information section
    currentSection = 0
    sectionIndex = 0
  }

  // Pre-survey questions (sectionIndex === -2, attempt 1 only)
  if (sectionIndex === -2 && attemptNumber === 1) {
    let html = `<div class="section"><h2>${preSurveyQuestions.title}</h2>`
    preSurveyQuestions.questions.forEach((question, qIndex) => {
      const fieldName = `q-2_${qIndex}`
      const isConditional = question.dependsOn
      html += `<div class="question" id="${fieldName}-container" ${
        isConditional ? 'style="display: none;"' : ''
      }>`
      html += `<p>${question.text}</p>`
      if (question.type === 'radio') {
        html += `<div class="radio-group" id="${fieldName}-group">`
        question.options.forEach((opt) => {
          const onchangeAttr =
            fieldName === 'q-2_0'
              ? 'onchange="handlePreSurveyChange(this)"'
              : ''
          html += `<div class="radio-option">
                     <label>
                       <input type="radio" name="${fieldName}" value="${opt}" ${
            question.required ? 'required' : ''
          } ${onchangeAttr}>
                       <span class="radio-checkmark"></span>
                       ${opt}
                     </label>
                   </div>`
        })
        html += `</div>`
      }
      html += `</div>`
    })
    html += `</div>`
    surveyForm.innerHTML = html

    // Populate saved responses and current selections
    const currentFormData = getFormData()
    if (userData && userData.preSurveyResponses) {
      Object.keys(userData.preSurveyResponses).forEach((key) => {
        const input = surveyForm.querySelector(
          `input[name="${key}"][value="${userData.preSurveyResponses[key]}"]`
        )
        if (input) input.checked = true
      })
    }
    Object.keys(currentFormData).forEach((key) => {
      const input = surveyForm.querySelector(
        `input[name="${key}"][value="${currentFormData[key]}"]`
      )
      if (input) input.checked = true
    })

    const participationRadio =
      surveyForm.querySelector('input[name="q-2_0"]:checked') ||
      surveyForm.querySelector('input[name="q-2_0"]')
    if (participationRadio) handlePreSurveyChange(participationRadio)
  }

  // Privacy policy section (sectionIndex === -1, attempt 1 only)
  else if (sectionIndex === -1 && attemptNumber === 1) {
    surveyForm.innerHTML = `
      <div class="datenschutz-section">
        <h2>Datenschutzerklärung</h2>
        <p>Danke, dass Sie den Fragebogen ausgefüllt haben. Bevor wir Ihnen eine persönliche Rückmeldung geben, müssen wir sicher stellen, dass wir Ihre Daten speichern dürfen. Dafür lesen Sie sich bitte die Datenschutzerklärung durch und stimmen Sie dieser durch Ihre digitale Unterschrift zu.</p>
        <div class="datenschutz-content">
          <h3>Projektleitung:</h3>
          <p>Prof.in Dr. Charlott Rubach & Anne-Kathrin Hirsch</p>
          <p>Sehr geehrte Lehramtsstudierende,</p>
          <p>die Digitalisierung und Digitalität im Bildungsbereich erhielten in den letzten Jahren große Aufmerksamkeit. Der kompetente Umgang mit digitalen Medien gehört zum Aufgabenbereich von Lehrkräften. Daher ist es bedeutsam, dass Lehramtsstudierende während ihrer Ausbildung auf diesen Umgang vorbereitet werden. Wir interessieren uns im Rahmen dieser Studie „Open-Digi“ dafür, inwieweit die von uns erstellten Lernerfahrungen zur Förderung digitaler Kompetenzen beitragen.</p>
          <p>Wir sind Prof. Dr. Charlott Rubach und Anne-Kathrin Hirsch, Bildungsforscherinnen an der Universität Rostock. Unsere Forschungsschwerpunkte sind Digitalisierung, Förderung digitaler Kompetenzen und Gestaltungsmöglichkeiten einer bedarfsorientierten Lehrkräftebildung.</p>
          <p>Ziel des Projektes ist die Untersuchung von effektiven Lernerfahrungen für die Entwicklung digitaler Kompetenzen. Das Projekt besteht aus mehreren Schritten:</p>
          <ul>
            <li>Sie füllen die Befragung zum Open-Digi Projekt aus, welcher der Pre-Diagnostik gilt und zirka 10 Minuten dauert. Alle Befragungen thematisieren ausschließlich Aspekte von digitaler Kompetenz.</li>
            <li>Ihnen werden auf Grundlage der Diagnostik mehrere Vorschläge gemacht, wie Sie eigene Kompetenzen weiterentwickeln können.</li>
            <li>Sie bearbeiten verschiedene Kurse.</li>
            <li>Sie durchlaufen die Post-Diagnostik direkt nach Bearbeitung der Kurse.</li>
            <li>Sie machen eine dritte Befragung, 1 Monat nach Bearbeitung der Kurse.</li>
          </ul>
          <p>Ihre Teilnahme an unserer Studie ist freiwillig. Wenn Sie an der Studie teilnehmen, können Sie die Befragung jederzeit abbrechen. In diesem Falle werden die Daten nicht gespeichert.</p>
          <p>Die Befragung ist anonym. Das heißt, es werden auch ausschließlich anonymisierte Informationen analysiert und im Rahmen wissenschaftlicher Arbeiten veröffentlicht. Es werden keine Informationen gespeichert, die es uns möglich machen, Sie als Person zu identifizieren. Eine Rücknahme Ihres Einverständnisses und damit Löschung Ihrer Daten, nachdem Sie den Fragebogen ausgefüllt und abgegeben haben, ist demnach nicht möglich. Anonymisiert sind auch Daten, die keine persönliche Information mehr enthalten, bspw. Alter, Geschlecht, Lehramtstyp, Fächer und Hochschulsemester.</p>
          <p>Wir speichern Ihre Antworten und Ihre Angaben (z. B. Alter und Geschlecht). Diese werden bis zum Abschluss der Untersuchung und maximal 10 Jahre auf den Dienstrechnern der Wissenschaftlerinnen aus dem Projekt gespeichert und danach gelöscht.</p>
          <p>Es erfolgt keine Weitergabe Ihrer Daten an Dritte außerhalb des Forschungsprojektes.</p>
          <p>Unter folgendem <a href="datenschutz.html" target="_blank">Link</a> finden Sie ausführliche Hinweise zum Schutz Ihrer Daten.</p>
        </div>
        <div class="datenschutz-inputs">
          <div class="question">
            <label for="datum">Datum</label>
            <input type="date" id="datum" name="datum" value="${
              new Date().toISOString().split('T')[0]
            }" required>
          </div>
          <div class="question">
            <label for="unterschrift">Unterschrift</label>
            <input type="text" id="unterschrift" name="unterschrift" value="${
              sessionStorage.getItem('generatedCode') || ''
            }" readonly required>
          </div>
          <div class="agreement-questions">
            <div class="agreement">
              <label>
                <input type="checkbox" id="datenschutzKenntnis" name="datenschutzKenntnis" required>
                Mir sind die Datenschutzhinweise zur Kenntnis gegeben worden.
              </label>
            </div>
            <div class="agreement">
              <label>
                <input type="checkbox" id="datenschutzVerarbeitung" name="datenschutzVerarbeitung" required>
                Ich stimme der Datenverarbeitung zu.
              </label>
            </div>
            <div class="agreement">
              <label>
                <input type="checkbox" id="teilnahmeEinverstaendnis" name="teilnahmeEinverstaendnis" required>
                Ich möchte an der Befragung teilnehmen.
              </label>
            </div>
          </div>
        </div>
      </div>
    `
  }

  // Main survey sections (sectionIndex >= 0)
  else if (sectionIndex >= 0 && sectionIndex < surveyData.length) {
    const section = surveyData[sectionIndex]
    let html = `<div class="section"><h2>${section.title}</h2>`
    if (section.title !== 'Persönliche Angaben') {
      html += `<p class="section-instruction">Wie kompetent fühlen Sie sich in der Ausführung der folgenden Aktivitäten...</p>`
    }
    section.questions.forEach((question, qIndex) => {
      // Skip questions that should only show in T2 when we're in T1
      if (question.showOnlyInT2 && attemptNumber === 1) {
        return
      }

      // Skip questions that should only show for specific groups
      if (
        question.showOnlyForGroups &&
        Array.isArray(question.showOnlyForGroups) &&
        !question.showOnlyForGroups.includes(group.replace('Gruppe ', ''))
      ) {
        return
      }

      const fieldName = `q${sectionIndex}_${qIndex}`
      const isLocked = isFieldLocked(attemptNumber, sectionIndex, fieldName)
      html += `<div class="question" id="${fieldName}-container">
                 <p>${question.text}</p>`

      if (question.type === 'radio') {
        const responses = getResponseObject(userData, attemptNumber)
        const fieldValue =
          sectionIndex === 0
            ? getPersonalDataValue(userData, attemptNumber, fieldName)
            : responses[fieldName] || ''
        html += `<div class="radio-group" id="${fieldName}-group">`
        question.options.forEach((opt) => {
          const isChecked = fieldValue === opt
          const disabledAttr = isLocked ? 'disabled' : ''
          html += `
            <div class="radio-option">
              <label>
                <input type="radio" name="${fieldName}" value="${opt}"
                       ${isChecked ? 'checked' : ''}
                       ${question.required ? 'required' : ''}
                       ${disabledAttr}
                       onchange="handleTeachingStudentChange(this)">
                <span class="radio-checkmark"></span>
                ${opt}
              </label>
            </div>`
        })
        html += `</div>`
        if (fieldName === 'q0_2') {
          const showLehramtFields = fieldValue === 'Ja'
          const showOtherStudiesField = fieldValue === 'Nein'
          html += `
            <div class="conditional-fields-container">
              <div class="conditional-field" data-condition="Ja" style="display: ${
                showLehramtFields ? 'block' : 'none'
              };">
                <div class="question">
                  <label>Welches Lehramt studieren Sie?</label>
                  <select name="q0_6" ${isLocked ? 'disabled' : ''} ${
            !isLocked && attemptNumber === 1 ? 'required' : ''
          }>
                    <option value="" disabled ${
                      getPersonalDataValue(userData, attemptNumber, 'q0_6')
                        ? ''
                        : 'selected'
                    }>Bitte wählen</option>
                    <option value="Lehramt an Grundschulen" ${
                      getPersonalDataValue(userData, attemptNumber, 'q0_6') ===
                      'Lehramt an Grundschulen'
                        ? 'selected'
                        : ''
                    }>Lehramt an Grundschulen</option>
                    <option value="Lehramt an Regionalen Schulen" ${
                      getPersonalDataValue(userData, attemptNumber, 'q0_6') ===
                      'Lehramt an Regionalen Schulen'
                        ? 'selected'
                        : ''
                    }>Lehramt an Regionalen Schulen</option>
                    <option value="Lehramt an Gymnasien" ${
                      getPersonalDataValue(userData, attemptNumber, 'q0_6') ===
                      'Lehramt an Gymnasien'
                        ? 'selected'
                        : ''
                    }>Lehramt an Gymnasien</option>
                    <option value="Lehramt für Sonderpädagogik" ${
                      getPersonalDataValue(userData, attemptNumber, 'q0_6') ===
                      'Lehramt für Sonderpädagogik'
                        ? 'selected'
                        : ''
                    }>Lehramt für Sonderpädagogik</option>
                    <option value="Berufspädagogik (B.A.)" ${
                      getPersonalDataValue(userData, attemptNumber, 'q0_6') ===
                      'Berufspädagogik (B.A.)'
                        ? 'selected'
                        : ''
                    }>Berufspädagogik (B.A.)</option>
                    <option value="Berufspädagogik (M.A.)" ${
                      getPersonalDataValue(userData, attemptNumber, 'q0_6') ===
                      'Berufspädagogik (M.A.)'
                        ? 'selected'
                        : ''
                    }>Berufspädagogik (M.A.)</option>
                    <option value="Wirtschaftspädagogik (B.A.)" ${
                      getPersonalDataValue(userData, attemptNumber, 'q0_6') ===
                      'Wirtschaftspädagogik (B.A.)'
                        ? 'selected'
                        : ''
                    }>Wirtschaftspädagogik (B.A.)</option>
                    <option value="Wirtschaftspädagogik (M.A.)" ${
                      getPersonalDataValue(userData, attemptNumber, 'q0_6') ===
                      'Wirtschaftspädagogik (M.A.)'
                        ? 'selected'
                        : ''
                    }>Wirtschaftspädagogik (M.A.)</option>
                  </select>
                </div>
                <div class="question">
                  <label>Welche Fächer studieren Sie aktuell in Ihrem Lehramtsstudium?</label>
                  <input type="text" name="q0_7" ${
                    isLocked ? 'readonly' : ''
                  } ${
            !isLocked && attemptNumber === 1 ? 'required' : ''
          } value="${
            getPersonalDataValue(userData, attemptNumber, 'q0_7') || ''
          }"/>
                </div>
              </div>
              <div class="conditional-field" data-condition="Nein" style="display: ${
                showOtherStudiesField ? 'block' : 'none'
              };">
                <div class="question">
                  <label>Was studieren Sie?</label>
                  <input type="text" name="q0_8" ${
                    isLocked ? 'readonly' : ''
                  } ${
            !isLocked && attemptNumber === 1 ? 'required' : ''
          } value="${
            getPersonalDataValue(userData, attemptNumber, 'q0_8') || ''
          }"/>
                </div>
              </div>
            </div>
          `
        }
      } else if (question.type === 'dropdown') {
        const responses = getResponseObject(userData, attemptNumber)
        const fieldValue =
          sectionIndex === 0
            ? getPersonalDataValue(userData, attemptNumber, fieldName)
            : responses[fieldName] || ''
        const disabledAttr = isLocked ? 'disabled' : ''
        html += `<select name="${fieldName}" ${
          question.required ? 'required' : ''
        } ${disabledAttr}>`
        html += `<option value="" disabled ${
          fieldValue ? '' : 'selected'
        }>Bitte wählen</option>`
        question.options.forEach((opt) => {
          html += `<option value="${opt}" ${
            fieldValue === opt ? 'selected' : ''
          }>${opt}</option>`
        })
        html += `</select>`
        if (isLocked) {
          html += `<input type="hidden" name="${fieldName}" value="${fieldValue}">`
        }
      } else if (question.type === 'number') {
        const responses = getResponseObject(userData, attemptNumber)
        const fieldValue =
          sectionIndex === 0
            ? getPersonalDataValue(userData, attemptNumber, fieldName)
            : responses[fieldName] || ''
        html += `<input type="number" name="${fieldName}" value="${fieldValue}" min="${
          question.min || ''
        }" max="${question.max || ''}" step="${question.step || 'any'}" ${
          question.required ? 'required' : ''
        } oninput="validateNumberInput(this)" ${isLocked ? 'readonly' : ''}>`
      } else if (question.type === 'text') {
        const responses = getResponseObject(userData, attemptNumber)
        const fieldValue =
          sectionIndex === 0
            ? getPersonalDataValue(userData, attemptNumber, fieldName)
            : responses[fieldName] || ''
        html += `<input type="text" name="${fieldName}" value="${fieldValue}" ${
          question.required ? 'required' : ''
        } ${isLocked ? 'readonly' : ''}>`
      } else if (question.type === 'scale') {
        const responses = getResponseObject(userData, attemptNumber)
        const fieldValue =
          sectionIndex === 0
            ? getPersonalDataValue(userData, attemptNumber, fieldName)
            : responses[fieldName] || ''
        html += `<div class="rating-scale">`
        for (let i = 0; i <= 6; i++) {
          const isSelected = fieldValue === i.toString()
          const disabledAttr = isLocked ? 'disabled' : ''
          html += `
            <label class="scale-label">
              <input type="radio" name="${fieldName}" value="${i}"
                     ${isSelected ? 'checked' : ''}
                     ${question.required ? 'required' : ''}
                     ${disabledAttr}>
              <span class="scale-button">${i}</span>
            </label>
          `
        }
        html += `</div><div class="scale-labels"><span>gar nicht kompetent</span><span>ausgesprochen kompetent</span></div>`
      }
      html += `</div>`
    })

    // Add T2 Feedback section for attempt 2 in personal details section
    if (
      sectionIndex === 0 &&
      attemptNumber === 2 &&
      (group === 'Gruppe A' || group === 'Gruppe B')
    ) {
      let feedback = userData.openEndedResponses?.t2_course_feedback || ''
      let courseList = userData.openEndedResponses?.t2_course_list || ''
      let feedbackField = `
        <div class="t2-feedback">
            <p>Welche Kurse bzw. Fortbildungen haben Sie in den letzten Wochen auf Ilias absolviert?</p>
            <input type="text" name="t2_course_list" id="t2_course_list" value="${courseList}" required>
            <p>Wie fandest Sie die absolvierten Kurse in ILIAS in Bezug auf Inhalt und Struktur? Was haben Sie mitgenommen? Was war hilfreich für Sie?</p>
            <textarea name="t2_course_feedback" id="t2_course_feedback" required>${feedback}</textarea>
        </div>`
      html += feedbackField
    }

    html += `</div>`
    surveyForm.innerHTML = html

    // Add event listeners for q0_2 (teaching student question)
    const radios = document.querySelectorAll('input[name="q0_2"]')
    if (radios.length > 0) {
      radios.forEach((radio) => {
        radio.addEventListener('change', handleTeachingStudentChange)
      })
      const checkedRadio = document.querySelector('input[name="q0_2"]:checked')
      if (checkedRadio) handleTeachingStudentChange(checkedRadio)
    }
  }

  // Reset to start if sectionIndex is out of bounds
  else {
    currentSection = attemptNumber === 1 ? -2 : 0 // Reset based on attempt
    renderSection(currentSection)
    return
  }

  // Update navigation buttons after rendering
  setTimeout(() => {
    updateNavigationButtons()
  }, 0)
}

function handlePreSurveyChange(radio) {
  const selectedValue = radio.value
  const groupQuestionDiv = document.getElementById('q-2_1-container')
  if (groupQuestionDiv) {
    const shouldShow = selectedValue === 'Ja'
    groupQuestionDiv.style.display = shouldShow ? 'block' : 'none'
    const inputs = groupQuestionDiv.querySelectorAll('input')
    inputs.forEach((input) => {
      input.required = shouldShow
    })
    if (shouldShow) {
      const currentSelection = groupQuestionDiv.querySelector('input:checked')
      if (!currentSelection) {
        const savedGroup = userData?.preSurveyResponses?.['q-2_1'] || 'Gruppe A'
        const savedInput = groupQuestionDiv.querySelector(
          `input[value="${savedGroup}"]`
        )
        if (savedInput) savedInput.checked = true
      }
    }
  }
}

function handleTeachingStudentChange(param) {
  console.log('param:', param) // For debugging
  const radio = param instanceof Event ? param.target : param
  if (!(radio instanceof Element)) {
    console.error('Expected an element, got:', radio)
    return
  }
  const radioGroup = radio.closest('.radio-group')
  if (!radioGroup) {
    console.warn('No .radio-group found')
    return
  }
  // Proceed only if radioGroup is found
  if (radioGroup) {
    const selectedValue = radio.value
    const attemptNumber = parseInt(
      sessionStorage.getItem('attemptNumber') || '1',
      10
    )
    const conditionalFieldsContainer = radioGroup
      .closest('.question')
      .querySelector('.conditional-fields-container')
    if (conditionalFieldsContainer) {
      const conditionalFields =
        conditionalFieldsContainer.querySelectorAll('.conditional-field')
      conditionalFields.forEach((field) => {
        const condition = field.dataset.condition
        const shouldShow = selectedValue === condition
        field.style.display = shouldShow ? 'block' : 'none'
        field.querySelectorAll('input, select').forEach((el) => {
          const fieldName = el.name
          if (shouldShow) {
            if (attemptNumber === 1) {
              el.required = true
              el.readOnly = false
              el.disabled = false
              el.style.backgroundColor = ''
            } else if (attemptNumber === 2) {
              el.required = fieldName === 'q0_7'
              el.readOnly = fieldName !== 'q0_7'
              el.disabled = fieldName !== 'q0_7'
              el.style.backgroundColor = el.readOnly ? '#f0f0f0' : ''
            } else {
              // attemptNumber === 3
              el.required = false
              el.readOnly = true
              el.disabled = true
              el.style.backgroundColor = '#f0f0f0'
            }
            if (attemptNumber > 1) {
              let value = userData.initialResponses[fieldName] || ''
              if (attemptNumber === 2 && fieldName === 'q0_7') {
                value =
                  userData.updatedResponses[fieldName] ||
                  userData.initialResponses[fieldName] ||
                  ''
              }
              if (attemptNumber === 3) {
                value =
                  userData.followUpResponses[fieldName] ||
                  userData.updatedResponses[fieldName] ||
                  userData.initialResponses[fieldName] ||
                  ''
              }
              if (el.type === 'radio' || el.type === 'checkbox') {
                el.checked = el.value === value
              } else {
                el.value = value
              }
            }
          } else {
            el.required = false
            if (attemptNumber === 1) {
              if (el.type === 'radio' || el.type === 'checkbox') {
                el.checked = false
              } else {
                el.value = ''
              }
            }
          }
        })
      })
    }
  }
}

function validateNumberInput(input) {
  let value = input.value.trim()
  value = value.replace(',', '.')
  if (!isNaN(value) && value !== '') {
    let numValue = parseFloat(value)
    const min = input.hasAttribute('min') ? parseFloat(input.min) : null
    const max = input.hasAttribute('max') ? parseFloat(input.max) : null
    if (min !== null && numValue < min) {
      numValue = min
    }
    if (max !== null && numValue > max) {
      numValue = max
    }
    input.value = numValue.toString()
  }
}

function markUnansweredQuestions() {
  const form = document.getElementById('surveyForm')
  if (!form) return null

  const requiredFields = form.querySelectorAll('[required]')
  let firstInvalid = null

  requiredFields.forEach((field) => {
    const questionDiv = field.closest('.question') || field.parentElement
    if (!questionDiv) return // Skip if no parent element

    // Check for visibility *before* checking if it's answered
    if (field.offsetParent !== null) {
      if (
        (field.type === 'radio' &&
          !form.querySelector(`[name="${field.name}"]:checked`)) ||
        (field.type === 'checkbox' && !field.checked) ||
        (field.type !== 'radio' &&
          field.type !== 'checkbox' &&
          !field.value.trim())
      ) {
        questionDiv.classList.add('unanswered')
        questionDiv.style.animation =
          'shake 0.82s cubic-bezier(.36,.07,.19,.97) both'
        if (!firstInvalid) firstInvalid = questionDiv
      } else {
        questionDiv.classList.remove('unanswered')
        questionDiv.style.animation = ''
      }
    } else {
      // If not visible, remove any 'unanswered' class
      questionDiv.classList.remove('unanswered')
      questionDiv.style.animation = ''
    }
  })

  if (firstInvalid) {
    firstInvalid.scrollIntoView({ behavior: 'smooth', block: 'center' })
  }
  return firstInvalid
}

function removeUnansweredMarkers() {
  document.querySelectorAll('.question.unanswered').forEach((q) => {
    q.classList.remove('unanswered')
  })
}

document.addEventListener('DOMContentLoaded', async function () {
  if (!window.location.pathname.includes('results.html')) {
    const attemptNumber = parseInt(
      sessionStorage.getItem('attemptNumber') || '1',
      10
    )
    // For T2 and T3, skip directly to personal information section
    if (attemptNumber > 1) {
      currentSection = 0
    }
    await loadUserData()
    setupEventListeners()
    checkResumeToken()
  }
})

window.onload = function () {
  // *** KEY CHANGE: Check URL before calling loadUserData or showResults ***
  if (window.location.pathname.includes('results.html')) {
    //If it is result page we call showResults()
    const completed = localStorage.getItem('surveyCompleted') === 'true'
    const userId = sessionStorage.getItem('userId')

    if (completed && userId) {
      const surveyForm = document.getElementById('surveyForm')
      if (surveyForm) surveyForm.innerHTML = '' // Clear the form
      fetch(`/api/user-data/${userId}`)
        .then((res) => {
          if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`)
          return res.json()
        })
        .then((data) => {
          if (!data) throw new Error('No data received')
          userData = data
          showResults()
        })
        .catch((err) => {
          console.error('Error loading completed survey:', err)
          sessionStorage.removeItem('surveyCompleted')
          currentSection = -1
          // initializeSections();  // This function doesn't exist, remove it.
          // If we are on result page and error happens we go back to login page
          window.location.href = 'login.html'
        })
    }
  } else {
    //If it is not result page we call loadUserData()
    const isNewAttempt = sessionStorage.getItem('startNewAttempt') === 'true'
    const attemptNumber = parseInt(
      sessionStorage.getItem('attemptNumber') || '1'
    )

    if (isNewAttempt) {
      userData = null // Clear previous user data
      currentSection = -1
    }
    loadUserData()
  }
}

if (typeof surveyData === 'undefined') {
  console.error(
    'surveyData ist nicht definiert. Bitte stellen Sie sicher, dass es geladen ist, bevor dieses Skript verwendet wird.'
  )
}

const styleSheet = document.createElement('style')
styleSheet.textContent = `
  .radio-option input[type="radio"]:disabled:checked + .radio-checkmark {
    background-color: #0066cc;
    border-color: #0066cc;
  }
  .radio-option input[type="radio"]:disabled + .radio-checkmark {
    opacity: 0.7;
    cursor: not-allowed;
  }
`
document.head.appendChild(styleSheet)

function handleScaleClick(e) {
  const radioInput = e.target.previousElementSibling
  if (radioInput && radioInput.type === 'radio') {
    radioInput.checked = true
    radioInput.dispatchEvent(new Event('change')) // Trigger change event
  }
}

function handleScaleKeydown(e) {
  if (e.key === ' ' || e.key === 'Enter') {
    e.preventDefault()
    const radioInput = e.target.previousElementSibling
    if (radioInput && radioInput.type === 'radio') {
      radioInput.checked = true
      radioInput.dispatchEvent(new Event('change')) // Trigger change event
    }
    e.target.setAttribute('aria-checked', 'true')
  }
}

function createCompetencyChart1(initial, updated, followUp = {}) {
  const canvas = document.getElementById('competencyChart1')
  const descriptionBox = document.getElementById('descriptionBox1')
  if (!canvas || !descriptionBox) {
    console.error('Chart canvas or description box not found')
    return
  }

  // Destroy existing chart instance if it exists
  if (window.competencyChart1 instanceof Chart) {
    window.competencyChart1.destroy()
  }

  const ctx = canvas.getContext('2d')

  // Combine categories from all datasets
  const allCategories = new Set([
    ...Object.keys(initial),
    ...Object.keys(updated),
    ...Object.keys(followUp),
  ])
  allCategories.delete('overall')
  const categories = Array.from(allCategories)

  const t1Data = categories.map((cat) => initial[cat] || 0)
  const t2Data = categories.map((cat) => updated[cat] || 0)
  const t3Data = categories.map((cat) => followUp[cat] || 0)

  // Retrieve userCode from sessionStorage
  const userCode = sessionStorage.getItem('generatedCode') || 'Unknown'

  // Pass userCode to createCompetencyChartConfig
  const chartConfig = createCompetencyChartConfig(
    categories,
    t1Data,
    t2Data,
    t3Data,
    'competencyChart1',
    'descriptionBox1'
  )
  window.competencyChart1 = new Chart(ctx, chartConfig)

  // Initial description box update
  if (categories.length > 0) {
    updateDescriptionBox(
      descriptionBox,
      categories[0],
      competencyDescriptions[categories[0]]
    )
  }
  descriptionBox.style.minHeight = '150px'
}

// Modified showResults function to handle Gruppe B behavior
async function showResults() {
  const userId = sessionStorage.getItem('userId')
  if (!userId) {
    Swal.fire({
      icon: 'error',
      title: 'Fehler',
      text: 'Keine Benutzer-ID gefunden. Bitte erneut einloggen.',
    }).then(() => {
      window.location.href = 'login.html'
    })
    return
  }

  try {
    const res = await fetch(`/api/user-data/${userId}`)
    if (!res.ok) throw new Error('Failed to fetch user data')
    const data = await res.json()

    userData = {
      ...userData,
      ...data,
      responses: {
        ...(userData.responses || {}),
        ...data.responses,
      },
      scores: {
        ...(userData.scores || {}),
        ...data.scores,
      },
      openEndedResponses: {
        ...(userData.openEndedResponses || {}),
        ...data.openEndedResponses,
      },
    }

    const initialScores = userData.scores?.t1 || {}
    const updatedScores = userData.scores?.t2 || {}
    const followUpScores = userData.scores?.t3 || {}

    const attemptNumber =
      parseInt(sessionStorage.getItem('attemptNumber'), 10) || 1

    const finalScores =
      Object.keys(followUpScores).length > 0
        ? followUpScores
        : Object.keys(updatedScores).length > 0
        ? updatedScores
        : initialScores

    const overallScore = finalScores.overall || 0
    const t2Reflection = userData.openEndedResponses?.t2_reflection || ''
    const t3Reflection = userData.openEndedResponses?.t3_reflection || ''

    // Get the group from preSurveyResponses
    const group = userData.preSurveyResponses?.['q-2_1'] || 'Gruppe A'

    let introHtml = ''
    let reflectionHtml = ''

    if (group === 'Gruppe D') {
      if (attemptNumber === 1) {
        document.getElementById('surveyForm').innerHTML = `
            <h3>Vielen Dank für die Teilnahme!</h3>
            <p>Wir melden uns in ein paar Wochen nochmals und würden Sie darum bitten, nochmals einen Fragebogen auszufüllen.</p>
            
            <div class="competency-areas-overview">
              <h3>Übersicht der digitalen Kompetenzbereiche:</h3>
              <p>Hier finden Sie eine Übersicht der sechs Kompetenzbereiche, die in dieser Studie untersucht werden:</p>
              
              <div class="competency-area">
                <h4>1. Suchen, Verarbeiten und Aufbewahren</h4>
                <p>Dieser Bereich umfasst Fähigkeiten zur Informationssuche, kritischen Bewertung von Quellen und sicheren Speicherung digitaler Daten. Dazu gehören Suchstrategien, Quellenbeurteilung und Datenorganisation.</p>
              </div>
              <div class="competency-area">
                <h4>2. Kommunikation und Kollaborieren</h4>
                <p>Dieser Bereich umfasst Fähigkeiten zur digitalen Kommunikation, Zusammenarbeit und gesellschaftlichen Teilhabe. Dazu gehören die Nutzung verschiedener Kommunikationsmedien, Datenschutzeinstellungen und der Umgang mit unangemessenen Inhalten.</p>
              </div>
              <div class="competency-area">
                <h4>3. Produzieren und Präsentieren</h4>
                <p>Dieser Bereich umfasst Fähigkeiten zur Erstellung und Bearbeitung digitaler Inhalte in verschiedenen Formaten. Dazu gehören Textdokumente, Audio- und Videodateien sowie grundlegende Programmierkenntnisse.</p>
              </div>
              <div class="competency-area">
                <h4>4. Schützen und sicher Agieren</h4>
                <p>Dieser Bereich umfasst Fähigkeiten zum Schutz persönlicher Daten und zum sicheren Umgang mit digitalen Technologien. Dazu gehören Sicherheitseinstellungen, Risikobewusstsein und gesundheits- sowie umweltbewusste Nutzung.</p>
              </div>
              <div class="competency-area">
                <h4>5. Problemlösen und Handeln</h4>
                <p>Dieser Bereich umfasst Fähigkeiten zur Lösung technischer Probleme und zur Anpassung digitaler Werkzeuge. Dazu gehören auch das Verständnis von KI-Systemen und die Weiterentwicklung eigener digitaler Kompetenzen.</p>
              </div>
              <div class="competency-area">
                <h4>6. Analysieren und Reflektieren</h4>
                <p>Dieser Bereich umfasst Fähigkeiten zur kritischen Analyse digitaler Medien und ihrer Wirkung. Dazu gehören die Beurteilung von Geschäftsaktivitäten im digitalen Raum und die Identifikation von Falschinformationen.</p>
              </div>
            </div>
        `
        hideNavigationButtons()
        return
      } else if (attemptNumber === 2) {
        introHtml = `
            <h4>Schön, dass Sie nochmals an der Befragung teilgenommen haben. Was glauben Sie, haben sich Ihre Kompetenzüberzeugungen im Vergleich zur ersten Befragung verändert? Beschreiben Sie unten im Feld, welche Schlüsse Sie aus Ihrer Lernerfahrung ziehen.</h4>
        `
        reflectionHtml = `
            <textarea id="t2OpenEndedResponse" rows="4" style="width:100%;" required></textarea>
            <button id="submitT2OpenEndedResponse" class="btn btn-primary">Absenden</button>
        `
      } else if (attemptNumber === 3) {
        introHtml = `
            <h4>Schön, dass Sie uns in unserem Forschungsprojekt unterstützt haben und nochmals an der Umfrage teilgenommen haben. Was glauben Sie nun nach Abschluss des Projektes, wie haben sich Ihre Kompetenzüberzeugungen verändert? Beschreiben Sie unten im Feld, welche Schlüsse Sie aus Ihrer Lernerfahrung ziehen.</h4>
        `
        reflectionHtml = `
            <textarea id="t3OpenEndedResponse" rows="4" style="width:100%;" required></textarea>
            <button id="submitT3OpenEndedResponse" class="btn btn-primary">Absenden</button>
        `
      }
      document.getElementById('surveyForm').innerHTML =
        introHtml + reflectionHtml
      if (attemptNumber === 2) {
        document
          .getElementById('submitT2OpenEndedResponse')
          .addEventListener('click', submitT2OpenEndedResponse)
      } else if (attemptNumber === 3) {
        document
          .getElementById('submitT3OpenEndedResponse')
          .addEventListener('click', submitT3OpenEndedResponse)
      }
      hideNavigationButtons()
    } else if (group === 'Gruppe B') {
      // Modified Gruppe B logic with competency area descriptions
      if (attemptNumber === 1) {
        introHtml = `
      <h4>Wähle Sie nun einen oder mehrere Kompetenzbereiche aus, in denen Sie sich weiterbilden möchtest. Wir haben dafür für jeden Kompetenzbereich mehrere Mikrofortbildungen entwickelt. Die Auswahl der Kompetenzbereiche können Sie anhand verschiedener Motive selbst vornehmen: Möchtest Sie Ihre Fähigkeiten in dem Kompetenzbereich weiterentwickeln, indem Sie sich wenig kompetent einschätzen oder interessieren Sie sich gerade besonders für einen Kompetenzbereich.</h4>
      
      <div class="competency-areas-overview">
        <h3>Übersicht der Kompetenzbereiche:</h3>
        <div class="competency-area">
          <h4>1. Suchen, Verarbeiten und Aufbewahren</h4>
          <p>Dieser Bereich umfasst Fähigkeiten zur Informationssuche, kritischen Bewertung von Quellen und sicheren Speicherung digitaler Daten. Dazu gehören Suchstrategien, Quellenbeurteilung und Datenorganisation.</p>
        </div>
        <div class="competency-area">
          <h4>2. Kommunikation und Kollaborieren</h4>
          <p>Dieser Bereich umfasst Fähigkeiten zur digitalen Kommunikation, Zusammenarbeit und gesellschaftlichen Teilhabe. Dazu gehören die Nutzung verschiedener Kommunikationsmedien, Datenschutzeinstellungen und der Umgang mit unangemessenen Inhalten.</p>
        </div>
        <div class="competency-area">
          <h4>3. Produzieren und Präsentieren</h4>
          <p>Dieser Bereich umfasst Fähigkeiten zur Erstellung und Bearbeitung digitaler Inhalte in verschiedenen Formaten. Dazu gehören Textdokumente, Audio- und Videodateien sowie grundlegende Programmierkenntnisse.</p>
        </div>
        <div class="competency-area">
          <h4>4. Schützen und sicher Agieren</h4>
          <p>Dieser Bereich umfasst Fähigkeiten zum Schutz persönlicher Daten und zum sicheren Umgang mit digitalen Technologien. Dazu gehören Sicherheitseinstellungen, Risikobewusstsein und gesundheits- sowie umweltbewusste Nutzung.</p>
        </div>
        <div class="competency-area">
          <h4>5. Problemlösen und Handeln</h4>
          <p>Dieser Bereich umfasst Fähigkeiten zur Lösung technischer Probleme und zur Anpassung digitaler Werkzeuge. Dazu gehören auch das Verständnis von KI-Systemen und die Weiterentwicklung eigener digitaler Kompetenzen.</p>
        </div>
        <div class="competency-area">
          <h4>6. Analysieren und Reflektieren</h4>
          <p>Dieser Bereich umfasst Fähigkeiten zur kritischen Analyse digitaler Medien und ihrer Wirkung. Dazu gehören die Beurteilung von Geschäftsaktivitäten im digitalen Raum und die Identifikation von Falschinformationen.</p>
        </div>
      </div>
      
      <p>Benennen Sie unten im Feld ein oder zwei Kompetenzbereiche, in denen Sie Mikrofortbildungen absolvieren möchten und begründen Sie Ihre Entscheidung.</p>
    `
        reflectionHtml = `
      <textarea id="t1OpenEndedResponse" rows="4" style="width:100%;" required></textarea>
      <button id="submitT1OpenEndedResponse" class="btn btn-primary">Absenden</button>
    `
      } else if (attemptNumber === 2) {
        introHtml = `
      <h4>Schön, dass Sie verschiedene Kurse absolviert haben und nochmals an der Umfrage teilgenommen haben. Was glauben Sie nun nach Absolvierung der Kurse, wie haben sich Ihre Kompetenzüberzeugungen verändert? Beschreiben Sie unten im Feld, welche Schlüsse Sie aus Ihrer Lernerfahrung ziehen.</h4>
    `
        reflectionHtml = `
      <textarea id="t2OpenEndedResponse" rows="4" style="width:100%;" required>${t2Reflection}</textarea>
      <button id="submitT2OpenEndedResponse" class="btn btn-primary">Absenden</button>
    `
      } else if (attemptNumber === 3) {
        introHtml = `
      <h4>Schön, dass Sie verschiedene Kurse absolviert haben und nochmals an der Umfrage teilgenommen haben. Was glauben Sie nun nach Abschluss des Projektes, wie haben sich Ihre Kompetenzüberzeugungen verändert? Beschreiben Sie unten im Feld, welche Schlüsse Sie aus Ihrer Lernerfahrung ziehen.</h4>
    `
        reflectionHtml = `
      <textarea id="t3OpenEndedResponse" rows="4" style="width:100%;" required>${t3Reflection}</textarea>
      <button id="submitT3OpenEndedResponse" class="btn btn-primary">Absenden</button>
    `
      }
    } else if (group === 'Gruppe C') {
      // New logic for Gruppe C
      if (attemptNumber === 1) {
        introHtml = `
      <h4>Vielen Dank, dass Sie an der Umfrage teilgenommen haben. Im Folgenden sehen Sie Ihren durchschnittlichen Score für die eingeschätzten digitalen Kompetenzen.</h4>
      <p><strong>Ihr Kompetenzscore beträgt ${overallScore}%</strong></p>
      <h3>Kompetenzdiagramm</h3>
      <p>Zudem haben wir die Ergebnisse für jeden der sechs Kompetenzbereiche aufgeschlüsselt, sodass Sie herausfinden können, in welchen Kompetenzbereichen Sie höhere oder niedrigere Werte haben. Bewegen Sie den Mauszeiger über die Balken im Diagramm, um detaillierte Informationen zu den einzelnen Kompetenzbereichen zu erhalten.</p>
    `
        reflectionHtml = '' // No open-ended question or course links for Gruppe C in T1
      } else if (attemptNumber === 2) {
        introHtml = `
      <h4>Schön, dass Sie nochmals an der Umfrage teilgenommen haben. Im Folgenden sehen Sie wieder Ihren durchschnittlichen Score für die eingeschätzten digitalen Kompetenzen, nun aber für die zweite Befragung.</h4>
      <p><strong>Ihr Kompetenzscore beträgt ${overallScore}%</strong></p>
      <h3>Kompetenzdiagramm</h3>
      <p>Zudem haben wir wieder Ihre Ergebnisse für jeden der sechs Kompetenzbereiche aufgeschlüsselt, sodass Sie herausfinden können, in welchen Kompetenzbereichen Sie höhere oder niedrigere Werte haben und wie sich die Werte im Vergleich zur ersten Befragung verändert haben.</p>
      <p>Bewegen Sie den Mauszeiger über die Balken im Diagramm, um detaillierte Informationen zu den einzelnen Kompetenzbereichen zu erhalten.</p>
    `
        reflectionHtml = `
      <p>Jetzt sehen Sie Ihre Kompetenzeinschätzung im Vergleich zur ersten Befragung. Wenn der helle Balken niedriger ist als der dunkle Balken, bedeutet das, dass Sie Ihre digitalen Kompetenzen heute höher einschätzt als zu Beginn des Projektes. Ist der helle Balken höher als der dunkle Balken, ist es genau umgekehrt. Es ist auch möglich, dass Sie sich bei beiden Befragungen in einzelnen Kompetenzbereichen gleich eingeschätzt haben, dann sind beide Balken gleich hoch.</p>
      <p><strong>Wie haben sich Ihre Kompetenzüberzeugungen nun verändert? Beschreiben Sie, was Sie im Diagramm sehen und welche Schlüsse Sie aus Ihrer Lernerfahrung ziehen.</strong></p>
      <textarea id="t2OpenEndedResponse" rows="4" style="width:100%;" required>${t2Reflection}</textarea>
      <button id="submitT2OpenEndedResponse" class="btn btn-primary">Absenden</button>
    `
      } else if (attemptNumber === 3) {
        introHtml = `
      <h4>Schön, dass Sie nochmals an der Umfrage teilgenommen haben. Im Folgenden sehen Sie wieder Ihren durchschnittlichen Score für die eingeschätzten digitalen Kompetenzen, nun aber für die abschließende Befragung.</h4>
      <p><strong>Ihr Kompetenzscore beträgt ${overallScore}%</strong></p>
      <h3>Kompetenzdiagramm</h3>
      <p>Zudem haben wir wieder Ihre Ergebnisse für jeden der sechs Kompetenzbereiche aufgeschlüsselt, sodass Sie herausfinden können, in welchen Kompetenzbereichen Sie höhere oder niedrigere Werte haben und wie sich die Werte im Vergleich zur ersten und zweiten Befragung verändert haben.</p>
      <p>Bewegen Sie den Mauszeiger über die Balken im Diagramm, um detaillierte Informationen zu den einzelnen Kompetenzbereichen zu erhalten.</p>
    `
        reflectionHtml = `
      <p>Jetzt sehen Sie den Vergleich Ihrer Kompetenzeinschätzungen über drei unterschiedliche Zeitpunkte. Wenn der helle Balken niedriger ist als der mittlere oder rechte Balken, bedeutet das, dass Sie Ihre Kompetenzen im Verlauf des Projektes höher einschätzen als zuvor. Ist der helle Balken höher als der mittlere oder rechte Balken, ist es genau umgekehrt. Es ist auch möglich, dass Sie sich bei allen drei Befragungen in gewissen Kompetenzbereichen gleich eingeschätzt haben: dann sind alle drei Balken gleich hoch.</p>
      <p><strong>Wie haben sich Ihre Kompetenzüberzeugungen nun verändert? Beschreiben Sie, was Sie im Diagramm sehen und welche Schlüsse Sie aus Ihrer Lernerfahrung ziehen.</strong></p>
      <textarea id="t3OpenEndedResponse" rows="4" style="width:100%;" required>${t3Reflection}</textarea>
      <button id="submitT3OpenEndedResponse" class="btn btn-primary">Absenden</button>
    `
      }
    } else {
      // Logic for Gruppe A and other groups (unchanged)
      if (attemptNumber === 1) {
        introHtml = `
      <h4>Vielen Dank, dass Sie an der Umfrage teilgenommen haben. Im Folgenden sehen Sie Ihren durchschnittlichen Score für die eingeschätzten digitalen Kompetenzen.</h4>
      <p><strong>Ihr Kompetenzscore beträgt ${overallScore}%</strong></p>
      <h3>Kompetenzdiagramm</h3>
      <p>Zudem haben wir die Ergebnisse für jeden der sechs Kompetenzbereiche aufgeschlüsselt, sodass Sie herausfinden können, in welchen Kompetenzbereichen Sie höhere oder niedrigere Werte haben. Bewegen Sie den Mauszeiger über die Balken im Diagramm, um detaillierte Informationen zu den einzelnen Kompetenzbereichen zu erhalten.</p>
    `
        reflectionHtml = `
      <p>Basierend auf den Ergebnissen aus der Befragung können Sie nun einen oder mehrere Kompetenzbereiche auswählen, in denen Sie sich weiterbilden möchten. Wir haben für jeden Kompetenzbereich mehrere Mikrofortbildungen entwickelt, die Sie bearbeiten können.</p>
      <p>Die Auswahl der Kompetenzbereiche können Sie anhand verschiedener Strategien vornehmen: Möchten Sie beispielsweise den Kompetenzbereich mit den geringsten Ausprägungen verbessern oder interessieren Sie sich gerade besonders für einen Kompetenzbereich?</p>
      <p><strong>Schauen Sie sich nun Ihre Ergebnisse an, benennen Sie unten im Feld ein oder zwei Kompetenzbereiche, in denen Sie Mikrofortbildungen absolvieren möchten und begründen Sie Ihre Entscheidung.</strong></p>
      <textarea id="t1OpenEndedResponse" rows="4" style="width:100%;" required></textarea>
      <button id="submitT1OpenEndedResponse" class="btn btn-primary">Absenden</button>
    `
      } else if (attemptNumber === 2) {
        introHtml = `
      <h4>Schön, dass Sie verschiedene Kurse absolviert haben und nochmals an der Umfrage teilgenommen haben. Im Folgenden sehen Sie wieder Ihren durchschnittlichen Score für die eingeschätzten digitalen Kompetenzen, nun aber für die zweite Befragung.</h4>
      <p><strong>Ihr Kompetenzscore beträgt ${overallScore}%</strong></p>
      <h3>Kompetenzdiagramm</h3>
      <p>Zudem haben wir wieder Ihre Ergebnisse für jeden der sechs Kompetenzbereiche aufgeschlüsselt, sodass Sie herausfinden können, in welchen Kompetenzbereichen Sie höhere oder niedrigere Werte haben und wie sich die Werte im Vergleich zur ersten Befragung verändert haben.</p>
      <p>Bewegen Sie den Mauszeiger über die Balken im Diagramm, um detaillierte Informationen zu den einzelnen Kompetenzbereichen zu erhalten.</p>
    `
        reflectionHtml = `
      <p>Jetzt haben Sie den Vergleich zwischen Ihrer Kompetenzeinschätzung vor und nach der Absolvierung der ILIAS Kurse. Wenn der helle Balken niedriger ist als der dunkle Balken, bedeutet das, dass Sie Ihre digitalen Kompetenzen nach der Bearbeitung der ILIAS-Kursen höher einschätzt als zuvor. Ist der helle Balken höher als der dunkle Balken, ist es genau umgekehrt. Es ist auch möglich, dass Sie sich bei beiden Befragungen in einzelnen Kompetenzbereichen gleich eingeschätzt haben, dann sind beide Balken gleich hoch.</p>
      <p><strong>Wie haben sich Ihre Kompetenzüberzeugungen nun verändert? Beschreiben Sie, was Sie im Diagramm sehen und welche Schlüsse Sie aus Ihrer Lernerfahrung ziehen.</strong></p>
      <textarea id="t2OpenEndedResponse" rows="4" style="width:100%;" required>${t2Reflection}</textarea>
      <button id="submitT2OpenEndedResponse" class="btn btn-primary">Absenden</button>
    `
      } else if (attemptNumber === 3) {
        introHtml = `
      <h4>Schön, dass Sie nochmals an der Umfrage teilgenommen haben. Im Folgenden sehen Sie wieder Ihren durchschnittlichen Score für die eingeschätzten digitalen Kompetenzen, nun aber für die abschließende Befragung.</h4>
      <p><strong>Ihr Kompetenzscore beträgt ${overallScore}%</strong></p>
      <h3>Kompetenzdiagramm</h3>
      <p>Zudem haben wir wieder Ihre Ergebnisse für jeden der sechs Kompetenzbereiche aufgeschlüsselt, sodass Sie herausfinden können, in welchen Kompetenzbereichen Sie höhere oder niedrigere Werte haben und wie sich die Werte im Vergleich zur ersten und zweiten Befragung verändert haben.</p>
      <p>Bewegen Sie den Mauszeiger über die Balken im Diagramm, um detaillierte Informationen zu den einzelnen Kompetenzbereichen zu erhalten.</p>
    `
        reflectionHtml = `
      <p>Jetzt sehen Sie den Vergleich Ihrer Kompetenzeinschätzungen über drei unterschiedliche Zeitpunkte. Wenn der helle Balken niedriger ist als der mittlere oder rechte Balken, bedeutet das, dass Sie Ihre Kompetenzen nach der Bearbeitung der ILIAS-Kurse höher eingeschätzt als zuvor. Ist der helle Balken höher als der mittlere oder rechte Balken, ist es genau umgekehrt. Es ist auch möglich, dass Sie sich bei allen drei Befragungen in gewissen Kompetenzbereichen gleich eingeschätzt haben: dann sind alle drei Balken gleich hoch.</p>
      <p><strong>Wie haben sich Ihre Kompetenzüberzeugungen nun verändert? Beschreiben Sie, was Sie im Diagramm sehen und welche Schlüsse Sie aus Ihrer Lernerfahrung ziehen.</strong></p>
      <textarea id="t3OpenEndedResponse" rows="4" style="width:100%;" required>${t3Reflection}</textarea>
      <button id="submitT3OpenEndedResponse" class="btn btn-primary">Absenden</button>
    `
      }
    }

    let html = `
  ${introHtml}
  ${
    group !== 'Gruppe B'
      ? `
  <div style="height: 300px; width: 100%;">
    <canvas id="competencyChart1"></canvas>
  </div>
  <div id="descriptionBox1"></div>
  <div style="display: flex; justify-content: center; margin-bottom: 50px; margin-top: 20px;">
    <button id="downloadChart" class="btn btn-primary" style="background-color: #004A99; color: white; border: none; padding: 15px 30px; cursor: pointer; border-radius: 5px; font-size: 18px;">
      Diagramm herunterladen
    </button>
  </div>
  <hr>
  `
      : ''
  }
  ${reflectionHtml}
`

    document.getElementById('surveyForm').innerHTML = html
    window.scrollTo({ top: 0, behavior: 'smooth' })
    document.getElementById('progressBar').style.display = 'none'
    document.getElementById('progressText').style.display = 'none'

    if (group !== 'Gruppe B') {
      createCompetencyChart1(initialScores, updatedScores, followUpScores)
      document
        .getElementById('downloadChart')
        .addEventListener('click', downloadChart)
    }

    if (attemptNumber === 1) {
      document
        .getElementById('submitT1OpenEndedResponse')
        .addEventListener('click', submitT1OpenEndedResponse)
    } else if (attemptNumber === 2) {
      document
        .getElementById('submitT2OpenEndedResponse')
        .addEventListener('click', submitT2OpenEndedResponse)
    } else if (attemptNumber === 3) {
      document
        .getElementById('submitT3OpenEndedResponse')
        .addEventListener('click', submitT3OpenEndedResponse)
    }
    hideNavigationButtons()
  } catch (error) {
    console.error('Error displaying results:', error)
    Swal.fire({
      icon: 'error',
      title: 'Fehler',
      text: 'Es gab einen Fehler beim Laden der Ergebnisse. Bitte versuchen Sie es später erneut.',
    })
  }
}

// submitT1OpenEndedResponse remains unchanged as course links are shown for all groups
function submitT1OpenEndedResponse(event) {
  event.preventDefault()
  const response = document.getElementById('t1OpenEndedResponse').value.trim()
  if (!response) {
    Swal.fire({
      icon: 'error',
      title: 'Fehler',
      text: 'Bitte füllen Sie das Textfeld aus.',
    })
    return
  }
  const userId = sessionStorage.getItem('userId')
  fetch('/api/save-open-ended-response', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ userId, key: 't1_reflection', response }),
  })
    .then((res) => {
      if (!res.ok) throw new Error('Network response was not ok')
      return res.json()
    })
    .then(() => {
      document.getElementById('t1OpenEndedResponse').disabled = true
      document.getElementById('submitT1OpenEndedResponse').disabled = true
      showCourseLinks()
    })
    .catch((error) => {
      console.error('Error:', error)
      Swal.fire({
        icon: 'error',
        title: 'Fehler',
        text: 'Es gab einen Fehler beim Speichern Ihrer Antwort. Bitte versuchen Sie es erneut.',
      })
    })
}

function submitT2OpenEndedResponse(event) {
  event.preventDefault()
  const response = document.getElementById('t2OpenEndedResponse').value.trim()
  if (!response) {
    Swal.fire({
      icon: 'error',
      title: 'Fehler',
      text: 'Bitte füllen Sie das Textfeld aus.',
    })
    return
  }
  const userId = sessionStorage.getItem('userId')
  fetch('/api/save-open-ended-response', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ userId, key: 't2_reflection', response }),
  })
    .then((res) => {
      if (!res.ok) throw new Error('Network response was not ok')
      return res.json()
    })
    .then(() => {
      document.getElementById('t2OpenEndedResponse').disabled = true
      document.getElementById('submitT2OpenEndedResponse').disabled = true
      const group = userData.preSurveyResponses?.['q-2_1'] || 'Gruppe A'
      let message
      if (group === 'Gruppe C') {
        message =
          'Danke für Ihre Teilnahme. Wir melden uns in etwa einem Monat nochmal, damit Sie an der dritten Befragung teilnehmen können. Hier können Sie auf die <a href="index.html">Startseite</a> zurück gelangen.'
      } else {
        message =
          'Danke für Ihre Teilnahme. Wir melden uns in etwa einem Monat nochmal, damit Sie an der dritten Befragung teilnehmen können. Hier können Sie auf die <a href="index.html">Startseite</a> zurück gelangen.'
      }
      Swal.fire({
        icon: 'success',
        title: 'Gespeichert',
        html: message,
        confirmButtonText: 'OK',
        didOpen: () => {
          confetti({
            particleCount: 100,
            spread: 70,
            origin: { y: 0.6 },
          })
        },
      })
    })
    .catch((error) => {
      console.error('Error:', error)
      Swal.fire({
        icon: 'error',
        title: 'Fehler',
        text: 'Es gab einen Fehler beim Speichern Ihrer Antwort. Bitte versuchen Sie es erneut.',
      })
    })
}

function submitT3OpenEndedResponse(event) {
  event.preventDefault()
  const response = document.getElementById('t3OpenEndedResponse').value.trim()
  if (!response) {
    Swal.fire({
      icon: 'error',
      title: 'Fehler',
      text: 'Bitte füllen Sie das Textfeld aus.',
    })
    return
  }
  const userId = sessionStorage.getItem('userId')
  fetch('/api/save-open-ended-response', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ userId, key: 't3_reflection', response }),
  })
    .then((res) => {
      if (!res.ok) throw new Error('Network response was not ok')
      return res.json()
    })
    .then(() => {
      document.getElementById('t3OpenEndedResponse').disabled = true
      document.getElementById('submitT3OpenEndedResponse').disabled = true
      const group = userData.preSurveyResponses?.['q-2_1'] || 'Gruppe A'
      if (group === 'Gruppe D') {
        const surveyForm = document.getElementById('surveyForm')
        surveyForm.innerHTML = `
                    <div style="height: 300px; width: 100%;">
                        <canvas id="competencyChart1"></canvas>
                    </div>
                    <div id="descriptionBox1"></div>
                    <p>Im Folgenden sehen Sie nun Ihre Entwicklung im Verlauf des Projektes und Ihre durchschnittlichen Einschätzungen für die einzelnen Kompetenzbereiche. Abschließend würden wir gerne wissen, was Sie denken. Passen Ihre Einschätzungen zu den Ergebnissen aus der Grafik?</p>
                    <textarea id="t3AdditionalResponse" rows="4" style="width:100%;" required></textarea>
                    <button id="submitT3AdditionalResponse" class="btn btn-primary">Absenden</button>
                `
        createCompetencyChart1(
          userData.scores.t1,
          userData.scores.t2,
          userData.scores.t3
        )
        document
          .getElementById('submitT3AdditionalResponse')
          .addEventListener('click', submitT3AdditionalResponse)
      } else if (group === 'Gruppe B') {
        // Existing Gruppe B logic remains unchanged
        const surveyForm = document.getElementById('surveyForm')
        surveyForm.innerHTML = `
                    <div style="height: 300px; width: 100%;">
                        <canvas id="competencyChart1"></canvas>
                    </div>
                    <div id="descriptionBox1"></div>
                    <p>Im Folgenden sehen Sie nun Ihre Entwicklung im Verlauf des Projektes und Ihre durchschnittlichen Antworten für die einzelnen Kompetenzbereiche. Abschließend würden wir gerne wissen, was Sie denken. Passen Ihre Einschätzungen zu den Ergebnissen aus der Grafik?</p>
                    <textarea id="t3AdditionalResponse" rows="4" style="width:100%;" required></textarea>
                    <button id="submitT3AdditionalResponse" class="btn btn-primary">Absenden</button>
                `
        createCompetencyChart1(
          userData.scores.t1,
          userData.scores.t2,
          userData.scores.t3
        )
        document
          .getElementById('submitT3AdditionalResponse')
          .addEventListener('click', submitT3AdditionalResponse)
      } else {
        // Existing logic for other groups remains unchanged
        let message
        if (group === 'Gruppe C') {
          message =
            'Danke für Ihre Teilnahme. Hier können Sie auf die <a href="index.html">Startseite</a> zurück gelangen.'
        } else {
          message =
            'Danke für Ihre Teilnahme. Hier können Sie auf die <a href="index.html">Startseite</a> zurück gelangen.'
        }
        Swal.fire({
          icon: 'success',
          title: 'Gespeichert',
          html: message,
          confirmButtonText: 'OK',
          didOpen: () => {
            confetti({
              particleCount: 100,
              spread: 70,
              origin: { y: 0.6 },
            })
          },
        })
      }
    })
    .catch((error) => {
      console.error('Error:', error)
      Swal.fire({
        icon: 'error',
        title: 'Fehler',
        text: 'Es gab einen Fehler beim Speichern Ihrer Antwort. Bitte versuchen Sie es erneut.',
      })
    })
}

function submitT3AdditionalResponse(event) {
  event.preventDefault()
  const response = document.getElementById('t3AdditionalResponse').value.trim()
  if (!response) {
    Swal.fire({
      icon: 'error',
      title: 'Fehler',
      text: 'Bitte füllen Sie das Textfeld aus.',
    })
    return
  }
  const userId = sessionStorage.getItem('userId')
  fetch('/api/save-open-ended-response', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ userId, key: 't3_additional_reflection', response }),
  })
    .then((res) => {
      if (!res.ok) throw new Error('Network response was not ok')
      return res.json()
    })
    .then(() => {
      document.getElementById('t3AdditionalResponse').disabled = true
      document.getElementById('submitT3AdditionalResponse').disabled = true
      const group = userData.preSurveyResponses?.['q-2_1'] || 'Gruppe A'
      if (group === 'Gruppe D') {
        Swal.fire({
          icon: 'success',
          title: 'Gespeichert',
          html: 'Danke für Ihre Teilnahme. Wenn Sie Lust haben, sich in bestimmten Kompetenzbereichen weiterzuentwickeln, dann absolvieren Sie gerne unsere Mikrofortbildungen. <br><br> Hier sind die Links zu den Kursen: <ul><li><a href="https://ilias.uni-rostock.de/goto.php?target=crs_121177&client_id=ilias_hro" target="_blank">Suchen, Verarbeiten und Aufbewahren</a></li><li><a href="https://ilias.uni-rostock.de/goto.php?target=crs_122050&client_id=ilias_hro" target="_blank">Analysieren und Reflektieren</a></li><li><a href="https://ilias.uni-rostock.de/goto.php?target=crs_120680&client_id=ilias_hro" target="_blank">Kommunikation & Kollaboration</a></li><li><a href="https://ilias.uni-rostock.de/goto.php?target=crs_122048&client_id=ilias_hro" target="_blank">Produzieren und Präsentieren</a></li><li><a href="https://ilias.uni-rostock.de/goto.php?target=crs_122049&client_id=ilias_hro" target="_blank">Problemlösen und Handeln</a></li><li><a href="https://ilias.uni-rostock.de/goto.php?target=crs_122051&client_id=ilias_hro" target="_blank">Schützen und sicher Agieren</a></li></ul> <br><br> Hier können Sie auf die <a href="index.html">Startseite</a> zurück gelangen.',
          confirmButtonText: 'OK',
          didOpen: () => {
            confetti({
              particleCount: 100,
              spread: 70,
              origin: { y: 0.6 },
            })
          },
        })
      } else {
        // Existing logic for Gruppe B and other groups remains unchanged
        Swal.fire({
          icon: 'success',
          title: 'Gespeichert',
          html: 'Danke für Ihre Teilnahme. Hier können Sie auf die <a href="index.html">Startseite</a> zurück gelangen.',
          confirmButtonText: 'OK',
          didOpen: () => {
            confetti({
              particleCount: 100,
              spread: 70,
              origin: { y: 0.6 },
            })
          },
        })
      }
    })
    .catch((error) => {
      console.error('Error:', error)
      Swal.fire({
        icon: 'error',
        title: 'Fehler',
        text: 'Es gab einen Fehler beim Speichern Ihrer Antwort. Bitte versuchen Sie es erneut.',
      })
    })
}

function showCourseLinks() {
  const btn =
    document.getElementById('submitT1OpenEndedResponse') ||
    document.getElementById('submitT2OpenEndedResponse') ||
    document.getElementById('submitT3OpenEndedResponse') // Find *any* of the submit buttons

  if (!btn) {
    console.error('Submit button not found, cannot insert course links.')
    return
  }

  const courseLinksContainer = document.createElement('div')
  courseLinksContainer.className = 'course-links'

  const paragraph1 = document.createElement('p')
  paragraph1.textContent =
    'Nun ist es Zeit, deine digitalen Kompetenzen zu fördern. Hier kommst du zu den Kursen der jeweiligen Kompetenzbereiche. Klicke einfach auf den Link und du wirst zu ILIAS weitergeleitet.'
  courseLinksContainer.appendChild(paragraph1)

  const paragraph2 = document.createElement('p')
  paragraph2.textContent =
    'Hier haben Sie direkten Zugriff auf die Mikrofortbildungen:'
  courseLinksContainer.appendChild(paragraph2)

  const ul = document.createElement('ul')
  courseLinksContainer.appendChild(ul)

  const links = [
    {
      href: 'https://ilias.uni-rostock.de/goto.php?target=crs_121177&client_id=ilias_hro',
      text: 'Suchen, Verarbeiten und Aufbewahren',
    },
    {
      href: 'https://ilias.uni-rostock.de/goto.php?target=crs_122050&client_id=ilias_hro',
      text: 'Analysieren und Reflektieren',
    },
    {
      href: 'https://ilias.uni-rostock.de/goto.php?target=crs_120680&client_id=ilias_hro',
      text: 'Kommunikation & Kollaboration',
    },
    {
      href: 'https://ilias.uni-rostock.de/goto.php?target=crs_122048&client_id=ilias_hro',
      text: 'Produzieren und Präsentieren',
    },
    {
      href: 'https://ilias.uni-rostock.de/goto.php?target=crs_122049&client_id=ilias_hro',
      text: 'Problemlösen und Handeln',
    },
    {
      href: 'https://ilias.uni-rostock.de/goto.php?target=crs_122051&client_id=ilias_hro',
      text: 'Schützen und sicher Agieren',
    },
  ]

  links.forEach((linkData) => {
    const li = document.createElement('li')
    const a = document.createElement('a')
    a.href = linkData.href
    a.textContent = linkData.text
    a.target = '_blank' // Open in a new tab
    li.appendChild(a)
    ul.appendChild(li)
  })

  btn.insertAdjacentElement('afterend', courseLinksContainer) // Insert *after* the button
}

// Make sure these functions are globally accessible
window.handleScaleClick = handleScaleClick
window.handleScaleKeydown = handleScaleKeydown
window.showResults = showResults
