let currentSection = -1,
  userData = null,
  chart1Instance = null,
  initialScores = {},
  updatedScores = {},
  followUpScores = {},
  userDataInitial = {},
  userDataUpdated = {},
  isInitializing = false

const labelMap = {
  'Suchen, Verarbeiten und Aufbewahren': 'Suchen',
  'Kommunikation und Kollaborieren': 'Kommunizieren',
  'Produzieren und Präsentieren': 'Produzieren',
  'Schützen und sicher Agieren': 'Schützen',
  'Problemlösen und Handeln': 'Problemlösen',
  'Analysieren und Reflektieren': 'Analysieren',
}

const colorMap = {
  'Suchen, Verarbeiten und Aufbewahren': '#00BF63',
  'Kommunikation und Kollaborieren': '#0CC0DF',
  'Produzieren und Präsentieren': '#FF6D5F',
  'Schützen und sicher Agieren': '#8C52FF',
  'Problemlösen und Handeln': '#E884C4',
  'Analysieren und Reflektieren': '#FFD473',
}

const competencyDescriptions = {
  'Suchen, Verarbeiten und Aufbewahren':
    'Umfasst das Wissen, die Motivation und Fähigkeiten, gezielt nach digitalen Daten und Inhalten zu suchen, diese effektiv zu organisieren, zu speichern und abzurufen.',
  'Kommunikation und Kollaborieren':
    'Umfasst das Wissen, die Motivation und Fähigkeiten, mithilfe digitaler Technologien effektiv zu interagieren, zu kollaborieren und Informationen auszutauschen, dabei die Verhaltensnormen in digitalen Umgebungen zu beachten und digitale Technologien zur gesellschaftlichen Teilhabe und Selbstermächtigung zu nutzen.',
  'Produzieren und Präsentieren':
    'Umfasst das Wissen, die Motivation und Fähigkeiten, digitale Inhalte in verschiedenen Formaten zu erstellen, zu bearbeiten und zu integrieren, dabei Urheberrecht und Lizenzen zu berücksichtigen, sowie das Programmieren digitaler Produkte.',
  'Schützen und sicher Agieren':
    'Umfasst das Wissen, die Motivation und Fähigkeiten, digitale Geräte und Inhalte zu schützen, Gesundheits- und Umweltgefahren bei der Nutzung digitaler Technologien zu vermeiden, und persönliche Daten, Identität sowie Privatsphäre in digitalen Umgebungen verantwortungsvoll zu schützen.',
  'Problemlösen und Handeln':
    'Umfasst das Wissen, die Motivation und Fähigkeiten, technische Probleme zu erkennen und zu lösen und kreative technische Lösungen für spezifische Bedürfnisse zu finden. Zudem gehört zum Kompetenzbereich informatisches Denken, also das strategische Lösen komplexer Probleme in digitalen Umgebungen und die kontinuierliche Weiterentwicklung der eigenen digitalen Kompetenzen.',
  'Analysieren und Reflektieren':
    'Umfasst das Wissen, die Motivation und Fähigkeiten, die Auswirkungen und Verbreitung digitaler Medien und Inhalte zu analysieren, deren Glaubwürdigkeit und Zuverlässigkeit kritisch zu bewerten sowie Geschäftsaktivitäten in digitalen Umgebungen zu identifizieren und angemessen darauf zu reagieren.',
}

function initializeSections() {
  if (sessionStorage.getItem('surveyCompleted') === 'true') {
    showResults()
  } else {
    currentSection = -1
    renderSection(currentSection)
    updateNavigationButtons()
  }
}

function setupEventListeners() {
  const prevBtn = document.getElementById('prevButton')
  const nextBtn = document.getElementById('nextButton')
  const logoutBtn = document.getElementById('logoutButton')
  const saveProgressBtn = document.getElementById('saveProgressButton')
  const surveyForm = document.getElementById('surveyForm')

  if (prevBtn) {
    prevBtn.addEventListener('click', previousSection)
  }
  if (nextBtn) {
    nextBtn.addEventListener('click', nextSection)
  }
  if (logoutBtn) {
    logoutBtn.addEventListener('click', logout)
  }
  if (saveProgressBtn) {
    saveProgressBtn.addEventListener('click', saveAndResumeLater)
  }
  if (surveyForm) {
    surveyForm.addEventListener('input', function () {
      saveSectionData(false)
    })
  }
}

function checkResumeToken() {
  const token = localStorage.getItem('surveyResumeToken')
  if (token) {
    try {
      const parsed = JSON.parse(atob(token))
      if (parsed.userId === sessionStorage.getItem('userId')) {
        if (userData.meta.attemptNumber > 1 && !userData.datenschutz) {
          currentSection = -1
        }
        renderSection(currentSection)
        localStorage.removeItem('surveyResumeToken')
      }
    } catch (err) {
      console.error('Invalid token:', err)
    }
  }
}

function nextSection() {
  if (currentSection === -1) {
    const form = document.getElementById('surveyForm')
    let valid = true
    valid = validateSection(true)
    if (!form.checkValidity()) {
      valid = false
    }
    if (valid && validateDatenschutz()) {
      saveSectionData(false)
      currentSection = 0
      renderSection(currentSection)
      updateProgressBar()
      setTimeout(() => {
        window.scrollTo({ top: 0, behavior: 'smooth' })
      }, 300)
    } else {
      const firstInvalid = markUnansweredQuestions()
      if (firstInvalid) {
        firstInvalid.scrollIntoView({ behavior: 'smooth', block: 'center' })
      }
    }
  } else if (currentSection < surveyData.length - 1) {
    const form = document.getElementById('surveyForm')
    let valid = true
    valid = validateSection(true)
    if (!form.checkValidity()) {
      valid = false
    }
    if (valid) {
      currentSection++
      saveSectionData(false)
      renderSection(currentSection)
      updateProgressBar()
      window.scrollTo({ top: 0, behavior: 'smooth' })
    } else {
      const firstInvalid = markUnansweredQuestions()
      if (firstInvalid) {
        firstInvalid.scrollIntoView({ behavior: 'smooth', block: 'center' })
      }
    }
  } else {
    finishSurvey()
  }
}

function previousSection() {
  saveSectionData(false)
  if (currentSection === 0 && !userData.datenschutz) {
    currentSection = -1
  } else if (currentSection > 0) {
    currentSection--
  }
  renderSection(currentSection)
  const surveyForm = document.getElementById('surveyForm')
  if (surveyForm) {
    let allData
    if (parseInt(sessionStorage.getItem('attemptNumber') || '1') > 1) {
      allData = {
        ...(userData?.t2 || {}),
        ...(userData?.t1 || {}),
        ...(userData?.initialResponses?.data || {}),
      }
    } else {
      allData = {
        ...(userData?.data || {}),
        ...(userData?.initialResponses?.data || {}),
        ...(userData || {}),
      }
    }
    console.log(
      'Loading saved responses for section',
      currentSection,
      ':',
      allData
    )
    populateFormFields(surveyForm, allData, currentSection)
  }
  updateProgressBar()
  window.scrollTo({ top: 0, behavior: 'smooth' })
}

function updateProgressBar() {
  const attemptNumber = parseInt(sessionStorage.getItem('attemptNumber') || '1')
  const totalSections = surveyData.length + (attemptNumber > 1 ? 0 : 1)
  if (sessionStorage.getItem('surveyCompleted') === 'true') return
  const currentStep =
    currentSection === -1
      ? 1
      : attemptNumber > 1
      ? currentSection + 1
      : currentSection + 2
  const progress = (currentStep / totalSections) * 100
  const progressFill = document.getElementById('progressFill')
  const progressText = document.getElementById('progressText')
  if (progressFill) {
    progressFill.style.width = `${progress}%`
    progressFill.setAttribute('aria-valuenow', currentStep)
    progressFill.setAttribute('aria-valuemax', totalSections)
  }
  if (progressText) {
    progressText.textContent = `Schritt ${currentStep} von ${totalSections}`
  }
}

function updateNavigationButtons() {
  const container = document.querySelector('.container')
  if (!container) return
  const existingNav = container.querySelector('.navigation-buttons')
  if (existingNav) {
    existingNav.remove()
  }
  if (sessionStorage.getItem('surveyCompleted') === 'true') {
    return
  }
  const navDiv = document.createElement('div')
  navDiv.className = 'navigation-buttons'
  if (currentSection === -1) {
    navDiv.innerHTML = `
      <button type="button" id="nextButton" class="btn btn-primary">
        Weiter <i class="fas fa-chevron-right"></i>
      </button>
    `
  } else {
    navDiv.innerHTML = `
      <button type="button" id="prevButton" class="btn btn-secondary">
        <i class="fas fa-chevron-left"></i> Zurück
      </button>
      <button type="button" id="saveProgressButton" class="btn btn-primary">
        <i class="fas fa-save"></i> Fortschritt speichern
      </button>
      <button type="button" id="nextButton" class="btn btn-primary">
        Weiter <i class="fas fa-chevron-right"></i>
      </button>
    `
  }
  container.appendChild(navDiv)
  const prevBtn = document.getElementById('prevButton')
  const nextBtn = document.getElementById('nextButton')
  const saveProgressBtn = document.getElementById('saveProgressButton')
  if (prevBtn) {
    prevBtn.addEventListener('click', previousSection)
  }
  if (nextBtn) {
    nextBtn.addEventListener('click', nextSection)
  }
  if (saveProgressBtn) {
    saveProgressBtn.addEventListener('click', saveAndResumeLater)
  }
}

async function startNewSurvey() {
  const userId = sessionStorage.getItem('userId')
  if (userId) {
    try {
      const response = await fetch('/api/reset-user-data', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ userId }),
      })
      if (!response.ok) {
        throw new Error('Fehler beim Zurücksetzen der Umfrage.')
      }
      sessionStorage.setItem('startNewAttempt', 'true')
      if (parseInt(sessionStorage.getItem('attemptNumber') || '1') > 1) {
        sessionStorage.setItem('currentSection', '0')
      }
      await loadUserData(true)
      alert(
        'Ihre Umfrage wurde erfolgreich zurückgesetzt. Sie können jetzt eine neue Umfrage starten.'
      )
    } catch (error) {
      console.error('Fehler beim Zurücksetzen der Umfrage:', error)
      alert(
        'Fehler beim Zurücksetzen der Umfrage. Bitte versuchen Sie es erneut.'
      )
    }
  } else {
    alert('Benutzer-ID nicht gefunden. Bitte melden Sie sich erneut an.')
  }
}

async function resetSurveyData() {
  const userId = sessionStorage.getItem('userId')
  if (userId) {
    try {
      const response = await fetch('/api/reset-user-data', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ userId }),
      })
      if (!response.ok) {
        throw new Error('Fehler beim Zurücksetzen der Umfrage.')
      }
      alert(
        'Ihre Umfrage wurde erfolgreich zurückgesetzt. Sie können jetzt eine neue Umfrage starten.'
      )
      resetUserData()
      currentSection = 0
      renderSection(currentSection)
      updateProgressBar()
      updateNavigationButtons()
    } catch (error) {
      console.error('Fehler beim Zurücksetzen der Umfrage:', error)
      alert(
        'Fehler beim Zurücksetzen der Umfrage. Bitte versuchen Sie es erneut.'
      )
    }
  } else {
    alert('Benutzer-ID nicht gefunden. Bitte melden Sie sich erneut an.')
  }
}

function logout() {
  sessionStorage.clear()
  localStorage.removeItem('surveyResumeToken')
  userData = null
  currentSection = 0
  initialScores = {}
  updatedScores = {}
  followUpScores = {}
  window.location.href = 'login.html'
}

function hideNavigationButtons() {
  const navButtons = document.querySelector('.navigation-buttons')
  if (navButtons) {
    navButtons.style.display = 'none'
  }
  const prevButton = document.getElementById('prevButton')
  const nextButton = document.getElementById('nextButton')
  const saveProgressButton = document.getElementById('saveProgressButton')
  if (prevButton) {
    prevButton.style.display = 'none'
  }
  if (nextButton) {
    nextButton.style.display = 'none'
  }
  if (saveProgressButton) {
    saveProgressButton.style.display = 'none'
  }
}

function resetUserData() {
  userData = {
    t1: {},
    t2: {},
    t3: {},
    meta: {
      attemptNumber: 1,
      currentSection: -1,
      timestamps: {
        t1: null,
        t2: null,
        t3: null,
      },
    },
  }
  initialScores = {}
  updatedScores = {}
  followUpScores = {}
}

async function loadUserData(isNewAttempt = false) {
  try {
    if (isInitializing) {
      return
    }
    isInitializing = true
    const userId = sessionStorage.getItem('userId')
    if (!userId) {
      window.location.href = 'login.html'
      return
    }
    try {
      const response = await fetch(`/api/user-data/${userId}`)
      let data
      if (response.status === 404) {
        data = {
          t1: {},
          t2: {},
          t3: {},
          meta: { attemptNumber: 1, currentSection: -1 },
          data: {},
          isComplete: false,
          courses: [],
          datenschutzConsent: false,
          unterschrift: '',
          initialResponses: { data: {} },
          updatedResponses: {},
          initialScores: {},
          updatedScores: {},
          followUpScores: {},
        }
      } else {
        if (!response.ok) {
          throw new Error('Failed to load user data')
        }
        data = await response.json()
      }
      const attemptNumber = parseInt(
        sessionStorage.getItem('attemptNumber') || '1'
      )
      if (attemptNumber > 1) {
        const birthYear =
          data.initialResponses?.data?.q0_1 || data.t1?.q0_1 || data.data?.q0_1
        if (isNewAttempt) {
          data = {
            ...data,
            t2: {},
            meta: { attemptNumber: 2, currentSection: 0 },
            t1: { ...data.t1, q0_1: birthYear },
            initialResponses: {
              data: { ...data.initialResponses?.data, q0_1: birthYear },
            },
            data: { ...data.data, q0_1: birthYear },
          }
        }
      }
      if (attemptNumber > 2) {
        const birthYear = data.initialResponses?.data?.q0_1 || data.t1?.q0_1
        if (isNewAttempt) {
          data = {
            ...data,
            t3: {},
            meta: {
              attemptNumber: 3,
              currentSection: 0,
              timestamps: {
                ...data.meta.timestamps,
                t3: new Date().toISOString(),
              },
            },
            t1: { ...data.t1, q0_1: birthYear },
            t2: { ...data.t2 },
            initialResponses: {
              data: {
                ...data.initialResponses?.data,
                q0_1: birthYear,
              },
            },
            data: {
              ...data.data,
              q0_1: birthYear,
            },
          }
        }
      }
      userData = {
        t1: data.t1 || {},
        t2: data.t2 || {},
        t3: data.t3 || {},
        meta: {
          attemptNumber: attemptNumber,
          currentSection:
            attemptNumber > 2
              ? 0
              : attemptNumber > 1
              ? isNewAttempt
                ? 0
                : data.meta?.currentSection || 0
              : isNewAttempt
              ? -1
              : data.meta?.currentSection || -1,
          ...data.meta,
        },
        data: { ...data.data, ...(data.initialResponses?.data || {}) },
        initialResponses: {
          data: { ...data.initialResponses?.data, ...data.data },
        },
        isComplete: data.isComplete || false,
        courses: data.courses || [],
        datenschutzConsent: data.datenschutzConsent || false,
        unterschrift: data.unterschrift || '',
        updatedResponses: data.updatedResponses || {},
        initialScores: data.initialScores || {},
        updatedScores: data.updatedScores || {},
        followUpScores: data.followUpScores || {},
      }
      currentSection = userData.meta.currentSection
      renderSection(currentSection)
      updateProgressBar()
      updateNavigationButtons()
    } catch (error) {
      userData = {
        t1: {},
        t2: {},
        t3: {},
        meta: { attemptNumber: 1, currentSection: -1 },
        data: {},
        initialResponses: { data: {} },
      }
      currentSection = -1
      renderSection(currentSection)
      updateProgressBar()
      updateNavigationButtons()
    }
  } catch (error) {
    console.error('Fatal error in loadUserData:', error)
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: 'Failed to load user data. Please try again.',
    }).then(() => {
      window.location.href = 'login.html'
    })
  } finally {
    isInitializing = false
  }
}

function saveSectionData(isComplete = false) {
  removeUnansweredMarkers()
  const userId = sessionStorage.getItem('userId')
  const attemptNumber =
    parseInt(sessionStorage.getItem('attemptNumber'), 10) || 1
  if (!userId) {
    return Promise.reject(new Error('No userId found'))
  }
  if (currentSection === -1) {
    userData.datenschutz = {
      kenntnis:
        document.getElementById('datenschutzKenntnis')?.checked || false,
      verarbeitung:
        document.getElementById('datenschutzVerarbeitung')?.checked || false,
      einverstaendnis:
        document.getElementById('teilnahmeEinverstaendnis')?.checked || false,
      unterschrift: document.getElementById('unterschrift')?.value.trim() || '',
      datum:
        document.getElementById('datum')?.value ||
        new Date().toISOString().split('T')[0],
    }
  } else {
    const formData = new FormData(document.getElementById('surveyForm'))
    if (attemptNumber > 2 && currentSection === 0) {
      userData.t3 = {
        ...userData.t3,
        ...Object.fromEntries(formData.entries()),
        ...Object.keys(userData.t1).reduce((acc, key) => {
          if (key.startsWith('q0_') && key !== 'q0_6') {
            acc[key] = userData.t1[key]
          }
          return acc
        }, {}),
      }
    } else if (attemptNumber > 1 && currentSection === 0) {
      userData.t2 = {
        ...userData.t2,
        ...Object.fromEntries(formData.entries()),
        ...Object.keys(userData.t1).reduce((acc, key) => {
          if (key.startsWith('q0_') && key !== 'q0_6') {
            acc[key] = userData.t1[key]
          }
          return acc
        }, {}),
      }
    } else {
      for (const [key, value] of formData.entries()) {
        if (attemptNumber > 2) {
          userData.t3[key] = value
        } else if (attemptNumber > 1) {
          userData.t2[key] = value
        } else {
          userData[key] = value
        }
      }
    }
  }
  const categoryScores =
    currentSection === -1
      ? {}
      : calculateCategoryScores(
          attemptNumber > 2
            ? userData.t3
            : attemptNumber > 1
            ? userData.t2
            : userData
        )
  const payload = {
    userId,
    data:
      attemptNumber > 2
        ? userData.t3
        : attemptNumber > 1
        ? userData.t2
        : userData,
    isComplete,
    categoryScores,
    currentSection,
    attemptNumber,
    openEndedResponses: {},
    meta: {
      attemptNumber,
      currentSection,
    },
  }
  const t1ResponseField = document.getElementById('t1OpenEndedResponse')
  const t2ResponseField = document.getElementById('t2OpenEndedResponse')
  const t2CourseFeedbackField = document.querySelector(
    '[name="t2_course_feedback"]'
  )
  const t3ReflectionField = document.getElementById('t3OpenEndedResponse')
  if (t1ResponseField?.value?.trim()) {
    payload.openEndedResponses.t1_strategy = t1ResponseField.value.trim()
  }
  if (t2ResponseField?.value?.trim()) {
    payload.openEndedResponses.t2_reflection = t2ResponseField.value.trim()
  }
  if (t2CourseFeedbackField?.value?.trim() && attemptNumber > 1) {
    payload.openEndedResponses.t2_course_feedback =
      t2CourseFeedbackField.value.trim()
  }
  if (t3ReflectionField?.value?.trim()) {
    payload.openEndedResponses.t3_reflection = t3ReflectionField.value.trim()
  }
  return fetch('/api/save-user-data', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(payload),
  })
    .then(async (res) => {
      if (!res.ok) {
        const errData = await res.json()
        throw new Error(errData.message || 'Server error')
      }
      return res.json()
    })
    .then((data) => {
      if (data.initialScores) {
        sessionStorage.setItem(
          'initialScores',
          JSON.stringify(data.initialScores)
        )
        initialScores = data.initialScores
      }
      if (data.updatedScores) {
        sessionStorage.setItem(
          'updatedScores',
          JSON.stringify(data.updatedScores)
        )
        updatedScores = data.updatedScores
      }
      if (data.followUpScores) {
        sessionStorage.setItem(
          'followUpScores',
          JSON.stringify(data.followUpScores)
        )
        followUpScores = data.followUpScores
      }
      if (isComplete && currentSection !== -1 && attemptNumber === 1) {
        sessionStorage.setItem('hasInitialScores', 'true')
      }
      const iliasLinks = document.getElementById('iliasLinks')
      if (iliasLinks) {
        iliasLinks.innerHTML = ''
      }
      return data
    })
}

async function finishSurvey() {
  if (validateSection()) {
    try {
      const saved = await saveSectionData(true)
      if (!saved) {
        throw new Error('Failed to save survey data')
      }
      showResults()
    } catch (error) {
      console.error('Error saving survey data:', error)
      alert(
        'Es gab einen Fehler beim Speichern. Bitte versuchen Sie es erneut.'
      )
    }
  } else {
    const firstInvalid = markUnansweredQuestions()
    if (firstInvalid) {
      firstInvalid.scrollIntoView({ behavior: 'smooth', block: 'center' })
    }
  }
}

function submitT1OpenEndedResponse(event) {
  event.preventDefault()
  const response = document.getElementById('t1OpenEndedResponse').value.trim()
  if (!response) {
    alert('Bitte füllen Sie das Textfeld aus.')
    return
  }
  const userId = sessionStorage.getItem('userId')
  fetch('/api/save-open-ended-response', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ userId, key: 't1_strategy', response }),
  })
    .then((res) => {
      if (!res.ok) {
        throw new Error('Network response was not ok')
      }
      return res.json()
    })
    .then(() => {
      if (!userData.openEndedResponses) {
        userData.openEndedResponses = {}
      }
      userData.openEndedResponses.t1_strategy = response
      document.getElementById('submitT1OpenEndedResponse').disabled = true
      document.getElementById('t1OpenEndedResponse').disabled = true
      showCourseLinks()
      const scoresData = {
        initialScores: JSON.parse(
          sessionStorage.getItem('initialScores') || '{}'
        ),
        updatedScores: JSON.parse(
          sessionStorage.getItem('updatedScores') || '{}'
        ),
      }
      createCompetencyChart1(scoresData.initialScores, scoresData.updatedScores)
    })
    .catch((error) => {
      console.error('Error:', error)
      alert(
        'Es gab einen Fehler beim Speichern Ihrer Antwort. Bitte versuchen Sie es erneut.'
      )
    })
}

function submitT2OpenEndedResponse(event) {
  event.preventDefault()
  const response = document.getElementById('t2OpenEndedResponse').value.trim()
  if (!response) {
    alert('Bitte füllen Sie das Textfeld aus.')
    return
  }
  const userId = sessionStorage.getItem('userId')
  fetch('/api/save-open-ended-response', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ userId, key: 't2_reflection', response }),
  })
    .then((res) => {
      if (!res.ok) {
        throw new Error('Network response was not ok')
      }
      return res.json()
    })
    .then(() => {
      document.getElementById('t2OpenEndedResponse').value = ''
      alert('Vielen Dank für Ihre Antwort!')
    })
    .catch((error) => {
      console.error('Error:', error)
      alert(
        'Es gab einen Fehler beim Speichern Ihrer Antwort. Bitte versuchen Sie es erneut.'
      )
    })
}

function submitT3OpenEndedResponse(event) {
  event.preventDefault()
  const response = document.getElementById('t3OpenEndedResponse').value.trim()
  if (!response) {
    alert('Bitte füllen Sie das Textfeld aus.')
    return
  }
  const userId = sessionStorage.getItem('userId')
  fetch('/api/save-open-ended-response', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ userId, key: 't3_reflection', response }),
  })
    .then((res) => {
      if (!res.ok) {
        throw new Error('Network response was not ok')
      }
      return res.json()
    })
    .then(() => {
      document.getElementById('t3OpenEndedResponse').value = ''
      alert('Vielen Dank für Ihre Antwort!')
    })
    .catch((error) => {
      console.error('Error:', error)
      alert(
        'Es gab einen Fehler beim Speichern Ihrer Antwort. Bitte versuchen Sie es erneut.'
      )
    })
}

function saveAndResumeLater() {
  const resumeToken = btoa(
    JSON.stringify({
      userId: sessionStorage.getItem('userId'),
      section: currentSection,
    })
  )
  localStorage.setItem('surveyResumeToken', resumeToken)
  alert('Ihr Fortschritt wurde gespeichert. Sie können später fortfahren.')
}

function populatePersonalInfo(form, data) {
  surveyData.forEach((section, sectionIndex) => {
    if (section.title === 'Persönliche Angaben') {
      section.questions.forEach((question, questionIndex) => {
        const fieldName = `q${sectionIndex}_${questionIndex}`
        const value = data[fieldName]
        if (value !== undefined) {
          const field = form.querySelector(`[name="${fieldName}"]`)
          if (field) {
            if (field.type === 'radio') {
              const radioField = form.querySelector(
                `[name="${fieldName}"][value="${value}"]`
              )
              if (radioField) {
                radioField.checked = true
              }
            } else {
              field.value = value
            }
          }
        }
      })
    }
  })
}

function populateFormFields(form, data, sectionIndex) {
  const isT2OrT3 = parseInt(sessionStorage.getItem('attemptNumber') || '1') > 1
  surveyData[sectionIndex].questions.forEach((question, qIndex) => {
    const fieldName = `q${sectionIndex}_${qIndex}`
    const questionValue = (function (fn) {
      let val
      if (isT2OrT3) {
        val =
          data?.initialResponses?.data?.[fn] ||
          data?.t1?.[fn] ||
          data?.data?.[fn] ||
          ''
      } else {
        val = data?.data?.[fn] || data?.[fn] || ''
      }
      return val
    })(fieldName)
    if (questionValue != null) {
      const fields = form.querySelectorAll(`[name="${fieldName}"]`)
      fields.forEach((f) => {
        if (f) {
          if (f.type === 'radio') {
            if (f.value === questionValue.toString()) {
              f.checked = true
              if (isT2OrT3) {
                f.disabled = true
                const hidden = document.createElement('input')
                hidden.type = 'hidden'
                hidden.name = fieldName
                hidden.value = questionValue
                f.parentNode.insertBefore(hidden, f.nextSibling)
              }
            }
          } else if (f.tagName === 'SELECT') {
            f.value = questionValue
            if (isT2OrT3) {
              f.disabled = true
              const hidden = document.createElement('input')
              hidden.type = 'hidden'
              hidden.name = fieldName
              hidden.value = questionValue
              f.parentNode.insertBefore(hidden, f.nextSibling)
            }
          } else {
            f.value = questionValue
            if (isT2OrT3) {
              f.readOnly = true
              const hidden = document.createElement('input')
              hidden.type = 'hidden'
              hidden.name = fieldName
              hidden.value = questionValue
              f.parentNode.insertBefore(hidden, f.nextSibling)
            }
          }
          if (isT2OrT3) {
            f.style.backgroundColor = '#f0f0f0'
            f.style.cursor = 'not-allowed'
          }
        }
      })
    }
  })
  if (isT2OrT3 && sectionIndex === 0) {
    const courseFeedback = data?.openEndedResponses?.t2_course_feedback || ''
    const t2CourseFeedbackField = form.querySelector(
      '[name="t2_course_feedback"]'
    )
    if (t2CourseFeedbackField) {
      t2CourseFeedbackField.value = courseFeedback
    }
  }
}

function validateSection(checkRequired = false) {
  const form = document.getElementById('surveyForm')
  if (!form) return false
  const attemptNumber = userData.meta.attemptNumber
  const isT2OrT3 = attemptNumber > 1
  const isFirstSection = currentSection === 0
  let valid = true
  form.querySelectorAll('.question').forEach((q) => {
    q.classList.remove('unanswered')
  })
  if (isT2OrT3 && isFirstSection) {
    const courseFeedbackField = form.querySelector(
      '[name="t2_course_feedback"]'
    )
    if (!courseFeedbackField || !courseFeedbackField.value.trim()) {
      valid = false
      ;(
        courseFeedbackField.closest('.question') ||
        courseFeedbackField.parentElement
      ).classList.add('unanswered')
      alert('Bitte geben Sie Ihr Feedback zu den ILIAS-Kursen ein.')
    }
    return valid
  }
  if (currentSection === 0) {
    const hiddenFach =
      attemptNumber > 1
        ? form.querySelector('input[type="hidden"][name="q0_3"]')
        : form.querySelector('[name="q0_3"]')
    if (hiddenFach && hiddenFach.offsetParent && hiddenFach.value === '') {
      valid = false
      ;(hiddenFach.closest('.question') || form).classList.add('unanswered')
    }
    const birthYearField = form.querySelector('[name="q0_1"]')
    if (birthYearField) {
      validateYear(birthYearField)
      if (!birthYearField.checkValidity()) {
        valid = false
        birthYearField.closest('.question').classList.add('unanswered')
      }
    }
    const q04q05 = form.querySelector('[name="q0_4"], [name="q0_5"]')
    if (q04q05 && q04q05.offsetParent && !q04q05.value.trim()) {
      valid = false
      q04q05.closest('.question').classList.add('unanswered')
    }
  }
  let requiredFields = []
  const allRequired = form.querySelectorAll('[required]')
  allRequired.forEach((field) => {
    if (
      field.type === 'hidden' &&
      form.querySelector(`[name="${field.name}"]:not([type="hidden"])`)
    ) {
      requiredFields.push(field)
    } else {
      requiredFields.push(field)
    }
  })
  requiredFields.forEach((field) => {
    if (field.offsetParent) {
      if (
        (field.type === 'radio' &&
          !form.querySelector(`[name="${field.name}"]:checked`)) ||
        (field.type === 'checkbox' && !field.checked) ||
        (field.type !== 'radio' &&
          field.type !== 'checkbox' &&
          !field.value.trim())
      ) {
        valid = false
        ;(field.closest('.question') || field.parentElement).classList.add(
          'unanswered'
        )
      }
    }
  })
  if (!valid) {
    const firstUnanswered = form.querySelector('.unanswered')
    if (firstUnanswered) {
      firstUnanswered.scrollIntoView({ behavior: 'smooth', block: 'center' })
    }
    alert('Bitte füllen Sie alle Pflichtfelder aus.')
  }
  return valid
}

function validateDatenschutz() {
  const checks = [
    {
      el: document.getElementById('datenschutzKenntnis'),
      label: 'Datenschutzkenntnis',
    },
    {
      el: document.getElementById('datenschutzVerarbeitung'),
      label: 'Datenverarbeitung',
    },
    {
      el: document.getElementById('teilnahmeEinverstaendnis'),
      label: 'Teilnahmeeinverständnis',
    },
    { el: document.getElementById('unterschrift'), label: 'Unterschrift' },
  ]
  let valid = true
  checks.forEach(({ el }) => {
    el?.parentElement && el.parentElement.classList.remove('unanswered')
  })
  checks.forEach(({ el }) => {
    if (!el) {
      valid = false
      return
    }
    if (el.type === 'checkbox') {
      if (!el.checked) {
        valid = false
        el.parentElement && el.parentElement.classList.add('unanswered')
      }
    } else {
      if (el.value.trim() === '') {
        valid = false
        el.parentElement && el.parentElement.classList.add('unanswered')
      }
    }
  })
  const unterschrift = document.getElementById('unterschrift')?.value.trim()
  if (unterschrift && unterschrift.length < 3) {
    valid = false
    const sigField = document.getElementById('unterschrift')
    sigField?.parentElement &&
      sigField.parentElement.classList.add('unanswered')
    alert('Bitte mindestens 3 Buchstaben für die Unterschrift eingeben.')
  }
  return valid
}

function validateYear(input) {
  input.value = input.value.replace(/\D/g, '').slice(0, 4)
  const currentYear = new Date().getFullYear()
  const isValid =
    input.value.length === 4 &&
    parseInt(input.value) >= 1900 &&
    parseInt(input.value) <= currentYear
  if (input.value === '') {
    input.setCustomValidity('Bitte geben Sie Ihr Geburtsjahr ein.')
  } else if (!isValid) {
    input.setCustomValidity(
      `Geben Sie ein Jahr zwischen 1900 und ${currentYear} ein.`
    )
  } else {
    input.setCustomValidity('')
  }
  input.style.borderColor = isValid ? '' : 'red'
  input.reportValidity()
}

function renderConditionalField(
  section,
  question,
  questionIndex,
  condition,
  isReadOnly = false
) {
  const fieldName = `q${section.questions.indexOf(question)}_${questionIndex}`
  const savedValue =
    userData.initialResponses?.[fieldName] || userData[fieldName] || ''
  if (condition === 'Fächer') {
    return `
      <div class="conditional-question">
        <label>${section.questions[questionIndex].text}</label>
        <div class="prefilled-field">
          <input type="text" 
                 name="${fieldName}" 
                 value="${savedValue}"
                 ${isReadOnly ? 'readonly' : ''}
                 ${section.questions[questionIndex].required ? 'required' : ''}>
        </div>
      </div>
    `
  } else if (condition === 'Lehramt') {
    return `
      <div class="conditional-question">
        <label>${section.questions[questionIndex].text}</label>
        <input type="text" 
               name="${fieldName}" 
               value="${savedValue}"
               ${isReadOnly ? 'readonly' : ''}
               ${section.questions[questionIndex].required ? 'required' : ''}>
      </div>
    `
  } else {
    return `
    <div class="conditional-question">
      <label>${section.questions[questionIndex].text}</label>
      <input type="${section.questions[questionIndex].type}" 
             name="${fieldName}" 
             value="${savedValue}"
             ${section.questions[questionIndex].required ? 'required' : ''}>
    </div>
  `
  }
}

function renderSection(sectionIndex) {
  const surveyForm = document.getElementById('surveyForm')
  const attemptNumber = parseInt(sessionStorage.getItem('attemptNumber') || '1')
  const isT2OrT3 = attemptNumber > 1
  const isFirstSection = sectionIndex === 0
  surveyForm.innerHTML = ''
  if (sectionIndex === -1) {
    surveyForm.innerHTML = `
      <div class="datenschutz-section">
      <h2>Datenschutzerklärung</h2>
      <p>
        Danke, dass Sie den Fragebogen ausgefüllt haben. Bevor wir Ihnen eine persönliche Rückmeldung geben, müssen wir sicher stellen, dass wir Ihre Daten speichern dürfen. Dafür lesen Sie sich bitte die Datenschutzerklärung durch und stimmen Sie dieser durch Ihre digitale Unterschrift zu.
      </p>
        <div class="datenschutz-content">
         <h3>Projektleitung:</h3>
        <p>Prof.in Dr. Charlott Rubach & Anne-Kathrin Hirsch</p>
        <p>Sehr geehrte Lehramtsstudierende,</p>
        <p>
          die Digitalisierung und Digitalität im Bildungsbereich erhielten in den letzten Jahren große Aufmerksamkeit. Der kompetente Umgang mit digitalen Medien gehört zum Aufgabenbereich von Lehrkräften. Daher ist es bedeutsam, dass Lehramtsstudierende während ihrer Ausbildung auf diesen Umgang vorbereitet werden. Wir interessieren uns im Rahmen dieser Studie „Open-Digi“ dafür, inwieweit die von uns erstellten Lernerfahrungen zur Förderung digitaler Kompetenzen beitragen.
        </p>
        <p>
          Wir sind Prof. Dr. Charlott Rubach und Anne-Kathrin Hirsch, Bildungsforscherinnen an der Universität Rostock. Unsere Forschungsschwerpunkte sind Digitalisierung, Förderung digitaler Kompetenzen und Gestaltungsmöglichkeiten einer bedarfsorientierten Lehrkräftebildung.
        </p>
        <p>
          Ziel des Projektes ist die Untersuchung von effektiven Lernerfahrungen für die Entwicklung digitaler Kompetenzen. Das Projekt besteht aus mehreren Schritten:
              </p>
        <ul>
          <li>Sie füllen die Befragung zum Open-Digi Projekt aus, welcher der Pre-Diagnostik gilt und zirka 10 Minuten dauert. Alle Befragungen thematisieren ausschließlich Aspekte von digitaler Kompetenz.</li>
          <li>Ihnen werden auf Grundlage der Diagnostik mehrere Vorschläge gemacht, wie sie eigene Kompetenzen weiterentwickeln können.</li>
          <li>Sie bearbeiten verschiedene Kurse.</li>
          <li>Sie durchlaufen die Post-Diagnostik direkt nach Bearbeitung der Kurse.</li>
          <li>Sie machen eine dritte Befragung, 1 Monat nach Bearbeitung der Kurse.</li>
        </ul>
        <p>
          Ihre Teilnahme an unserer Studie ist freiwillig. Wenn Sie an der Studie teilnehmen, können Sie die Befragung jederzeit abbrechen. In diesem Falle werden die Daten nicht gespeichert.
          </p>
          <p>
          Die Befragung ist anonym. Das heißt, es werden auch ausschließlich anonymisierte Informationen analysiert und im Rahmen wissenschaftlicher Arbeiten veröffentlicht. Es werden keine Informationen gespeichert, die es uns möglich machen, Sie als Person zu identifizieren. Eine Rücknahme Ihres Einverständnisses und damit Löschung Ihrer Daten, nachdem Sie den Fragebogen ausgefüllt und abgegeben haben, ist demnach nicht möglich. Anonymisiert sind auch Daten, die keine persönliche Information mehr enthalten, bspw. Alter, Geschlecht, Lehramtstyp, Fächer und Hochschulsemester.
        </p>
        <p>
          Wir speichern Ihre Antworten und Ihre Angaben (z. B. Alter und Geschlecht). Diese werden bis zum Abschluss der Untersuchung und maximal 10 Jahre auf den Dienstrechnern der Wissenschaftlerinnen aus dem Projekt gespeichert und danach gelöscht.
        </p>
        <p>
          Es erfolgt keine Weitergabe Ihrer Daten an Dritte außerhalb des Forschungsprojektes.
        </p>
        <p>
          Unter folgendem <a href="datenschutz.html" target="_blank">Link</a> finden Sie ausführliche Hinweise zum Schutz Ihrer Daten.
        </p>
      </div>
              <div class="final-inputs">
          <div class="question">
            <label for="datum">Datum</label>
            <input type="date" id="datum" name="datum" 
                  value="${new Date().toISOString().split('T')[0]}" 
                  readonly required>
          </div>
          <div class="question">
            <label for="unterschrift">Unterschrift</label>
            <input type="text" id="unterschrift" name="unterschrift" 
                  required placeholder="Vollständiger Name">
          </div>
          <div class="agreement-questions">
            <div class="agreement">
              <label>
                  <input type="checkbox" id="datenschutzKenntnis" required>
                  Mir sind die Datenschutzhinweise zur Kenntnis gegeben worden
              </label>
            </div>
            <div class="agreement">
              <label>
                <input type="checkbox" id="datenschutzVerarbeitung" required>
                Ich stimme der Datenverarbeitung zu
              </label>
            </div>
            <div class="agreement">
              <label>
                <input type="checkbox" id="teilnahmeEinverstaendnis" required>
                Ich möchte an der Befragung teilnehmen
              </label>
            </div>
          </div>
        </div>
      </div>
    `
    return
  }
  if (sectionIndex < 0 || sectionIndex >= surveyData.length) {
    currentSection = -1
    renderSection(currentSection)
    return
  }
  const section = surveyData[sectionIndex]
  let html = `<div class="section"><h2>${section.title}</h2>`
  if (section.title !== 'Persönliche Angaben') {
    html +=
      '<p class="section-instruction">Wie kompetent fühlen Sie sich in der Ausführung der folgenden Aktivitäten...</p>'
  }
  section.questions.forEach((question, qIndex) => {
    const fieldName = `q${sectionIndex}_${qIndex}`
    let savedValue = userData[fieldName] || ''
    if (question.dependsOn) {
      if (
        userData[question.dependsOn.questionId] !== question.dependsOn.value
      ) {
        return
      }
    }
    html += `<div class="question" id="${fieldName}-container">`
    html += `<p>${question.text}</p>`
    if (question.type === 'radio') {
      html += `<div class="radio-group" id="${fieldName}-container">`
      question.options.forEach((opt) => {
        const isChecked = savedValue === opt
        const isSecondOrThirdAttempt = attemptNumber > 1
        const firstAttemptValue = userData.t1?.[fieldName]
        const finalCheck = isSecondOrThirdAttempt
          ? opt === firstAttemptValue
          : isChecked
        html += `<div class="radio-option">
        <label>
          <input type="radio" 
                 name="${fieldName}" 
                 value="${opt}"
                 ${finalCheck ? 'checked' : ''}
                 ${question.required ? 'required' : ''}
                 ${isSecondOrThirdAttempt ? 'disabled' : ''}
                 onchange="handleTeachingStudentChange(this)">
          <span class="radio-checkmark"></span>
          ${opt}
        </label>`
        if (fieldName === 'q0_2') {
          html += `<div class="conditional-field" 
                 data-condition="${opt}"
                 style="display: ${
                   (opt === 'Ja' &&
                     (isSecondOrThirdAttempt
                       ? firstAttemptValue === 'Ja'
                       : finalCheck)) ||
                   (opt === 'Nein' &&
                     (isSecondOrThirdAttempt
                       ? firstAttemptValue === 'Nein'
                       : finalCheck))
                     ? 'block'
                     : 'none'
                 }">`
          if (opt === 'Ja') {
            const val = isSecondOrThirdAttempt
              ? userData.t1?.q0_3
              : userData.q0_3
            html += `<div class="question">
            <label>${surveyData[0].questions[3].text}</label>
            <select name="q0_3" 
                    ${isSecondOrThirdAttempt ? 'disabled readonly' : ''} 
                    ${surveyData[0].questions[3].required ? 'required' : ''}>
              <option value="" disabled>${val ? '' : 'Bitte wählen'}</option>
              ${surveyData[0].questions[3].options
                .map(
                  (optionValue) =>
                    `
                <option value="${optionValue}" ${
                      val === optionValue ? 'selected' : ''
                    }>${optionValue}</option>
              `
                )
                .join('')}
            </select>
            ${
              isSecondOrThirdAttempt
                ? `<input type="hidden" name="q0_3" value="${val}">`
                : ''
            }
          </div>`
            const val2 = isSecondOrThirdAttempt
              ? userData.t1?.q0_4
              : userData.q0_4
            html += `<div class="question">
            <label>${surveyData[0].questions[4].text}</label>
            <input type="text" 
                   name="q0_4" 
                   value="${val2 || ''}"
                   ${isSecondOrThirdAttempt ? 'readonly disabled' : ''}
                   ${surveyData[0].questions[4].required ? 'required' : ''}>
          </div>`
          }
          if (opt === 'Nein') {
            const val3 = isSecondOrThirdAttempt
              ? userData.t1?.q0_5
              : userData.q0_5
            html += `<div class="question">
            <label>${surveyData[0].questions[5].text}</label>
            <input type="text" 
                   name="q0_5" 
                   value="${val3 || ''}"
                   ${isSecondOrThirdAttempt ? 'readonly disabled' : ''}
                   ${surveyData[0].questions[5].required ? 'required' : ''}>
          </div>`
          }
          html += '</div>'
        }
        html += '</div>'
      })
      html += '</div>'
    } else if (question.type === 'dropdown') {
      const finalValue = isT2OrT3 ? userData.t1[fieldName] : savedValue
      html += `<select name="${fieldName}" 
                        ${question.required ? 'required' : ''}
                        ${isT2OrT3 ? 'disabled' : ''}>`
      html += `<option value="" disabled ${
        finalValue ? '' : 'selected'
      }>Bitte wählen</option>`
      question.options.forEach((opt) => {
        html += `<option value="${opt}" ${
          finalValue === opt ? 'selected' : ''
        }>${opt}</option>`
      })
      html += '</select>'
      if (isT2OrT3) {
        html += `<input type="hidden" name="${fieldName}" value="${finalValue}">`
      }
    } else if (question.type === 'number') {
      const finalValue = isT2OrT3 ? userData.t1[fieldName] : savedValue
      const isFachsemester = question.text.includes('Fachsemester')
      html += `
          <input type="${question.text.includes('Jahr') ? 'text' : 'number'}" 
                 name="${fieldName}" 
                 value="${finalValue || ''}"
                 min="${question.min || 1}"
                 max="${question.max || 99}"
                 ${
                   question.text.includes('Jahr')
                     ? 'oninput="validateYear(this)"'
                     : ''
                 }
                 ${
                   isT2OrT3 && isFachsemester
                     ? 'readonly disabled'
                     : isT2OrT3
                     ? 'readonly'
                     : ''
                 }
                 ${question.required ? 'required' : ''}
                 placeholder="${question.placeholder || ''}">`
    } else if (question.type === 'text') {
      const finalValue = isT2OrT3 ? userData.t1[fieldName] : savedValue
      html += `<input type="text" 
                       name="${fieldName}" 
                       value="${finalValue || ''}"
                       ${question.required ? 'required' : ''}
                       ${isT2OrT3 ? 'readonly' : ''}>`
    } else if (question.type === 'scale') {
      html += '<div class="rating-scale">'
      for (let i = 0; i <= 6; i++) {
        const isSelected = savedValue === i.toString()
        html += `
            <label class="scale-label">
              <input type="radio" 
                     name="${fieldName}" 
                     value="${i}" 
                     ${isSelected ? 'checked' : ''}
                     ${question.required ? 'required' : ''}>
              <span class="scale-button">${i}</span>
            </label>`
      }
      html += `</div>
                <div class="scale-labels">
                  <span>gar nicht kompetent</span>
                  <span>ausgesprochen kompetent</span>
                </div>`
    }
    html += '</div>'
  })
  if (isFirstSection && isT2OrT3) {
    html += `
      <script>
        document.addEventListener('DOMContentLoaded', function() {
          const form = document.getElementById('surveyForm')
          form.querySelectorAll('input, select, textarea').forEach(el => {
            if (!el.name.includes('q0_6') && !el.name.includes('t2_course_feedback')) {
              el.readOnly = true
              el.disabled = true
            }
          })
        })
      </script>
    `
    html += `
      <div class="t2-feedback">
        <p>Wie fandest du deine absolvierten Kurse in ILIAS in Bezug auf Inhalt und Struktur? Was hast du für dich mitgenommen? Was war hilfreich für dich?</p>
        <textarea name="t2_course_feedback" 
                  placeholder="Bitte geben Sie hier Ihr Feedback ein..." 
                  required>${userData.t2?.t2_course_feedback || ''}</textarea>
      </div>`
  }
  html += '</div>'
  surveyForm.innerHTML = html
  document.querySelectorAll('.scale-button').forEach((btn) => {
    btn.addEventListener('click', handleScaleClick)
    btn.addEventListener('keydown', handleScaleKeydown)
  })
  if (isFirstSection) {
    const checked = document.querySelector('input[name="q0_2"]:checked')
    if (checked) {
      handleTeachingStudentChange(checked)
    }
  }
  updateNavigationButtons()
}

function markUnansweredQuestions() {
  const form = document.getElementById('surveyForm')
  if (!form) return null
  const requiredFields = form.querySelectorAll('[required]')
  let firstInvalid = null
  requiredFields.forEach((field) => {
    const questionDiv = field.closest('.question') || field.parentElement
    if (!questionDiv) return
    if (
      (field.type === 'radio' &&
        !form.querySelector(`[name="${field.name}"]:checked`)) ||
      (field.type === 'checkbox' && !field.checked) ||
      (field.type !== 'radio' &&
        field.type !== 'checkbox' &&
        !field.value.trim())
    ) {
      questionDiv.classList.add('unanswered')
      questionDiv.style.animation =
        'shake 0.82s cubic-bezier(.36,.07,.19,.97) both'
      if (!firstInvalid) {
        firstInvalid = questionDiv
      }
    } else {
      questionDiv.classList.remove('unanswered')
      questionDiv.style.animation = ''
    }
  })
  if (firstInvalid) {
    firstInvalid.scrollIntoView({ behavior: 'smooth', block: 'center' })
  }
  return firstInvalid
}

function removeUnansweredMarkers() {
  document.querySelectorAll('.question.unanswered').forEach((q) => {
    q.classList.remove('unanswered')
  })
}

document.addEventListener('DOMContentLoaded', function () {
  loadUserData()
  renderSection(currentSection)
  updateProgressBar()
  setupEventListeners()
  checkResumeToken()
})

window.onload = function () {
  const isNewAttempt = sessionStorage.getItem('startNewAttempt') === 'true'
  const attemptNumber = parseInt(sessionStorage.getItem('attemptNumber') || '1')
  if (isNewAttempt) {
    userData = null
    currentSection = -1
    initialScores = {}
    updatedScores = {}
    followUpScores = {}
  }
  const completed = sessionStorage.getItem('surveyCompleted') === 'true'
  const userId = sessionStorage.getItem('userId')
  if (completed && userId) {
    const surveyForm = document.getElementById('surveyForm')
    if (surveyForm) {
      surveyForm.innerHTML = ''
    }
    fetch(`/api/user-data/${userId}`)
      .then((res) => {
        if (!res.ok) {
          throw new Error(`HTTP error! status: ${res.status}`)
        }
        return res.json()
      })
      .then((data) => {
        if (!data) {
          throw new Error('No data received')
        }
        userData = data
        showResults()
      })
      .catch((err) => {
        console.error('Error loading completed survey:', err)
        sessionStorage.removeItem('surveyCompleted')
        currentSection = -1
        initializeSections()
      })
  } else {
    loadUserData(isNewAttempt)
  }
}

if (typeof surveyData === 'undefined') {
  console.error('surveyData ist nicht definiert...')
}

const styleSheet = document.createElement('style')
styleSheet.textContent = `
  .radio-option input[type="radio"]:disabled:checked + .radio-checkmark {
    background-color: #0066cc;
    border-color: #0066cc;
  }
  .radio-option input[type="radio"]:disabled + .radio-checkmark {
    opacity: 0.7;
    cursor: not-allowed;
  }
`
document.head.appendChild(styleSheet)

function handleScaleClick(e) {
  const radioInput = e.target.previousElementSibling
  if (radioInput && radioInput.type === 'radio') {
    radioInput.checked = true
    radioInput.dispatchEvent(new Event('change'))
  }
}

function handleScaleKeydown(e) {
  if (e.key === ' ' || e.key === 'Enter') {
    e.preventDefault()
    const radioInput = e.target.previousElementSibling
    if (radioInput && radioInput.type === 'radio') {
      radioInput.checked = true
      radioInput.dispatchEvent(new Event('change'))
    }
    e.target.setAttribute('aria-checked', 'true')
  }
}

function handleTeachingStudentChange(radio) {
  const radioGroup = radio.closest('.radio-group')
  const selectedValue = radio.value
  const isT2OrT3 = parseInt(sessionStorage.getItem('attemptNumber') || '1') > 1
  const surveyForm = document.getElementById('surveyForm')
  radioGroup.querySelectorAll('.conditional-field').forEach((field) => {
    field.style.display = 'none'
    if (!isT2OrT3) {
      field.querySelectorAll('input, select').forEach((el) => {
        if (el.type !== 'radio' && el.type !== 'checkbox') {
          el.value = ''
        }
        el.required = false
      })
    }
  })
  const conditional = radioGroup.querySelector(
    `.conditional-field[data-condition="${selectedValue}"]`
  )
  if (conditional) {
    conditional.style.display = 'block'
    if (isT2OrT3) {
      conditional.querySelectorAll('input, select').forEach((el) => {
        const key = el.name
        const val = userData.t1[key] || ''
        if (el.type === 'radio' || el.type === 'checkbox') {
          el.checked = el.value === val
        } else {
          el.value = val
        }
        if (key === 'q0_4') {
          el.readOnly = false
          el.style.backgroundColor = '#fff'
        } else {
          el.readOnly = true
          el.style.backgroundColor = '#f0f0f0'
        }
        if (el.tagName === 'SELECT') {
          el.disabled = true
          if (!el.nextElementSibling?.name === key) {
            el.insertAdjacentHTML(
              'afterend',
              `<input type="hidden" name="${key}" value="${val}">`
            )
          }
        }
      })
    } else {
      conditional.querySelectorAll('input, select').forEach((el) => {
        el.required = true
        el.disabled = false
        el.readOnly = false
        el.style.backgroundColor = ''
      })
    }
    if (!isT2OrT3) {
      surveyForm.reportValidity()
      setTimeout(() => saveSectionData(false), 300)
    }
  }
}

function calculateCategoryScores(dataObj) {
  const scores = {}
  surveyData.forEach((sec, sIndex) => {
    if (sec.title !== 'Persönliche Angaben' && sec.title !== 'Abschluss') {
      let sum = 0
      let count = 0
      sec.questions.forEach((q, qIndex) => {
        const key = `q${sIndex}_${qIndex}`
        if (dataObj[key] && q.type === 'scale') {
          const val = parseInt(dataObj[key], 10)
          if (!isNaN(val)) {
            sum += val
            count++
          }
        }
      })
      scores[sec.title] = count > 0 ? Math.round((sum / (6 * count)) * 100) : 0
    }
  })
  return scores
}

function createCompetencyChart1(initial, updated, followUp = {}) {
  const canvas = document.getElementById('competencyChart1')
  const descriptionBox = document.getElementById('descriptionBox1')
  if (!canvas || !descriptionBox) {
    console.error('Chart canvas or description box not found')
    return
  }
  if (window.competencyChart1 instanceof Chart) {
    window.competencyChart1.destroy()
  }
  const ctx = canvas.getContext('2d')
  const allCategories = new Set([
    ...Object.keys(initial),
    ...Object.keys(updated),
    ...Object.keys(followUp),
  ])
  const categories = Array.from(allCategories)
  const labels = categories.map((cat) => labelMap[cat] || cat)
  let hoveredIndex = -1
  const datasets = [
    {
      label: 'Initial Score',
      data: categories.map((cat) => initial[cat] || 0),
      backgroundColor: categories.map((cat) =>
        getLighterColor(colorMap[cat] || '#999999')
      ),
      borderColor: categories.map((cat) => colorMap[cat] || '#999999'),
      borderWidth: 1,
    },
  ]
  if (Object.keys(updated).length > 0) {
    datasets.push({
      label: 'Updated Score',
      data: categories.map((cat) => updated[cat] || 0),
      backgroundColor: categories.map((cat) => colorMap[cat] || '#999999'),
      borderColor: categories.map((cat) => colorMap[cat] || '#999999'),
      borderWidth: 1,
    })
  }
  if (Object.keys(followUp).length > 0) {
    datasets.push({
      label: 'Follow-up Score',
      data: categories.map((cat) => followUp[cat] || 0),
      backgroundColor: categories.map((cat) =>
        getDarkerColor(colorMap[cat] || '#999999')
      ),
      borderColor: categories.map((cat) => colorMap[cat] || '#999999'),
      borderWidth: 1,
    })
  }
  window.competencyChart1 = new Chart(ctx, {
    type: 'bar',
    data: {
      labels,
      datasets,
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      scales: {
        y: {
          beginAtZero: true,
          max: 100,
          title: { display: true, text: 'Score (%)' },
        },
        x: {
          ticks: {
            autoSkip: false,
            maxRotation: 45,
            minRotation: 45,
          },
        },
      },
      plugins: {
        legend: { display: datasets.length > 1 },
        tooltip: {
          callbacks: {
            title: (tooltipItems) => {
              const index = tooltipItems[0].dataIndex
              return categories[index] || tooltipItems[0].label
            },
            label: (tooltipItem) =>
              `${tooltipItem.dataset.label}: ${tooltipItem.parsed.y}%`,
          },
        },
      },
      onHover: (evt, item) => {
        if (item.length > 0) {
          const index = item[0].index
          if (index !== hoveredIndex) {
            hoveredIndex = index
            const cat = categories[index]
            updateDescriptionBox(
              descriptionBox,
              cat,
              competencyDescriptions[cat]
            )
          }
        }
      },
    },
  })
  window.competencyChart1.update()
  if (categories.length > 0) {
    updateDescriptionBox(
      descriptionBox,
      categories[0],
      competencyDescriptions[categories[0]]
    )
  }
  descriptionBox.style.minHeight = '150px'
}

async function showResults() {
  const userId = sessionStorage.getItem('userId')
  if (userId) {
    sessionStorage.setItem('surveyCompleted', 'true')
    try {
      const res = await fetch(`/api/user-data/${userId}`)
      if (!res.ok) {
        throw new Error('Failed to fetch user data')
      }
      const data = await res.json()
      initialScores = data.initialScores || {}
      updatedScores = data.updatedScores || {}
      followUpScores = data.followUpScores || {}
      const attemptNumber =
        parseInt(sessionStorage.getItem('attemptNumber'), 10) || 1
      const finalScores =
        Object.keys(followUpScores).length > 0
          ? followUpScores
          : Object.keys(updatedScores).length > 0
          ? updatedScores
          : initialScores
      let html = `
      <h2>Ihr Kompetenzscore beträgt ${calculateCompetenzScore(
        finalScores
      )}%</h2>
      <p>Dieser Score repräsentiert Ihren aktuellen Stand in digitalen Kompetenzen basierend auf Ihren Antworten.</p>
      <h3>Kompetenzdiagramm</h3>
      <p>Das folgende Diagramm zeigt Ihre Scores in verschiedenen Kompetenzbereichen.${
        Object.keys(followUpScores).length > 0
          ? ' Die helleren Balken repräsentieren Ihre Ergebnisse nach der ersten Befragung (T1), die mittleren Balken Ihre Ergebnisse nach der zweiten Befragung (T2) und die dunkleren Balken Ihre Ergebnisse nach der aktuellen Befragung (T3).'
          : Object.keys(updatedScores).length > 0
          ? ' Die helleren Balken repräsentieren Ihre Ergebnisse nach der ersten Befragung (T1), während die dunkleren Balken Ihre Ergebnisse nach der aktuellen Befragung (T2) darstellen.'
          : ' Die Balken repräsentieren Ihre Ergebnisse nach der ersten Befragung.'
      }</p>
      <div class="attention-box">
        <span class="info-icon">ℹ️</span>
        Bewegen Sie den Mauszeiger über die Balken, um detaillierte Informationen zu den einzelnen Kompetenzen zu erhalten.
      </div>
      <div style="height: 300px; width: 100%;">
        <canvas id="competencyChart1"></canvas>
      </div>
      <div id="descriptionBox1"></div>
      <div style="display: flex; justify-content: center; margin-top: 20px;">
        <button id="downloadChart" class="btn btn-primary" style="background-color: #004A99; color: white; border: none; padding: 15px 30px; cursor: pointer; border-radius: 5px; font-size: 18px;">
          Diagramm herunterladen
        </button>
      </div>
      <hr>`
      if (attemptNumber === 1) {
        html += `
        <p>Basierend auf deinen Ergebnissen wähle nun einen oder mehrere Kompetenzbereiche aus, in denen du dich weiterbilden möchtest. Wir haben für jeden Kompetenzbereich mehrere Mikrofortbildungen entwickelt, die du absolvieren kannst. Die Auswahl der Kompetenzbereiche kannst du anhand verschiedener Motive selbst vornehmen: Möchtest du den Kompetenzbereich mit dem geringsten Score verbessern, oder interessierst du dich besonders für einen Kompetenzbereich bzw. ist ein Thema gerade sehr aktuell bei dir.</p>
        <p>Schaue dir nun die Kompetenzbereiche an und entscheide dich für 1 bis 2.</p>
        <p><strong>Welche Strategie/n hast du bei der Auswahl der Kompetenzbereiche genutzt?</strong></p>
        <textarea id="t1OpenEndedResponse" rows="4" style="width:100%;" required></textarea>
        <button id="submitT1OpenEndedResponse" class="btn btn-primary">Absenden</button>`
      } else if (attemptNumber > 1 && attemptNumber < 3) {
        html += `
        <p>Jetzt hast du den Vergleich zwischen deiner Kompetenzeinschätzung vor und nach der Absolvierung der ILIAS Kurse. Wenn der helle Balken niedriger ist als der dunklere, bedeutet das, dass du dich nach den ILIAS-Kursen besser einschätzt als zuvor. Ist der helle Balken höher als der dunklere ist es genau umgekehrt. Es ist auch möglich, dass du dich bei beiden Befragungen in gewissen Kompetenzbereichen gleich eingeschätzt hast: dann sind beide Balken gleich hoch.</p>
        <p><strong>Wie haben sich deine Kompetenzüberzeugungen nun verändert? Beschreibe, was du im Diagramm siehst und teile uns mit, welche Schlüsse du aus deiner Lernerfahrung ziehst.</strong></p>
        <textarea id="t2OpenEndedResponse" rows="4" style="width:100%;" required></textarea>
        <button id="submitT2OpenEndedResponse" class="btn btn-primary">Absenden</button>`
      } else if (attemptNumber >= 3) {
        html += `
        <p>Jetzt hast du den Vergleich zwischen deiner Kompetenzeinschätzung vor und nach der Absolvierung der ILIAS Kurse. Wenn der helle Balken niedriger ist als der mittlere oder dunklere, bedeutet das, dass du dich nach den ILIAS-Kursen besser einschätzt als zuvor. Ist der helle Balken höher als der mittlere oder dunklere ist es genau umgekehrt. Es ist auch möglich, dass du dich bei allen drei Befragungen in gewissen Kompetenzbereichen gleich eingeschätzt hast: dann sind alle Balken gleich hoch.</p>
        <p><strong>Wie haben sich deine Kompetenzüberzeugungen nun verändert? Beschreibe, was du im Diagramm siehst und teile uns mit, welche Schlüsse du aus deiner Lernerfahrung ziehst.</strong></p>
        <textarea id="t3OpenEndedResponse" rows="4" style="width:100%;" required></textarea>
        <button id="submitT3OpenEndedResponse" class="btn btn-primary">Absenden</button>`
      }
      document.getElementById('surveyForm').innerHTML = html
      window.scrollTo({ top: 0, behavior: 'smooth' })
      document.getElementById('progressBar').style.display = 'none'
      document.getElementById('progressText').style.display = 'none'
      if (Object.keys(followUpScores).length > 0) {
        createCompetencyChart1(initialScores, updatedScores, followUpScores)
      } else if (Object.keys(updatedScores).length > 0) {
        createCompetencyChart1(initialScores, updatedScores)
      } else {
        createCompetencyChart1(initialScores, {})
      }
      document
        .getElementById('downloadChart')
        .addEventListener('click', downloadChart)
      if (attemptNumber === 1) {
        document
          .getElementById('submitT1OpenEndedResponse')
          .addEventListener('click', submitT1OpenEndedResponse)
      } else if (attemptNumber > 1 && attemptNumber < 3) {
        document
          .getElementById('submitT2OpenEndedResponse')
          .addEventListener('click', submitT2OpenEndedResponse)
      } else if (attemptNumber >= 3) {
        document
          .getElementById('submitT3OpenEndedResponse')
          .addEventListener('click', submitT3OpenEndedResponse)
      }
      hideNavigationButtons()
    } catch (error) {
      console.error('Error displaying results:', error)
      alert(
        'Es gab einen Fehler beim Laden der Ergebnisse. Bitte versuchen Sie es später erneut.'
      )
    }
  } else {
    console.error('No userId found in sessionStorage.')
  }
}

function showCourseLinks() {
  const btn =
    document.getElementById('submitT1OpenEndedResponse') ||
    document.getElementById('submitT2OpenEndedResponse')
  if (btn) {
    btn.insertAdjacentHTML(
      'afterend',
      `
    <div class="course-links">
      <p>Nun ist es Zeit, deine digitalen Kompetenzen zu fördern. Hier kommst du zu den Kursen der jeweiligen Kompetenzbereiche. Klicke einfach auf den Link und du wirst zu ILIAS weitergeleitet.</p>
      <ul>
        <li><a href="https://ilias.uni-rostock.de/goto.php?target=crs_121177&client_id=ilias_hro" target="_blank">Suchen, Verarbeiten und Aufbewahren</a></li>
        <li><a href="https://ilias.uni-rostock.de/goto.php?target=crs_122050&client_id=ilias_hro" target="_blank">Analysieren und Reflektieren</a></li>
        <li><a href="https://ilias.uni-rostock.de/goto.php?target=crs_120680&client_id=ilias_hro" target="_blank">Kommunikation & Kollaboration</a></li>
        <li><a href="https://ilias.uni-rostock.de/goto.php?target=crs_122048&client_id=ilias_hro" target="_blank">Produzieren und Präsentieren</a></li>
        <li><a href="https://ilias.uni-rostock.de/goto.php?target=crs_122049&client_id=ilias_hro" target="_blank">Problemlösen und Handeln</a></li>
        <li><a href="https://ilias.uni-rostock.de/goto.php?target=crs_122051&client_id=ilias_hro" target="_blank">Schützen und sicher Agieren</a></li>
      </ul>
    </div>
  `
    )
  } else {
    console.error('Submit button not found, cannot insert course links.')
  }
}

function calculateCompetenzScore(scores) {
  const values = Object.values(scores)
  if (values.length === 0) {
    return 0
  }
  const sum = values.reduce((acc, val) => acc + val, 0)
  return Math.round(sum / values.length)
}

function getLighterColor(hex) {
  if (!hex || hex.length !== 7 || hex[0] !== '#') {
    return '#cccccc'
  }
  let r = parseInt(hex.slice(1, 3), 16)
  let g = parseInt(hex.slice(3, 5), 16)
  let b = parseInt(hex.slice(5, 7), 16)
  r = Math.min(255, r + Math.floor(0.7 * (255 - r)))
  g = Math.min(255, g + Math.floor(0.7 * (255 - g)))
  b = Math.min(255, b + Math.floor(0.7 * (255 - b)))
  return `#${r.toString(16).padStart(2, '0')}${g
    .toString(16)
    .padStart(2, '0')}${b.toString(16).padStart(2, '0')}`
}

function getDarkerColor(hex) {
  if (!hex || hex.length !== 7 || hex[0] !== '#') {
    return '#666666'
  }
  let r = parseInt(hex.slice(1, 3), 16)
  let g = parseInt(hex.slice(3, 5), 16)
  let b = parseInt(hex.slice(5, 7), 16)
  r = Math.max(0, r - Math.floor(0.7 * r))
  g = Math.max(0, g - Math.floor(0.7 * g))
  b = Math.max(0, b - Math.floor(0.7 * b))
  return `#${r.toString(16).padStart(2, '0')}${g
    .toString(16)
    .padStart(2, '0')}${b.toString(16).padStart(2, '0')}`
}

function getContrastColor(hex) {
  const r = parseInt(hex.slice(1, 3), 16)
  const g = parseInt(hex.slice(3, 5), 16)
  const b = parseInt(hex.slice(5, 7), 16)
  const brightness = (r * 299 + g * 587 + b * 114) / 1000
  return brightness >= 128 ? 'black' : 'white'
}

function updateDescriptionBox(box, category, description) {
  const borderColor = colorMap[category] || '#999999'
  const bgColor = getLighterColor(borderColor)
  box.innerHTML = `
    <h3>${category}</h3>
    <p>${description || 'Beschreibung nicht verfügbar.'}</p>
  `
  box.style.backgroundColor = bgColor
  box.style.padding = '15px'
  box.style.borderRadius = '5px'
  box.style.border = `2px solid ${borderColor}`
  box.style.color = getContrastColor(bgColor)
}

function downloadChart(e) {
  e.preventDefault()
  const chartCanvas = document.getElementById('competencyChart1')
  if (chartCanvas) {
    const link = document.createElement('a')
    link.download = 'kompetenz-diagramm.png'
    link.href = chartCanvas.toDataURL()
    link.click()
  }
}

function submitFinalData(event) {
  event.preventDefault()
  if (!validateDatenschutz()) {
    return false
  }
  saveSectionData(true)
  showResults()
}
window.handleScaleClick = handleScaleClick
window.handleScaleKeydown = handleScaleKeydown
window.submitFinalData = submitFinalData
window.showResults = showResults
