let currentSection = -1,
  userData = null,
  chart1Instance = null,
  initialScores = {},
  updatedScores = {},
  userDataInitial = {},
  userDataUpdated = {},
  isInitializing = !1
const labelMap = {
    'Suchen, Verarbeiten und Aufbewahren': 'Suchen',
    'Kommunikation und Kollaborieren': 'Kommunizieren',
    'Produzieren und Präsentieren': 'Produzieren',
    'Schützen und sicher Agieren': 'Schützen',
    'Problemlösen und Handeln': 'Problemlösen',
    'Analysieren und Reflektieren': 'Analysieren',
  },
  colorMap = {
    'Suchen, Verarbeiten und Aufbewahren': '#00BF63',
    'Kommunikation und Kollaborieren': '#0CC0DF',
    'Produzieren und Präsentieren': '#FF6D5F',
    'Schützen und sicher Agieren': '#8C52FF',
    'Problemlösen und Handeln': '#E884C4',
    'Analysieren und Reflektieren': '#FFD473',
  },
  competencyDescriptions = {
    'Suchen, Verarbeiten und Aufbewahren':
      'Umfasst das Wissen, die Motivation und Fähigkeiten, gezielt nach digitalen Daten und Inhalten zu suchen, diese effektiv zu organisieren, zu speichern und abzurufen.',
    'Kommunikation und Kollaborieren':
      'Umfasst das Wissen, die Motivation und Fähigkeiten, mithilfe digitaler Technologien effektiv zu interagieren, zu kollaborieren und Informationen auszutauschen, dabei die Verhaltensnormen in digitalen Umgebungen zu beachten und digitale Technologien zur gesellschaftlichen Teilhabe und Selbstermächtigung zu nutzen.',
    'Produzieren und Präsentieren':
      'Umfasst das Wissen, die Motivation und Fähigkeiten, digitale Inhalte in verschiedenen Formaten zu erstellen, zu bearbeiten und zu integrieren, dabei Urheberrecht und Lizenzen zu berücksichtigen, sowie das Programmieren digitaler Produkte.',
    'Schützen und sicher Agieren':
      'Umfasst das Wissen, die Motivation und Fähigkeiten, digitale Geräte und Inhalte zu schützen, Gesundheits- und Umweltgefahren bei der Nutzung digitaler Technologien zu vermeiden, und persönliche Daten, Identität sowie Privatsphäre in digitalen Umgebungen verantwortungsvoll zu schützen.',
    'Problemlösen und Handeln':
      'Umfasst das Wissen, die Motivation und Fähigkeiten, technische Probleme zu erkennen und zu lösen und kreative technische Lösungen für spezifische Bedürfnisse zu finden. Zudem gehört zum Kompetenzbereich informatisches Denken, also das strategische Lösen komplexer Probleme in digitalen Umgebungen und die kontinuierliche Weiterentwicklung der eigenen digitalen Kompetenzen.',
    'Analysieren und Reflektieren':
      'Umfasst das Wissen, die Motivation und Fähigkeiten, die Auswirkungen und Verbreitung digitaler Medien und Inhalte zu analysieren, deren Glaubwürdigkeit und Zuverlässigkeit kritisch zu bewerten sowie Geschäftsaktivitäten in digitalen Umgebungen zu identifizieren und angemessen darauf zu reagieren.',
  }
function initializeSections() {
  'true' !== sessionStorage.getItem('surveyCompleted')
    ? ((currentSection = -1),
      renderSection(currentSection),
      updateNavigationButtons())
    : showResults()
}
function setupEventListeners() {
  const e = document.getElementById('prevButton'),
    t = document.getElementById('nextButton'),
    n = document.getElementById('logoutButton'),
    r = document.getElementById('saveProgressButton'),
    i = document.getElementById('surveyForm')
  e && e.addEventListener('click', previousSection),
    t && t.addEventListener('click', nextSection),
    n && n.addEventListener('click', logout),
    r && r.addEventListener('click', saveAndResumeLater),
    i &&
      i.addEventListener('input', function () {
        saveSectionData(!1)
      })
}
function checkResumeToken() {
  const e = localStorage.getItem('surveyResumeToken')
  if (e)
    try {
      JSON.parse(atob(e)).userId === sessionStorage.getItem('userId') &&
        (userData.meta.attemptNumber > 1 &&
          !userData.datenschutz &&
          (currentSection = -1),
        renderSection(currentSection),
        localStorage.removeItem('surveyResumeToken'))
    } catch (e) {
      console.error('Invalid token:', e)
    }
}
function nextSection() {
  if (-1 === currentSection) {
    const e = document.getElementById('surveyForm')
    let t = !0
    if (
      ((t = validateSection(!0)),
      e.checkValidity() || (t = !1),
      t && validateDatenschutz())
    )
      saveSectionData(!1),
        (currentSection = 0),
        renderSection(currentSection),
        updateProgressBar(),
        setTimeout(() => {
          window.scrollTo({ top: 0, behavior: 'smooth' })
        }, 300)
    else {
      const e = markUnansweredQuestions()
      e && e.scrollIntoView({ behavior: 'smooth', block: 'center' })
    }
  } else if (currentSection < surveyData.length - 1) {
    const e = document.getElementById('surveyForm')
    let t = !0
    if (((t = validateSection(!0)), e.checkValidity() || (t = !1), t))
      currentSection++,
        saveSectionData(!1),
        renderSection(currentSection),
        updateProgressBar(),
        window.scrollTo({ top: 0, behavior: 'smooth' })
    else {
      const e = markUnansweredQuestions()
      e && e.scrollIntoView({ behavior: 'smooth', block: 'center' })
    }
  } else finishSurvey()
}
function previousSection() {
  saveSectionData(!1),
    0 !== currentSection || userData.datenschutz
      ? currentSection > 0 && currentSection--
      : (currentSection = -1),
    renderSection(currentSection)
  const e = document.getElementById('surveyForm')
  if (e) {
    let t
    ;(t =
      parseInt(sessionStorage.getItem('attemptNumber') || '1') > 1
        ? {
            ...(userData?.t2 || {}),
            ...(userData?.t1 || {}),
            ...(userData?.initialResponses?.data || {}),
          }
        : {
            ...(userData?.data || {}),
            ...(userData?.initialResponses?.data || {}),
            ...(userData || {}),
          }),
      console.log(
        'Loading saved responses for section',
        currentSection,
        ':',
        t
      ),
      populateFormFields(e, t, currentSection)
  }
  updateProgressBar(), window.scrollTo({ top: 0, behavior: 'smooth' })
}
function updateProgressBar() {
  const e = parseInt(sessionStorage.getItem('attemptNumber') || '1'),
    t = surveyData.length + (e > 1 ? 0 : 1)
  if ('true' === sessionStorage.getItem('surveyCompleted')) return
  const n =
      -1 === currentSection
        ? 1
        : e > 1
        ? currentSection + 1
        : currentSection + 2,
    r = (n / t) * 100,
    i = document.getElementById('progressFill'),
    a = document.getElementById('progressText')
  i &&
    ((i.style.width = `${r}%`),
    i.setAttribute('aria-valuenow', n),
    i.setAttribute('aria-valuemax', t)),
    a && (a.textContent = `Schritt ${n} von ${t}`)
}
function updateNavigationButtons() {
  const e = document.querySelector('.container')
  if (!e) return
  const t = e.querySelector('.navigation-buttons')
  if ((t && t.remove(), 'true' === sessionStorage.getItem('surveyCompleted')))
    return
  const n = document.createElement('div')
  ;(n.className = 'navigation-buttons'),
    (n.innerHTML =
      -1 === currentSection
        ? '\n      <button type="button" id="nextButton" class="btn btn-primary">\n        Weiter <i class="fas fa-chevron-right"></i>\n      </button>\n    '
        : '\n      <button type="button" id="prevButton" class="btn btn-secondary">\n        <i class="fas fa-chevron-left"></i> Zurück\n      </button>\n      <button type="button" id="saveProgressButton" class="btn btn-primary">\n        <i class="fas fa-save"></i> Fortschritt speichern\n      </button>\n      <button type="button" id="nextButton" class="btn btn-primary">\n        Weiter <i class="fas fa-chevron-right"></i>\n      </button>\n    '),
    e.appendChild(n)
  const r = document.getElementById('prevButton'),
    i = document.getElementById('nextButton'),
    a = document.getElementById('saveProgressButton')
  r && r.addEventListener('click', previousSection),
    i && i.addEventListener('click', nextSection),
    a && a.addEventListener('click', saveAndResumeLater)
}
async function startNewSurvey() {
  const e = sessionStorage.getItem('userId')
  if (e)
    try {
      if (
        !(
          await fetch('/api/reset-user-data', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ userId: e }),
          })
        ).ok
      )
        throw new Error('Fehler beim Zurücksetzen der Umfrage.')
      sessionStorage.setItem('startNewAttempt', 'true')
      parseInt(sessionStorage.getItem('attemptNumber') || '1') > 1 &&
        sessionStorage.setItem('currentSection', '0'),
        await loadUserData(!0),
        alert(
          'Ihre Umfrage wurde erfolgreich zurückgesetzt. Sie können jetzt eine neue Umfrage starten.'
        )
    } catch (e) {
      console.error('Fehler beim Zurücksetzen der Umfrage:', e),
        alert(
          'Fehler beim Zurücksetzen der Umfrage. Bitte versuchen Sie es erneut.'
        )
    }
  else alert('Benutzer-ID nicht gefunden. Bitte melden Sie sich erneut an.')
}
async function resetSurveyData() {
  const e = sessionStorage.getItem('userId')
  if (e)
    try {
      if (
        !(
          await fetch('/api/reset-user-data', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ userId: e }),
          })
        ).ok
      )
        throw new Error('Fehler beim Zurücksetzen der Umfrage.')
      alert(
        'Ihre Umfrage wurde erfolgreich zurückgesetzt. Sie können jetzt eine neue Umfrage starten.'
      ),
        resetUserData(),
        (currentSection = 0),
        renderSection(currentSection),
        updateProgressBar(),
        updateNavigationButtons()
    } catch (e) {
      console.error('Fehler beim Zurücksetzen der Umfrage:', e),
        alert(
          'Fehler beim Zurücksetzen der Umfrage. Bitte versuchen Sie es erneut.'
        )
    }
  else alert('Benutzer-ID nicht gefunden. Bitte melden Sie sich erneut an.')
}
function logout() {
  sessionStorage.clear(),
    localStorage.removeItem('surveyResumeToken'),
    (userData = null),
    (currentSection = 0),
    (initialScores = {}),
    (updatedScores = {}),
    (window.location.href = 'login.html')
}
function hideNavigationButtons() {
  const e = document.querySelector('.navigation-buttons')
  e && (e.style.display = 'none')
  const t = document.getElementById('prevButton'),
    n = document.getElementById('nextButton'),
    r = document.getElementById('saveProgressButton')
  t && (t.style.display = 'none'),
    n && (n.style.display = 'none'),
    r && (r.style.display = 'none')
}
function resetUserData() {
  ;(userData = {
    t1: {},
    t2: {},
    meta: { attemptNumber: 1, currentSection: -1 },
  }),
    (initialScores = {}),
    (updatedScores = {})
}
async function loadUserData(e = !1) {
  try {
    if (isInitializing)
      return void console.log('Already initializing, skipping duplicate call')
    isInitializing = !0
    const t = sessionStorage.getItem('userId')
    if (!t)
      return (
        console.error('No userId found'),
        void (window.location.href = 'login.html')
      )
    console.log('Loading user data for userId:', t),
      console.log('Is new attempt:', e),
      console.log(
        'Current attempt number:',
        sessionStorage.getItem('attemptNumber')
      )
    try {
      const n = await fetch(`/api/user-data/${t}`)
      let r
      if (404 === n.status)
        console.log('New user, initializing data'),
          (r = {
            t1: {},
            t2: {},
            meta: { attemptNumber: 1, currentSection: -1 },
            data: {},
            isComplete: !1,
            courses: [],
            datenschutzConsent: !1,
            unterschrift: '',
            initialResponses: { data: {} },
            updatedResponses: {},
            initialScores: {},
            updatedScores: {},
          })
      else {
        if (!n.ok) throw new Error('Failed to load user data')
        ;(r = await n.json()),
          console.log('Loaded existing data from server:', r)
      }
      const i = parseInt(sessionStorage.getItem('attemptNumber') || '1')
      if (i > 1) {
        console.log('T2: Preserving T1 data')
        const t = r.initialResponses?.data?.q0_1 || r.t1?.q0_1 || r.data?.q0_1
        console.log('Found birth year:', t)
        const n = {
          t1: { ...r.t1, q0_1: t },
          initialResponses: { data: { ...r.initialResponses?.data, q0_1: t } },
          data: { ...r.data, q0_1: t },
        }
        e &&
          (r = {
            ...r,
            t2: {},
            meta: { attemptNumber: 2, currentSection: 0 },
            t1: n.t1,
            initialResponses: n.initialResponses,
            data: n.data,
          })
      }
      if (
        (console.log('Processing data:', r),
        (userData = {
          t1: r.t1 || {},
          t2: r.t2 || {},
          meta: {
            attemptNumber: i,
            currentSection: i > 1 ? 0 : e ? -1 : r.meta?.currentSection || -1,
            ...r.meta,
          },
          data: { ...r.data, ...(r.initialResponses?.data || {}) },
          initialResponses: {
            data: { ...r.initialResponses?.data, ...r.data },
          },
          isComplete: r.isComplete || !1,
          courses: r.courses || [],
          datenschutzConsent: r.datenschutzConsent || !1,
          unterschrift: r.unterschrift || '',
          updatedResponses: r.updatedResponses || {},
          initialScores: r.initialScores || {},
          updatedScores: r.updatedScores || {},
        }),
        i > 1)
      ) {
        console.log('T2: Setting up T2 data')
        const e = (e) => {
          e &&
            Object.entries(e).forEach(([e, t]) => {
              e.startsWith('q0_') &&
                (console.log(`Copying ${e} with value:`, t),
                'q0_1' === e && console.log('Copying birth year:', t),
                (userData.t1[e] = t),
                (userData.t2[e] = t),
                (userData.initialResponses.data[e] = t),
                (userData.data[e] = t))
            })
        }
        console.log('T2: Copying personal info from various sources'),
          e(r.initialResponses?.data),
          e(r.data),
          e(r.t1),
          console.log('T2: Final data state:', {
            t1: userData.t1,
            t2: userData.t2,
            initialResponses: userData.initialResponses,
            data: userData.data,
          }),
          console.log('Final birth year value:', {
            t1: userData.t1.q0_1,
            t2: userData.t2.q0_1,
            initialResponses: userData.initialResponses.data.q0_1,
            data: userData.data.q0_1,
          })
      }
      ;(currentSection = userData.meta.currentSection),
        console.log('Final current section:', currentSection),
        console.log('Final user data state:', userData),
        renderSection(currentSection),
        updateProgressBar(),
        updateNavigationButtons()
    } catch (e) {
      console.error('Error in user data handling:', e),
        (userData = {
          t1: {},
          t2: {},
          meta: { attemptNumber: 1, currentSection: -1 },
          data: {},
          initialResponses: { data: {} },
        }),
        (currentSection = -1),
        renderSection(currentSection),
        updateProgressBar(),
        updateNavigationButtons()
    }
  } catch (e) {
    console.error('Fatal error in loadUserData:', e),
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: 'Failed to load user data. Please try again.',
      }).then(() => {
        window.location.href = 'login.html'
      })
  } finally {
    isInitializing = !1
  }
}
function saveSectionData(e = !1) {
  removeUnansweredMarkers()
  const t = sessionStorage.getItem('userId'),
    n = parseInt(sessionStorage.getItem('attemptNumber'), 10) || 1
  if (!t)
    return (
      console.error('No userId found'),
      Promise.reject(new Error('No userId found'))
    )
  if (-1 === currentSection)
    userData.datenschutz = {
      kenntnis: document.getElementById('datenschutzKenntnis')?.checked || !1,
      verarbeitung:
        document.getElementById('datenschutzVerarbeitung')?.checked || !1,
      einverstaendnis:
        document.getElementById('teilnahmeEinverstaendnis')?.checked || !1,
      unterschrift: document.getElementById('unterschrift')?.value.trim() || '',
      datum:
        document.getElementById('datum')?.value ||
        new Date().toISOString().split('T')[0],
    }
  else {
    const e = new FormData(document.getElementById('surveyForm'))
    if (n > 1 && 0 === currentSection)
      userData.t2 = {
        ...userData.t2,
        ...Object.fromEntries(e.entries()),
        ...Object.keys(userData.t1).reduce(
          (e, t) => (
            t.startsWith('q0_') && 'q0_6' !== t && (e[t] = userData.t1[t]), e
          ),
          {}
        ),
      }
    else
      for (const [t, r] of e.entries())
        n > 1 ? (userData.t2[t] = r) : (userData[t] = r)
  }
  const r =
      -1 === currentSection
        ? {}
        : calculateCategoryScores(n > 1 ? userData.t2 : userData),
    i = {
      userId: t,
      data: n > 1 ? userData.t2 : userData,
      isComplete: e,
      categoryScores: r,
      currentSection: currentSection,
      attemptNumber: n,
      openEndedResponses: {},
      meta: { attemptNumber: n, currentSection: currentSection },
    },
    a = document.getElementById('t1OpenEndedResponse'),
    s = document.getElementById('t2OpenEndedResponse'),
    o = document.querySelector('[name="t2_course_feedback"]')
  return (
    a?.value?.trim() && (i.openEndedResponses.t1_strategy = a.value.trim()),
    s?.value?.trim() && (i.openEndedResponses.t2_reflection = s.value.trim()),
    o?.value?.trim() &&
      n > 1 &&
      (i.openEndedResponses.t2_course_feedback = o.value.trim()),
    fetch('/api/save-user-data', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(i),
    })
      .then(async (e) => {
        if (!e.ok) {
          const t = await e.json()
          throw new Error(t.message || 'Server error')
        }
        return e.json()
      })
      .then((t) => {
        t.initialScores &&
          (sessionStorage.setItem(
            'initialScores',
            JSON.stringify(t.initialScores)
          ),
          (initialScores = t.initialScores)),
          t.updatedScores &&
            (sessionStorage.setItem(
              'updatedScores',
              JSON.stringify(t.updatedScores)
            ),
            (updatedScores = t.updatedScores)),
          e &&
            -1 !== currentSection &&
            1 === n &&
            sessionStorage.setItem('hasInitialScores', 'true')
        const r = document.getElementById('iliasLinks')
        return r && (r.innerHTML = ''), t
      })
  )
}
async function finishSurvey() {
  if (validateSection())
    try {
      if (!(await saveSectionData(!0)))
        throw new Error('Failed to save survey data')
      showResults()
    } catch (e) {
      console.error('Error saving survey data:', e),
        alert(
          'Es gab einen Fehler beim Speichern. Bitte versuchen Sie es erneut.'
        )
    }
  else {
    const e = markUnansweredQuestions()
    e && e.scrollIntoView({ behavior: 'smooth', block: 'center' })
  }
}
function submitT1OpenEndedResponse(e) {
  e.preventDefault()
  const t = document.getElementById('t1OpenEndedResponse').value.trim()
  if (!t) return void alert('Bitte füllen Sie das Textfeld aus.')
  const n = sessionStorage.getItem('userId')
  fetch('/api/save-open-ended-response', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ userId: n, key: 't1_strategy', response: t }),
  })
    .then((e) => {
      if (!e.ok) throw new Error('Network response was not ok')
      return e.json()
    })
    .then(() => {
      userData.openEndedResponses || (userData.openEndedResponses = {}),
        (userData.openEndedResponses.t1_strategy = t)
      document.getElementById('competencyChart1').parentElement
      const e = {
        initialScores: JSON.parse(
          sessionStorage.getItem('initialScores') || '{}'
        ),
        updatedScores: JSON.parse(
          sessionStorage.getItem('updatedScores') || '{}'
        ),
      }
      ;(document.getElementById('submitT1OpenEndedResponse').disabled = !0),
        (document.getElementById('t1OpenEndedResponse').disabled = !0),
        showCourseLinks(),
        createCompetencyChart1(e.initialScores, e.updatedScores)
    })
    .catch((e) => {
      console.error('Error:', e),
        alert(
          'Es gab einen Fehler beim Speichern Ihrer Antwort. Bitte versuchen Sie es erneut.'
        )
    })
}
function submitT2OpenEndedResponse(e) {
  e.preventDefault()
  const t = document.getElementById('t2OpenEndedResponse').value.trim()
  if (!t) return void alert('Bitte füllen Sie das Textfeld aus.')
  const n = sessionStorage.getItem('userId')
  fetch('/api/save-open-ended-response', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ userId: n, key: 't2_reflection', response: t }),
  })
    .then((e) => {
      if (!e.ok) throw new Error('Network response was not ok')
      return e.json()
    })
    .then(() => {
      ;(document.getElementById('t2OpenEndedResponse').value = ''),
        alert('Vielen Dank für Ihre Antwort!')
    })
    .catch((e) => {
      console.error('Error:', e),
        alert(
          'Es gab einen Fehler beim Speichern Ihrer Antwort. Bitte versuchen Sie es erneut.'
        )
    })
}
function saveAndResumeLater() {
  const e = btoa(
    JSON.stringify({
      userId: sessionStorage.getItem('userId'),
      section: currentSection,
    })
  )
  localStorage.setItem('surveyResumeToken', e),
    alert('Ihr Fortschritt wurde gespeichert. Sie können später fortfahren.')
}
function populatePersonalInfo(e, t) {
  surveyData.forEach((n, r) => {
    'Persönliche Angaben' === n.title &&
      n.questions.forEach((n, i) => {
        const a = `q${r}_${i}`,
          s = t[a]
        if (void 0 !== s) {
          const t = e.querySelector(`[name="${a}"]`)
          if (t)
            if ('radio' === t.type) {
              const t = e.querySelector(`[name="${a}"][value="${s}"]`)
              t && (t.checked = !0)
            } else t.type, (t.value = s)
        }
      })
  })
}
function populateFormFields(e, t, n) {
  const r = parseInt(sessionStorage.getItem('attemptNumber') || '1') > 1
  console.log('PopulateFormFields called with:', {
    sectionIndex: n,
    isT2: r,
    data: t,
  })
  if (
    (surveyData[n].questions.forEach((i, a) => {
      const s = `q${n}_${a}`,
        o = ((e) => {
          let n
          return (
            'q0_1' === e &&
              console.log('Looking for birth year in:', {
                initialResponsesData: t?.initialResponses?.data?.[e],
                t1Data: t?.t1?.[e],
                rootData: t?.data?.[e],
                allData: t,
              }),
            r
              ? ((n =
                  t?.initialResponses?.data?.[e] ||
                  t?.t1?.[e] ||
                  t?.data?.[e] ||
                  ''),
                'q0_1' === e && console.log('Found birth year value:', n))
              : (n = t?.data?.[e] || t?.[e] || ''),
            n
          )
        })(s)
      if (
        (console.log(`Processing ${s}:`, { value: o, question: i, isT2: r }),
        null != o)
      ) {
        const t = e.querySelectorAll(`[name="${s}"]`)
        console.log(`Found ${t.length} fields for ${s}`),
          t.forEach((e) => {
            if (e) {
              if (
                ('q0_1' === s &&
                  console.log('Setting birth year field:', {
                    field: e,
                    value: o,
                    type: e.type,
                  }),
                'radio' === e.type)
              ) {
                if (e.value === o.toString() && ((e.checked = !0), r)) {
                  e.disabled = !0
                  const t = document.createElement('input')
                  ;(t.type = 'hidden'),
                    (t.name = s),
                    (t.value = o),
                    e.parentNode.insertBefore(t, e.nextSibling)
                }
              } else if ('SELECT' === e.tagName) {
                if (((e.value = o), r)) {
                  e.disabled = !0
                  const t = document.createElement('input')
                  ;(t.type = 'hidden'),
                    (t.name = s),
                    (t.value = o),
                    e.parentNode.insertBefore(t, e.nextSibling)
                }
              } else if (((e.value = o), r)) {
                e.readOnly = !0
                const t = document.createElement('input')
                ;(t.type = 'hidden'),
                  (t.name = s),
                  (t.value = o),
                  e.parentNode.insertBefore(t, e.nextSibling)
              }
              r &&
                ((e.style.backgroundColor = '#f0f0f0'),
                (e.style.cursor = 'not-allowed'))
            } else console.log(`Field not found for ${s}`)
          })
      }
    }),
    r && 0 === n)
  ) {
    const n = t?.openEndedResponses?.t2_course_feedback || '',
      r = e.querySelector('[name="t2_course_feedback"]')
    r && (r.value = n)
  }
}
function validateSection() {
  const e = document.getElementById('surveyForm')
  if (!e) return !1
  const t = userData.meta.attemptNumber,
    n = t > 1,
    r = 0 === currentSection
  let i = !0
  if (
    (e.querySelectorAll('.question').forEach((e) => {
      e.classList.remove('unanswered')
    }),
    n && r)
  ) {
    const t = e.querySelector('[name="t2_course_feedback"]')
    if (!t || !t.value.trim()) {
      i = !1
      ;(t.closest('.question') || t.parentElement).classList.add('unanswered'),
        alert('Bitte geben Sie Ihr Feedback zu den ILIAS-Kursen ein.')
    }
    return i
  }
  if (0 === currentSection) {
    const n =
      t > 1
        ? e.querySelector('input[type="hidden"][name="q0_3"]')
        : e.querySelector('[name="q0_3"]')
    if (n && n.offsetParent && '' === n.value) {
      i = !1
      ;(n.closest('.question') || e).classList.add('unanswered')
    }
    const r = e.querySelector('[name="q0_1"]')
    r &&
      (validateYear(r),
      r.checkValidity() ||
        ((i = !1), r.closest('.question').classList.add('unanswered')))
    const a = e.querySelector('[name="q0_4"], [name="q0_5"]')
    a &&
      a.offsetParent &&
      !a.value.trim() &&
      ((i = !1), a.closest('.question').classList.add('unanswered'))
  }
  let a = []
  if (
    (e.querySelectorAll('[required]').forEach((t) => {
      ;('hidden' === t.type &&
        e.querySelector(`[name="${t.name}"]:not([type="hidden"])`)) ||
        a.push(t)
    }),
    a.forEach((t) => {
      if (
        t.offsetParent &&
        (('radio' === t.type &&
          !e.querySelector(`[name="${t.name}"]:checked`)) ||
          ('checkbox' === t.type && !t.checked) ||
          ('radio' !== t.type && 'checkbox' !== t.type && !t.value.trim()))
      ) {
        i = !1
        ;(t.closest('.question') || t.parentElement).classList.add('unanswered')
      }
    }),
    !i)
  ) {
    const t = e.querySelector('.unanswered')
    t && t.scrollIntoView({ behavior: 'smooth', block: 'center' }),
      alert('Bitte füllen Sie alle Pflichtfelder aus.')
  }
  return i
}
function validateDatenschutz() {
  const e = [
    {
      el: document.getElementById('datenschutzKenntnis'),
      label: 'Datenschutzkenntnis',
    },
    {
      el: document.getElementById('datenschutzVerarbeitung'),
      label: 'Datenverarbeitung',
    },
    {
      el: document.getElementById('teilnahmeEinverstaendnis'),
      label: 'Teilnahmeeinverständnis',
    },
    { el: document.getElementById('unterschrift'), label: 'Unterschrift' },
  ]
  let t = !0
  e.forEach(({ el: e }) => {
    e?.parentElement && e.parentElement.classList.remove('unanswered')
  }),
    e.forEach(({ el: e, label: n }) => {
      if (!e) return console.error(`Element not found: ${n}`), void (t = !1)
      ;('checkbox' === e.type ? e.checked : '' !== e.value.trim()) ||
        ((t = !1),
        e.parentElement && e.parentElement.classList.add('unanswered'))
    })
  const n = document.getElementById('unterschrift')?.value.trim()
  if (n && n.length < 3) {
    t = !1
    const e = document.getElementById('unterschrift')
    e?.parentElement && e.parentElement.classList.add('unanswered')
  }
  return !!t
}
function validateYear(e) {
  e.value = e.value.replace(/\D/g, '').slice(0, 4)
  const t = new Date().getFullYear(),
    n =
      4 === e.value.length &&
      parseInt(e.value) >= 1900 &&
      parseInt(e.value) <= t
  '' === e.value
    ? e.setCustomValidity('Bitte geben Sie Ihr Geburtsjahr ein.')
    : n
    ? e.setCustomValidity('')
    : e.setCustomValidity(`Geben Sie ein Jahr zwischen 1900 und ${t} ein.`),
    (e.style.borderColor = n ? '' : 'red'),
    e.reportValidity()
}
function renderConditionalField(e, t, n, r, i = !1) {
  const a = `q${e.questions.indexOf(t)}_${n}`,
    s = userData.initialResponses?.[a] || userData[a] || ''
  return 'Fächer' === r
    ? `\n      <div class="conditional-question">\n        <label>${
        e.questions[n].text
      }</label>\n        <div class="prefilled-field">\n          <input type="text" \n                 name="${a}" \n                 value="${s}"\n                 ${
        i ? 'readonly' : ''
      }\n                 ${
        e.questions[n].required ? 'required' : ''
      }>\n        </div>\n      </div>\n    `
    : 'Lehramt' === r
    ? `\n      <div class="conditional-question">\n        <label>${
        e.questions[n].text
      }</label>\n        <input type="text" \n               name="${a}" \n               value="${s}"\n               ${
        i ? 'readonly' : ''
      }\n               ${
        e.questions[n].required ? 'required' : ''
      }>\n      </div>\n    `
    : `\n    <div class="conditional-question">\n      <label>${
        e.questions[n].text
      }</label>\n      <input type="${
        e.questions[n].type
      }" \n             name="${a}" \n             value="${s}"\n             ${
        e.questions[n].required ? 'required' : ''
      }>\n    </div>\n  `
}
function renderSection(e) {
  console.log(`Rendering section ${e}`)
  const t = document.getElementById('surveyForm'),
    n = parseInt(sessionStorage.getItem('attemptNumber') || '1'),
    r = n > 1,
    i = 0 === e
  if (((t.innerHTML = ''), -1 === e))
    return void (t.innerHTML = `\n      <div class="datenschutz-section">\n      <h2>Datenschutzerklärung</h2>\n      <p>\n        Danke, dass Sie den Fragebogen ausgefüllt haben. Bevor wir Ihnen eine persönliche Rückmeldung geben, müssen wir sicher stellen, dass wir Ihre Daten speichern dürfen. Dafür lesen Sie sich bitte die Datenschutzerklärung durch und stimmen Sie dieser durch Ihre digitale Unterschrift zu.\n      </p>\n        <div class="datenschutz-content">\n         <h3>Projektleitung:</h3>\n        <p>Prof.in Dr. Charlott Rubach & Anne-Kathrin Hirsch</p>\n        <p>Sehr geehrte Lehramtsstudierende,</p>\n        <p>\n          die Digitalisierung und Digitalität im Bildungsbereich erhielten in den letzten Jahren große Aufmerksamkeit. Der kompetente Umgang mit digitalen Medien gehört zum Aufgabenbereich von Lehrkräften. Daher ist es bedeutsam, dass Lehramtsstudierende während ihrer Ausbildung auf diesen Umgang vorbereitet werden. Wir interessieren uns im Rahmen dieser Studie „Open-Digi“ dafür, inwieweit die von uns erstellten Lernerfahrungen zur Förderung digitaler Kompetenzen beitragen.\n        </p>\n        <p>\n          Wir sind Prof. Dr. Charlott Rubach und Anne-Kathrin Hirsch, Bildungsforscherinnen an der Universität Rostock. Unsere Forschungsschwerpunkte sind Digitalisierung, Förderung digitaler Kompetenzen und Gestaltungsmöglichkeiten einer bedarfsorientierten Lehrkräftebildung.\n        </p>\n        <p>\n          Ziel des Projektes ist die Untersuchung von effektiven Lernerfahrungen für die Entwicklung digitaler Kompetenzen. Das Projekt besteht aus mehreren Schritten:\n              </p>\n        <ul>\n          <li>Sie füllen die Befragung zum Open-Digi Projekt aus, welcher der Pre-Diagnostik gilt und zirka 10 Minuten dauert. Alle Befragungen thematisieren ausschließlich Aspekte von digitaler Kompetenz.</li>\n          <li>Ihnen werden auf Grundlage der Diagnostik mehrere Vorschläge gemacht, wie sie eigene Kompetenzen weiterentwickeln können.</li>\n          <li>Sie bearbeiten verschiedene Kurse.</li>\n          <li>Sie durchlaufen die Post-Diagnostik direkt nach Bearbeitung der Kurse.</li>\n          <li>Sie machen eine dritte Befragung, 1 Monat nach Bearbeitung der Kurse.</li>\n        </ul>\n        <p>\n          Ihre Teilnahme an unserer Studie ist freiwillig. Wenn Sie an der Studie teilnehmen, können Sie die Befragung jederzeit abbrechen. In diesem Falle werden die Daten nicht gespeichert.\n          </p>\n          <p>\n          Die Befragung ist anonym. Das heißt, es werden auch ausschließlich anonymisierte Informationen analysiert und im Rahmen wissenschaftlicher Arbeiten veröffentlicht. Es werden keine Informationen gespeichert, die es uns möglich machen, Sie als Person zu identifizieren. Eine Rücknahme Ihres Einverständnisses und damit Löschung Ihrer Daten, nachdem Sie den Fragebogen ausgefüllt und abgegeben haben, ist demnach nicht möglich. Anonymisiert sind auch Daten, die keine persönliche Information mehr enthalten, bspw. Alter, Geschlecht, Lehramtstyp, Fächer und Hochschulsemester.\n        </p>\n        <p>\n          Wir speichern Ihre Antworten und Ihre Angaben (z. B. Alter und Geschlecht). Diese werden bis zum Abschluss der Untersuchung und maximal 10 Jahre auf den Dienstrechnern der Wissenschaftlerinnen aus dem Projekt gespeichert und danach gelöscht.\n        </p>\n        <p>\n          Es erfolgt keine Weitergabe Ihrer Daten an Dritte außerhalb des Forschungsprojektes.\n        </p>\n        <p>\n          Unter folgendem <a href="datenschutz.html" target="_blank">Link</a> finden Sie ausführliche Hinweise zum Schutz Ihrer Daten.\n        </p>\n      </div>\n              <div class="final-inputs">\n          <div class="question">\n            <label for="datum">Datum</label>\n            <input type="date" id="datum" name="datum" \n                  value="${
      new Date().toISOString().split('T')[0]
    }" \n                  readonly required>\n          </div>\n          <div class="question">\n            <label for="unterschrift">Unterschrift</label>\n            <input type="text" id="unterschrift" name="unterschrift" \n                  required placeholder="Vollständiger Name">\n          </div>\n          <div class="agreement-questions">\n            <div class="agreement">\n              <label>\n                  <input type="checkbox" id="datenschutzKenntnis" required>\n    Mir sind die Datenschutzhinweise zur Kenntnis gegeben worden\n            </label>\n          </div>\n            <div class="agreement">\n              <label>\n                <input type="checkbox" id="datenschutzVerarbeitung" required>\n                Ich stimme der Datenverarbeitung zu\n              </label>\n        </div>\n            <div class="agreement">\n              <label>\n                <input type="checkbox" id="teilnahmeEinverstaendnis" required>\n                Ich möchte an der Befragung teilnehmen\n              </label>\n      </div>\n          </div>\n        </div>\n      </div>\n    </div>`)
  if (e < 0 || e >= surveyData.length)
    return (
      console.error(`Invalid section index: ${e}`),
      (currentSection = -1),
      void renderSection(currentSection)
    )
  const a = surveyData[e]
  let s = `<div class="section"><h2>${a.title}</h2>`
  if (
    ('Persönliche Angaben' !== a.title &&
      (s +=
        '<p class="section-instruction">Wie kompetent fühlen Sie sich in der Ausführung der folgenden Aktivitäten...</p>'),
    a.questions.forEach((t, a) => {
      const o = `q${e}_${a}`
      let d = userData[o] || ''
      if (t.dependsOn) {
        if (userData[t.dependsOn.questionId] !== t.dependsOn.value) return
      }
      switch (
        ((s += `<div class="question" id="${o}-container">`),
        (s += `<p>${t.text}</p>`),
        t.type)
      ) {
        case 'radio':
          ;(s += `<div class="radio-group" id="${o}-container">`),
            t.options.forEach((e) => {
              const r = d === e,
                i = n > 1,
                a = userData.t1?.[o],
                l = i ? e === a : r
              if (
                ((s += `<div class="radio-option">\n        <label>\n          <input type="radio" \n                 name="${o}" \n                 value="${e}"\n                 ${
                  l ? 'checked' : ''
                }\n                 ${
                  t.required ? 'required' : ''
                }\n                 ${
                  i ? 'disabled' : ''
                }\n                 onchange="handleTeachingStudentChange(this)">\n          <span class="radio-checkmark"></span>\n          ${e}\n        </label>`),
                'q0_2' === o)
              ) {
                if (
                  ((s += `<div class="conditional-field" \n                 data-condition="${e}"\n                 style="display: ${
                    ('Ja' === e && (i ? 'Ja' === a : l)) ||
                    ('Nein' === e && (i ? 'Nein' === a : l))
                      ? 'block'
                      : 'none'
                  }">`),
                  'Ja' === e)
                ) {
                  const e = i ? userData.t1?.q0_3 : userData.q0_3
                  s += `<div class="question">\n            <label>${
                    surveyData[0].questions[3].text
                  }</label>\n            <select name="q0_3" \n                    ${
                    i ? 'disabled readonly' : ''
                  } \n                    ${
                    surveyData[0].questions[3].required ? 'required' : ''
                  }>\n              <option value="" disabled>Bitte wählen</option>\n              ${surveyData[0].questions[3].options
                    .map(
                      (t) =>
                        `\n                <option value="${t}" ${
                          e === t ? 'selected' : ''
                        }>${t}</option>\n              `
                    )
                    .join('')}\n            </select>\n            ${
                    i ? `<input type="hidden" name="q0_3" value="${e}">` : ''
                  }\n          </div>`
                  const t = i ? userData.t1?.q0_4 : userData.q0_4
                  s += `<div class="question">\n            <label>${
                    surveyData[0].questions[4].text
                  }</label>\n            <input type="text" \n                   name="q0_4" \n                   value="${
                    t || ''
                  }"\n                   ${
                    i ? 'readonly disabled' : ''
                  }\n                   ${
                    surveyData[0].questions[4].required ? 'required' : ''
                  }>\n          </div>`
                }
                if ('Nein' === e) {
                  const e = i ? userData.t1?.q0_5 : userData.q0_5
                  s += `<div class="question">\n            <label>${
                    surveyData[0].questions[5].text
                  }</label>\n            <input type="text" \n                   name="q0_5" \n                   value="${
                    e || ''
                  }"\n                   ${
                    i ? 'readonly disabled' : ''
                  }\n                   ${
                    surveyData[0].questions[5].required ? 'required' : ''
                  }>\n          </div>`
                }
                s += '</div>'
              }
              s += '</div>'
            }),
            (s += '</div>')
          break
        case 'dropdown':
          const e = r && i ? userData.t1[o] : d
          ;(s += `<select name="${o}" \n                        ${
            t.required ? 'required' : ''
          }\n                        ${r && i ? 'disabled' : ''}>`),
            (s += `<option value="" disabled ${
              e ? '' : 'selected'
            }>Bitte wählen</option>`),
            t.options.forEach((t) => {
              s += `<option value="${t}" ${
                e === t ? 'selected' : ''
              }>${t}</option>`
            }),
            (s += '</select>'),
            r && i && (s += `<input type="hidden" name="${o}" value="${e}">`)
          break
        case 'number':
          const a = r && i ? userData.t1[o] : d,
            l = t.text.includes('Fachsemester')
          s += `\n          <input type="${
            t.text.includes('Jahr') ? 'text' : 'number'
          }" \n                 name="${o}" \n                 value="${
            a || ''
          }"\n                 min="${t.min || 1}"\n                 max="${
            t.max || 99
          }"\n                 ${
            t.text.includes('Jahr') ? 'oninput="validateYear(this)"' : ''
          }\n                 ${
            r && i && l ? 'readonly disabled' : r && i ? 'readonly' : ''
          }\n                 ${
            t.required ? 'required' : ''
          }\n                 placeholder="${t.placeholder || ''}">`
          break
        case 'text':
          const c = r && i ? userData.t1[o] : d
          s += `<input type="text" \n                       name="${o}" \n                       value="${
            c || ''
          }"\n                       ${
            t.required ? 'required' : ''
          }\n                       ${r && i ? 'readonly' : ''}>`
          break
        case 'scale':
          s += '<div class="rating-scale">'
          for (let e = 0; e <= 6; e++) {
            const n = d === e.toString()
            s += `\n            <label class="scale-label">\n              <input type="radio" \n                     name="${o}" \n                     value="${e}" \n                     ${
              n ? 'checked' : ''
            }\n                     ${
              t.required ? 'required' : ''
            }>\n              <span class="scale-button">${e}</span>\n            </label>`
          }
          s +=
            '</div>\n                <div class="scale-labels">\n                  <span>gar nicht kompetent</span>\n                  <span>ausgesprochen kompetent</span>\n                </div>'
      }
      s += '</div>'
    }),
    i &&
      r &&
      ((s +=
        "\n      <script>\n        document.addEventListener('DOMContentLoaded', function() {\n          const form = document.getElementById('surveyForm')\n          form.querySelectorAll('input, select, textarea').forEach(el => {\n            if (!el.name.includes('q0_6') && !el.name.includes('t2_course_feedback')) {\n              el.readOnly = true\n              el.disabled = true\n            }\n          })\n        })\n      </script>\n    "),
      (s += `\n      <div class="t2-feedback">\n        <p>Wie fandest du deine absolvierten Kurse in ILIAS in Bezug auf Inhalt und Struktur? Was hast du für dich mitgenommen? Was war hilfreich für dich?</p>\n        <textarea name="t2_course_feedback" \n                  placeholder="Bitte geben Sie hier Ihr Feedback ein..." \n                  required>${
        userData.t2?.t2_course_feedback || ''
      }</textarea>\n      </div>`)),
    (s += '</div>'),
    (t.innerHTML = s),
    document.querySelectorAll('.scale-button').forEach((e) => {
      e.addEventListener('click', handleScaleClick),
        e.addEventListener('keydown', handleScaleKeydown)
    }),
    i)
  ) {
    const e = document.querySelector('input[name="q0_2"]:checked')
    e && handleTeachingStudentChange(e)
  }
  updateNavigationButtons()
}
function markUnansweredQuestions() {
  const e = document.getElementById('surveyForm')
  if (!e) return null
  const t = e.querySelectorAll('[required]')
  let n = null
  return (
    t.forEach((t) => {
      const r = t.closest('.question') || t.parentElement
      if (!r) return
      ;('radio' === t.type && !e.querySelector(`[name="${t.name}"]:checked`)) ||
      ('checkbox' === t.type && !t.checked) ||
      ('radio' !== t.type && 'checkbox' !== t.type && !t.value.trim())
        ? (r.classList.add('unanswered'),
          (r.style.animation =
            'shake 0.82s cubic-bezier(.36,.07,.19,.97) both'),
          n || (n = r))
        : (r.classList.remove('unanswered'), (r.style.animation = ''))
    }),
    n && n.scrollIntoView({ behavior: 'smooth', block: 'center' }),
    n
  )
}
function removeUnansweredMarkers() {
  document.querySelectorAll('.question.unanswered').forEach((e) => {
    e.classList.remove('unanswered')
  })
}
document.addEventListener('DOMContentLoaded', function () {
  loadUserData(),
    renderSection(currentSection),
    updateProgressBar(),
    setupEventListeners(),
    checkResumeToken()
}),
  (window.onload = function () {
    const e = 'true' === sessionStorage.getItem('startNewAttempt'),
      t = parseInt(sessionStorage.getItem('attemptNumber') || '1')
    console.log('Loading survey with:', {
      isNewAttempt: e,
      attemptNumber: t,
      userId: sessionStorage.getItem('userId'),
    }),
      e &&
        (console.log('Starting new attempt, resetting state'),
        (userData = null),
        (currentSection = -1),
        (initialScores = {}),
        (updatedScores = {}))
    const n = 'true' === sessionStorage.getItem('surveyCompleted'),
      r = sessionStorage.getItem('userId')
    if (n && r) {
      const e = document.getElementById('surveyForm')
      e && (e.innerHTML = ''),
        fetch(`/api/user-data/${r}`)
          .then((e) => {
            if (!e.ok) throw new Error(`HTTP error! status: ${e.status}`)
            return e.json()
          })
          .then((e) => {
            if (!e) throw new Error('No data received')
            ;(userData = e), showResults()
          })
          .catch((e) => {
            console.error('Error loading completed survey:', e),
              sessionStorage.removeItem('surveyCompleted'),
              (currentSection = -1),
              initializeSections()
          })
    } else loadUserData(e)
  }),
  'undefined' == typeof surveyData &&
    console.error('surveyData ist nicht definiert...')
const styleSheet = document.createElement('style')
function handleScaleClick(e) {
  const t = e.target.previousElementSibling
  t &&
    'radio' === t.type &&
    ((t.checked = !0), t.dispatchEvent(new Event('change')))
}
function handleScaleKeydown(e) {
  if (' ' === e.key || 'Enter' === e.key) {
    e.preventDefault()
    const t = e.target.previousElementSibling
    t &&
      'radio' === t.type &&
      ((t.checked = !0), t.dispatchEvent(new Event('change'))),
      e.target.setAttribute('aria-checked', 'true')
  }
}
function handleTeachingStudentChange(e) {
  const t = e.closest('.radio-group'),
    n = e.value,
    r = parseInt(sessionStorage.getItem('attemptNumber') || '1') > 1,
    i = document.getElementById('surveyForm')
  t.querySelectorAll('.conditional-field').forEach((e) => {
    ;(e.style.display = 'none'),
      r ||
        e.querySelectorAll('input, select').forEach((e) => {
          'radio' !== e.type && 'checkbox' !== e.type && (e.value = ''),
            (e.required = !1)
        })
  })
  const a = t.querySelector(`.conditional-field[data-condition="${n}"]`)
  a &&
    ((a.style.display = 'block'),
    r
      ? a.querySelectorAll('input, select').forEach((e) => {
          const t = e.name,
            n = userData.t1[t] || ''
          'radio' === e.type || 'checkbox' === e.type
            ? (e.checked = e.value === n)
            : (e.value = n),
            'q0_4' === t
              ? ((e.readOnly = !1), (e.style.backgroundColor = '#fff'))
              : ((e.readOnly = !0), (e.style.backgroundColor = '#f0f0f0')),
            'SELECT' === e.tagName &&
              ((e.disabled = !0),
              !e.nextElementSibling?.name === t &&
                e.insertAdjacentHTML(
                  'afterend',
                  `<input type="hidden" name="${t}" value="${n}">`
                ))
        })
      : a.querySelectorAll('input, select').forEach((e) => {
          ;(e.required = !0),
            (e.disabled = !1),
            (e.readOnly = !1),
            (e.style.backgroundColor = '')
        })),
    r || (i.reportValidity(), setTimeout(() => saveSectionData(!1), 300))
}
function calculateCategoryScores(e) {
  const t = {}
  return (
    surveyData.forEach((n, r) => {
      if ('Persönliche Angaben' !== n.title && 'Abschluss' !== n.title) {
        let i = 0,
          a = 0
        n.questions.forEach((t, n) => {
          const s = `q${r}_${n}`
          if (e[s] && 'scale' === t.type) {
            const t = parseInt(e[s], 10)
            isNaN(t) || ((i += t), a++)
          }
        }),
          (t[n.title] = a > 0 ? Math.round((i / (6 * a)) * 100) : 0)
      }
    }),
    t
  )
}
function createCompetencyChart1(e, t) {
  const n = document.getElementById('competencyChart1'),
    r = document.getElementById('descriptionBox1')
  if (!n || !r)
    return void console.error('Chart canvas or description box not found')
  window.competencyChart1 instanceof Chart && window.competencyChart1.destroy()
  const i = n.getContext('2d'),
    a = new Set([...Object.keys(e), ...Object.keys(t)]),
    s = Array.from(a),
    o = s.map((e) => labelMap[e] || e)
  let d = -1
  const l = [
    {
      label: 'Initial Score',
      data: s.map((t) => e[t] || 0),
      backgroundColor: s.map((e) => getLighterColor(colorMap[e] || '#999999')),
      borderColor: s.map((e) => colorMap[e] || '#999999'),
      borderWidth: 1,
    },
  ]
  if (
    (Object.keys(t).length > 0 &&
      l.push({
        label: 'Updated Score',
        data: s.map((e) => t[e] || 0),
        backgroundColor: s.map((e) => colorMap[e] || '#999999'),
        borderColor: s.map((e) => colorMap[e] || '#999999'),
        borderWidth: 1,
      }),
    (window.competencyChart1 = new Chart(i, {
      type: 'bar',
      data: { labels: o, datasets: l },
      options: {
        responsive: !0,
        maintainAspectRatio: !1,
        scales: {
          y: {
            beginAtZero: !0,
            max: 100,
            title: { display: !0, text: 'Score (%)' },
          },
          x: { ticks: { autoSkip: !1, maxRotation: 45, minRotation: 45 } },
        },
        plugins: {
          legend: { display: l.length > 1 },
          tooltip: {
            callbacks: {
              title: (e) => {
                const t = e[0].dataIndex
                return s[t] || e[0].label
              },
              label: (e) => `${e.dataset.label}: ${e.parsed.y}%`,
            },
          },
        },
        onHover: (e, t) => {
          if (t.length > 0) {
            const e = t[0].index
            if (e !== d) {
              d = e
              const t = s[e]
              updateDescriptionBox(r, t, competencyDescriptions[t])
            }
          }
        },
      },
    })),
    window.competencyChart1.update(),
    s.length > 0)
  ) {
    const e = s[0]
    updateDescriptionBox(r, e, competencyDescriptions[e])
  }
  r.style.minHeight = '150px'
}
async function showResults() {
  const e = sessionStorage.getItem('userId')
  if (e) {
    sessionStorage.setItem('surveyCompleted', 'true')
    try {
      const t = await fetch(`/api/user-data/${e}`)
      if (!t.ok) throw new Error('Failed to fetch user data')
      const n = await t.json()
      ;(initialScores = n.initialScores || {}),
        (updatedScores = n.updatedScores || {})
      const r = parseInt(sessionStorage.getItem('attemptNumber'), 10) || 1,
        i =
          Object.keys(updatedScores).length > 0 ? updatedScores : initialScores
      let a = `\n      <h2>Ihr Kompetenzscore beträgt ${calculateCompetenzScore(
        i
      )}%</h2>\n      <p>Dieser Score repräsentiert Ihren aktuellen Stand in digitalen Kompetenzen basierend auf Ihren Antworten.</p>\n      <h3>Kompetenzdiagramm</h3>\n      <p>Das folgende Diagramm zeigt Ihre Scores in verschiedenen Kompetenzbereichen.${
        Object.keys(updatedScores).length > 0
          ? ' Die helleren Balken repräsentieren Ihre Ergebnisse nach der ersten Befragung (T1), während die dunkleren Balken Ihre Ergebnisse nach der aktuellen Befragung (T2) darstellen.'
          : ' Die Balken repräsentieren Ihre Ergebnisse nach der ersten Befragung.'
      }</p>\n      <div class="attention-box">\n        <span class="info-icon">ℹ️</span>\n        Bewegen Sie den Mauszeiger über die Balken, um detaillierte Informationen zu den einzelnen Kompetenzen zu erhalten.\n      </div>\n      <div style="height: 300px; width: 100%;">\n        <canvas id="competencyChart1"></canvas>\n      </div>\n      <div id="descriptionBox1"></div>\n      <div style="display: flex; justify-content: center; margin-top: 20px;">\n        <button id="downloadChart" class="btn btn-primary" style="background-color: #004A99; color: white; border: none; padding: 15px 30px; cursor: pointer; border-radius: 5px; font-size: 18px;">\n          Diagramm herunterladen\n        </button>\n      </div>\n      <hr>`
      1 === r
        ? (a +=
            '\n        <p>Basierend auf deinen Ergebnissen wähle nun einen oder mehrere Kompetenzbereiche aus, in denen du dich weiterbilden möchtest. Wir haben für jeden Kompetenzbereich mehrere Mikrofortbildungen entwickelt, die du absolvieren kannst. Die Auswahl der Kompetenzbereiche kannst du anhand verschiedener Motive selbst vornehmen: Möchtest du den Kompetenzbereich mit dem geringsten Score verbessern, oder interessierst du dich besonders für einen Kompetenzbereich bzw. ist ein Thema gerade sehr aktuell bei dir.</p>\n        <p>Schaue dir nun die Kompetenzbereiche an und entscheide dich für 1 bis 2.</p>\n        <p><strong>Welche Strategie/n hast du bei der Auswahl der Kompetenzbereiche genutzt?</strong></p>\n        <textarea id="t1OpenEndedResponse" rows="4" style="width:100%;" required></textarea>\n        <button id="submitT1OpenEndedResponse" class="btn btn-primary">Absenden</button>')
        : r > 1 &&
          (a +=
            '\n        <p>Jetzt hast du den Vergleich zwischen deiner Kompetenzeinschätzung vor und nach der Absolvierung der ILIAS Kurse. Wenn der helle Balken niedriger ist als der dunklere, bedeutet das, dass du dich nach den ILIAS-Kursen besser einschätzt als zuvor. Ist der helle Balken höher als der dunklere ist es genau umgekehrt. Es ist auch möglich, dass du dich bei beiden Befragungen in gewissen Kompetenzbereichen gleich eingeschätzt hast: dann sind beide Balken gleich hoch.</p>\n        <p><strong>Wie haben sich deine Kompetenzüberzeugungen nun verändert? Beschreibe, was du im Diagramm siehst und teile uns mit, welche Schlüsse du aus deiner Lernerfahrung ziehst.</strong></p>\n        <textarea id="t2OpenEndedResponse" rows="4" style="width:100%;" required></textarea>\n        <button id="submitT2OpenEndedResponse" class="btn btn-primary">Absenden</button>'),
        (document.getElementById('surveyForm').innerHTML = a),
        window.scrollTo({ top: 0, behavior: 'smooth' }),
        (document.getElementById('progressBar').style.display = 'none'),
        (document.getElementById('progressText').style.display = 'none'),
        Object.keys(updatedScores).length > 0
          ? createCompetencyChart1(initialScores, updatedScores)
          : createCompetencyChart1(initialScores, {}),
        document
          .getElementById('downloadChart')
          .addEventListener('click', downloadChart),
        1 === r
          ? document
              .getElementById('submitT1OpenEndedResponse')
              .addEventListener('click', submitT1OpenEndedResponse)
          : document
              .getElementById('submitT2OpenEndedResponse')
              .addEventListener('click', submitT2OpenEndedResponse),
        hideNavigationButtons()
    } catch (e) {
      console.error('Error displaying results:', e),
        alert(
          'Es gab einen Fehler beim Laden der Ergebnisse. Bitte versuchen Sie es später erneut.'
        )
    }
  } else console.error('No userId found in sessionStorage.')
}
function showCourseLinks() {
  const e =
    document.getElementById('submitT1OpenEndedResponse') ||
    document.getElementById('submitT2OpenEndedResponse')
  e
    ? e.insertAdjacentHTML(
        'afterend',
        '\n    <div class="course-links">\n      <p>Nun ist es Zeit, deine digitalen Kompetenzen zu fördern. Hier kommst du zu den Kursen der jeweiligen Kompetenzbereiche. Klicke einfach auf den Link und du wirst zu ILIAS weitergeleitet.</p>\n      <ul>\n        <li><a href="https://ilias.uni-rostock.de/goto.php?target=crs_121177&client_id=ilias_hro" target="_blank">Suchen, Verarbeiten und Aufbewahren</a></li>\n        <li><a href="https://ilias.uni-rostock.de/goto.php?target=crs_122050&client_id=ilias_hro" target="_blank">Analysieren und Reflektieren</a></li>\n        <li><a href="https://ilias.uni-rostock.de/goto.php?target=crs_120680&client_id=ilias_hro" target="_blank">Kommunikation & Kollaboration</a></li>\n        <li><a href="https://ilias.uni-rostock.de/goto.php?target=crs_122048&client_id=ilias_hro" target="_blank">Produzieren und Präsentieren</a></li>\n        <li><a href="https://ilias.uni-rostock.de/goto.php?target=crs_122049&client_id=ilias_hro" target="_blank">Problemlösen und Handeln</a></li>\n        <li><a href="https://ilias.uni-rostock.de/goto.php?target=crs_122051&client_id=ilias_hro" target="_blank">Schützen und sicher Agieren</a></li>\n      </ul>\n    </div>\n  '
      )
    : console.error('Submit button not found, cannot insert course links.')
}
function calculateCompetenzScore(e) {
  const t = Object.values(e)
  if (0 === t.length) return 0
  const n = t.reduce((e, t) => e + t, 0)
  return Math.round(n / t.length)
}
function getLighterColor(e) {
  if (!e || 7 !== e.length || '#' !== e[0]) return '#cccccc'
  let t = parseInt(e.slice(1, 3), 16),
    n = parseInt(e.slice(3, 5), 16),
    r = parseInt(e.slice(5, 7), 16)
  return (
    (t = Math.min(255, t + Math.floor(0.7 * (255 - t)))),
    (n = Math.min(255, n + Math.floor(0.7 * (255 - n)))),
    (r = Math.min(255, r + Math.floor(0.7 * (255 - r)))),
    `#${t.toString(16).padStart(2, '0')}${n.toString(16).padStart(2, '0')}${r
      .toString(16)
      .padStart(2, '0')}`
  )
}
function getContrastColor(e) {
  return (299 * parseInt(e.slice(1, 3), 16) +
    587 * parseInt(e.slice(3, 5), 16) +
    114 * parseInt(e.slice(5, 7), 16)) /
    1e3 >=
    128
    ? 'black'
    : 'white'
}
function updateDescriptionBox(e, t, n) {
  const r = colorMap[t] || '#999999',
    i = getLighterColor(r)
  ;(e.innerHTML = `\n    <h3>${t}</h3>\n    <p>${
    n || 'Beschreibung nicht verfügbar.'
  }</p>\n  `),
    (e.style.backgroundColor = i),
    (e.style.padding = '15px'),
    (e.style.borderRadius = '5px'),
    (e.style.border = `2px solid ${r}`),
    (e.style.color = getContrastColor(i))
}
function downloadChart(e) {
  e.preventDefault()
  const t = document.getElementById('competencyChart1')
  if (t) {
    const e = document.createElement('a')
    ;(e.download = 'kompetenz-diagramm.png'),
      (e.href = t.toDataURL()),
      e.click()
  }
}
function submitFinalData(e) {
  if ((e.preventDefault(), !validateDatenschutz())) return !1
  saveSectionData(!0), showResults()
}
;(styleSheet.textContent =
  '\n  .radio-option input[type="radio"]:disabled:checked + .radio-checkmark {\n    background-color: #0066cc;\n    border-color: #0066cc;\n  }\n  .radio-option input[type="radio"]:disabled + .radio-checkmark {\n    opacity: 0.7;\n    cursor: not-allowed;\n  }\n'),
  document.head.appendChild(styleSheet),
  (window.handleScaleClick = handleScaleClick),
  (window.handleScaleKeydown = handleScaleKeydown),
  (window.submitFinalData = submitFinalData),
  (window.showResults = showResults)
