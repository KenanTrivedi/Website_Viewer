function setupCodeGenerationForm() {
  const form = document.getElementById('generateCodeForm')
  if (form) {
    form.addEventListener('submit', handleCodeGenerationFormSubmission)
  }
}

function setupLoginPageFunctionality() {
  const iliasInputs = document.querySelectorAll(
    'input[name="iliasCourseCompleted"]'
  )
  const secondQuestion = document.getElementById('secondQuestion')
  const choiceContainer = document.getElementById('choiceContainer')
  const surveyOptionInput = document.getElementById('surveyOption')
  const codeInputField = document.getElementById('codeInput')
  const coursesList = document.getElementById('coursesList')
  const loginButton = document.getElementById('loginButton')
  const generateCodeButton = document.getElementById('generateCodeButton')

  function createChoiceCard(value, heading, text, iconClass) {
    const card = document.createElement('div')
    card.classList.add('choice-card')
    card.setAttribute('data-value', value)

    const icon = document.createElement('i')
    icon.className = `${iconClass} card-icon`

    const h3 = document.createElement('h3')
    h3.textContent = heading

    const p = document.createElement('p')
    p.textContent = text

    card.appendChild(icon)
    card.appendChild(h3)
    card.appendChild(p)
    choiceContainer.appendChild(card)
  }

  if (
    iliasInputs.length &&
    secondQuestion &&
    choiceContainer &&
    surveyOptionInput
  ) {
    iliasInputs.forEach((radio) => {
      radio.addEventListener('change', function () {
        const selectedValue = this.value
        choiceContainer.innerHTML = ''
        secondQuestion.style.display = 'block'
        surveyOptionInput.value = ''
        codeInputField.style.display = 'none'
        coursesList.style.display = 'none'
        if (loginButton) loginButton.style.display = 'none'
        if (generateCodeButton) generateCodeButton.style.display = 'none'

        if (selectedValue === 'no') {
          createChoiceCard(
            'register',
            'Ich möchte mich neu registrieren',
            'Neuen Code generieren',
            'fas fa-user-plus'
          )
          createChoiceCard(
            'continue',
            'Ich möchte meinen Fragebogen fortsetzen',
            'Mit Code Fragebogen fortsetzen',
            'fas fa-play-circle'
          )
        } else if (selectedValue === 'yes') {
          createChoiceCard(
            'redo',
            'Ich möchte den Fragebogen erneut ausfüllen',
            'Neues Mal ausfüllen',
            'fas fa-redo-alt'
          )
          createChoiceCard(
            'continue',
            'Ich möchte meinen Fragebogen fortsetzen',
            'Mit Code Fragebogen fortsetzen',
            'fas fa-play-circle'
          )
          createChoiceCard(
            'followup',
            'Follow-up Befragung (nach einem Monat)',
            'T3-Follow-up durchführen',
            'fas fa-clock'
          )
        }

        ;(function setupChoiceCardHandlers() {
          const cards = document.querySelectorAll('.choice-card')
          cards.forEach((card) => {
            card.addEventListener('click', function () {
              cards.forEach((c) => c.classList.remove('selected'))
              this.classList.add('selected')
              const value = this.getAttribute('data-value')
              surveyOptionInput.value = value
              handleOptionSelection(value)
            })
          })
        })()
      })
    })

    if (generateCodeButton) {
      generateCodeButton.addEventListener('click', function () {
        window.location.href = 'generateCode.html'
      })
    }
  }

  function handleOptionSelection(optionValue) {
    const courses = document.getElementById('courses')
    if (optionValue === 'register') {
      codeInputField.style.display = 'none'
      coursesList.style.display = 'none'
      if (loginButton) loginButton.style.display = 'none'
      if (generateCodeButton) generateCodeButton.style.display = 'block'
      if (courses) {
        courses.required = false
        courses.disabled = true
      }
    } else if (optionValue === 'redo') {
      codeInputField.style.display = 'block'
      coursesList.style.display = 'block'
      if (loginButton) loginButton.style.display = 'block'
      if (generateCodeButton) generateCodeButton.style.display = 'none'
      if (courses) {
        courses.required = true
        courses.disabled = false
      }
    } else if (optionValue === 'continue') {
      codeInputField.style.display = 'block'
      coursesList.style.display = 'none'
      if (loginButton) loginButton.style.display = 'block'
      if (generateCodeButton) generateCodeButton.style.display = 'none'
      if (courses) {
        courses.required = false
        courses.disabled = true
      }
    } else {
      // 'followup' or any other possibility
      codeInputField.style.display = 'block'
      coursesList.style.display = 'none'
      if (loginButton) loginButton.style.display = 'block'
      if (generateCodeButton) generateCodeButton.style.display = 'none'
      if (courses) {
        courses.required = false
        courses.disabled = true
      }
    }
  }
}

function setupNavigationButtons() {
  const buttonIds = ['letsGetStarted', 'startSurvey']
  buttonIds.forEach((btnId) => {
    const btn = document.getElementById(btnId)
    if (btn) {
      btn.addEventListener('click', function () {
        window.location.href = 'login.html'
      })
    }
  })
}

async function handleCodeGenerationFormSubmission(e) {
  e.preventDefault()
  const form = e.target
  if (!validateFormInputs(form)) return

  sessionStorage.clear()
  const generatedCode = generateCodeFromForm(form)

  const submitBtn = form.querySelector('button[type="submit"]')
  submitBtn.disabled = true
  submitBtn.textContent = 'Registrierung läuft...'

  try {
    const responseData = await submitForm('/register', { code: generatedCode })
    if (responseData.ok) {
      sessionStorage.setItem('userId', responseData.userId)
      sessionStorage.setItem('generatedCode', generatedCode)

      await Swal.fire({
        icon: 'success',
        title: 'Erfolg',
        text: 'Dein Code wurde erfolgreich registriert!',
        timer: 2000,
        showConfirmButton: false,
      })
      window.location.href = 'codeConfirmation.html'
    } else if (responseData.isDuplicateCode) {
      await Swal.fire({
        icon: 'error',
        title: 'Code bereits vergeben',
        text: 'Dieser Code existiert bereits. Bitte verwenden Sie stattdessen die Initialen Ihrer Erziehungsberechtigten für den zweiten Teil des Codes.',
      })
      updateParentFieldForFather()
    } else {
      await Swal.fire({
        icon: 'error',
        title: 'Registrierungsfehler',
        text: `Fehler beim Registrieren des Codes: ${
          responseData.message || 'Unbekannter Fehler'
        }`,
      })
    }
  } catch (err) {
    console.error('Error registering code:', err)
    await Swal.fire({
      icon: 'error',
      title: 'Registrierungsfehler',
      text: 'Es gab einen Fehler bei der Registrierung. Bitte versuchen Sie es später erneut.',
    })
  } finally {
    submitBtn.disabled = false
    submitBtn.textContent = 'Code Generieren'
  }
}

function updateParentFieldForFather() {
  const label = document.getElementById('parentLabel')
  const instructions = document.getElementById('parentInstructions')
  const inputField = document.getElementById('parentName')
  if (label && instructions && inputField) {
    label.textContent = 'Vorname des Vaters / Ihres Erziehungsberechtigten'
    instructions.textContent =
      'Bitte geben Sie den ersten und letzten Buchstaben des Vornamens Ihres Vaters ein. Bsp.: Thomas = TS'
    inputField.value = ''
    inputField.focus()
  }
}

function validateFormInputs(form) {
  const textInputs = form.querySelectorAll('input[type="text"]')
  let isValid = true

  textInputs.forEach((input) => {
    const value = input.value.trim()
    const labelText = input.previousElementSibling.textContent.trim()

    if (value.length !== 2) {
      Swal.fire({
        icon: 'error',
        title: 'Ungültige Eingabe',
        text: `Bitte geben Sie genau zwei Zeichen für ${labelText} ein.`,
      })
      isValid = false
      return
    }

    switch (input.id) {
      case 'birthplace':
      case 'parentName':
      case 'school':
        if (!/^[A-Za-z]{2}$/.test(value)) {
          Swal.fire({
            icon: 'error',
            title: 'Ungültige Eingabe',
            text: `${labelText} muss aus zwei Buchstaben bestehen.`,
          })
          isValid = false
        }
        break
      case 'birthday':
        const dayNumber = parseInt(value, 10)
        if (!/^\d{2}$/.test(value) || dayNumber < 1 || dayNumber > 31) {
          Swal.fire({
            icon: 'error',
            title: 'Ungültige Eingabe',
            text: `${labelText} muss eine gültige Zahl zwischen 01 und 31 sein.`,
          })
          isValid = false
        }
        break
      default:
        break
    }
  })

  return isValid
}

function generateCodeFromForm(form) {
  return (
    document.getElementById('birthplace').value.toUpperCase() +
    '-' +
    document.getElementById('parentName').value.toUpperCase() +
    '-' +
    document.getElementById('birthday').value +
    '-' +
    document.getElementById('school').value.toUpperCase()
  )
}

async function submitForm(url, data) {
  try {
    const res = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(data),
    })
    if (!res.ok) {
      const errorData = await res.json()
      return { ok: false, ...errorData }
    }
    const successData = await res.json()
    return { ok: true, ...successData }
  } catch (err) {
    console.error('Error submitting form:', err)
    throw err
  }
}

function handleLoginFormSubmission() {
  const loginForm = document.getElementById('loginForm')
  if (loginForm) {
    loginForm.addEventListener('submit', function (event) {
      event.preventDefault()
      handleLogin()
    })
  }
}

async function handleLogin() {
  const surveyOption = document.getElementById('surveyOption')?.value
  let loginCodeValue = document.getElementById('loginCode')?.value.trim() || ''
  const coursesValue = document.getElementById('courses')?.value.trim() || ''

  if (!surveyOption) {
    Swal.fire({
      icon: 'error',
      title: 'Fehler',
      text: 'Bitte wählen Sie eine Option aus.',
    })
    return
  }

  if (surveyOption === 'register') {
    window.location.href = 'generateCode.html'
    return
  }

  if (!loginCodeValue) {
    Swal.fire({
      icon: 'error',
      title: 'Fehler',
      text: 'Bitte geben Sie Ihren persönlichen Code ein.',
    })
    return
  }

  if (surveyOption === 'redo' && !coursesValue) {
    Swal.fire({
      icon: 'error',
      title: 'Fehler',
      text: 'Bitte geben Sie die absolvierten Kurse an.',
    })
    return
  }

  const loginBtn = document.getElementById('loginButton')
  const generateBtn = document.getElementById('generateCodeButton')
  if (loginBtn) {
    loginBtn.disabled = true
    loginBtn.textContent = 'Login läuft...'
  }
  if (generateBtn) {
    generateBtn.disabled = true
  }

  try {
    let payload = { code: loginCodeValue }
    if (surveyOption === 'redo') {
      payload.courses = coursesValue
      payload.startNewAttempt = true
      payload.attemptType = 'T2'
    } else if (surveyOption === 'followup') {
      payload.startNewAttempt = true
      payload.attemptType = 'T3'
    } else if (surveyOption === 'continue') {
      payload.startNewAttempt = false
    } else if (surveyOption === 'register') {
      payload.startNewAttempt = true
    }

    const resp = await fetch('/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload),
    })
    const data = await resp.json()

    if (resp.ok) {
      sessionStorage.clear()
      sessionStorage.setItem('userId', data.userId)
      sessionStorage.setItem('isComplete', data.isComplete)

      if (surveyOption === 'followup') {
        sessionStorage.setItem('attemptNumber', '3')
        sessionStorage.setItem('currentSection', '0')
        sessionStorage.setItem('startNewAttempt', 'true')
        console.log('Starting T3 attempt - section:', 0)
      } else if (surveyOption === 'redo') {
        sessionStorage.setItem('attemptNumber', '2')
        sessionStorage.setItem('currentSection', '0')
        sessionStorage.setItem('startNewAttempt', 'true')
        console.log('Starting T2 attempt - section:', 0)
      } else if (surveyOption === 'register' || payload.startNewAttempt) {
        sessionStorage.setItem('attemptNumber', '1')
        sessionStorage.setItem('currentSection', '0')
        sessionStorage.setItem('startNewAttempt', 'true')
        console.log('Starting new attempt - section:', 0)
      } else {
        // 'continue'
        sessionStorage.setItem('attemptNumber', '1')
        sessionStorage.setItem('currentSection', data.currentSection || '0')
        sessionStorage.setItem('startNewAttempt', 'false')
        console.log('Continuing attempt - section:', data.currentSection || '0')
      }

      window.location.href = 'survey.html'
    } else {
      await Swal.fire({
        icon: 'error',
        title: 'Login fehlgeschlagen',
        text: data.message,
      })
    }
  } catch (err) {
    console.error('Login error:', err)
    await Swal.fire({
      icon: 'error',
      title: 'Login Fehler',
      text: 'Fehler beim Einloggen. Bitte versuchen Sie es später erneut.',
    })
  } finally {
    if (loginBtn) {
      loginBtn.disabled = false
      loginBtn.textContent = 'Weiter'
    }
    if (generateBtn) {
      generateBtn.disabled = false
    }
  }
}

function setupLogoutFunctionality() {
  const logoutBtn = document.getElementById('logoutButton')
  if (logoutBtn) {
    logoutBtn.addEventListener('click', function () {
      sessionStorage.clear()
      window.location.href = 'login.html'
    })
  }
}

function isNewUser() {
  return sessionStorage.getItem('isNewUser') === 'true'
}

function initializeFlatpickr() {
  if (typeof flatpickr === 'function') {
    flatpickr('#birthyear', {
      dateFormat: 'Y',
      maxDate: new Date().getFullYear().toString(),
      minDate: '1900',
      defaultDate: '2000',
    })
  } else {
    console.warn(
      'Flatpickr ist nicht geladen. Die Funktionalität des Datumswählers kann eingeschränkt sein.'
    )
  }
}

function displayGeneratedCode() {
  const codeTextEl = document.getElementById('codeText')
  const generatedCode = sessionStorage.getItem('generatedCode')
  if (codeTextEl && generatedCode) {
    codeTextEl.textContent = generatedCode
  } else if (codeTextEl) {
    codeTextEl.textContent = 'Kein Code verfügbar oder Sitzung abgelaufen.'
  }
}

function setupStartSurveyButton() {
  const startSurveyButton = document.getElementById('startSurveyButton')
  if (startSurveyButton) {
    startSurveyButton.addEventListener('click', function () {
      window.location.href = 'survey.html'
    })
  }
}

function loadStoredSurveyData() {
  const form = document.getElementById('surveyForm')
  const storedData = sessionStorage.getItem('surveyData')
  if (form && storedData) {
    populateFormFields(form, JSON.parse(storedData))
  }
}

function populateFormFields(form, data) {
  Object.entries(data).forEach(([key, value]) => {
    const field = form.querySelector(`[name="${key}"]`)
    if (field) {
      if (field.type === 'radio') {
        const radio = form.querySelector(`[name="${key}"][value="${value}"]`)
        if (radio) {
          radio.checked = true
        }
      } else {
        field.value = value
      }
    }
  })
}

function saveUserData(userId, formData, isComplete = false) {
  const categoryScores = calculateCategoryScores(formData)
  const formDataObj = Object.fromEntries(new FormData(surveyForm))
  fetch('/api/save-user-data', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      userId,
      data: formData,
      unterschrift: formDataObj.unterschrift,
      isComplete,
      categoryScores,
    }),
  })
    .then((res) => {
      if (!res.ok) {
        throw new Error('Failed to save data')
      }
      return res.json()
    })
    .then((data) => {
      sessionStorage.setItem('surveyData', JSON.stringify(formData))
      sessionStorage.setItem(
        'initialScores',
        JSON.stringify(data.initialScores)
      )
      sessionStorage.setItem(
        'updatedScores',
        JSON.stringify(data.updatedScores)
      )
    })
    .catch((err) => {
      console.error('Fehler beim Speichern der Benutzerdaten:', err)
      // Swal.fire({
      //   icon: 'error',
      //   title: 'Speicherfehler',
      //   text: 'Es gab einen Fehler beim Speichern Ihrer Daten. Bitte versuchen Sie es später erneut.',
      // })
    })
}

function calculateCategoryScores(dataObj) {
  const scores = {}
  // Make sure surveyData is available
  if (typeof surveyData === 'undefined') {
    console.error(
      'surveyData ist nicht definiert. Bitte stellen Sie sicher, dass es geladen ist, bevor calculateCategoryScores verwendet wird.'
    )
    return scores
  }

  surveyData.forEach((section, sIndex) => {
    if (section.title !== 'Persönliche Angaben') {
      let sum = 0
      let count = 0
      section.questions.forEach((question, qIndex) => {
        const fieldName = `q${sIndex}_${qIndex}`
        if (dataObj[fieldName] && question.type === 'scale') {
          sum += parseInt(dataObj[fieldName], 10)
          count++
        }
      })
      if (count > 0) {
        const max = 6 * count
        scores[section.title] = Math.round((sum / max) * 100)
      } else {
        scores[section.title] = 0
      }
    }
  })
  return scores
}

function setupSurveyDataPersistence() {
  const form = document.getElementById('surveyForm')
  const userId = sessionStorage.getItem('userId')
  if (form && userId) {
    const storedData = sessionStorage.getItem('surveyData')
    if (storedData) {
      const parsedData = JSON.parse(storedData)
      populateFormFields(form, parsedData)
    }

    form.addEventListener('input', function () {
      const currentData = Object.fromEntries(new FormData(form))
      saveUserData(userId, currentData)
    })

    form.addEventListener('submit', function (e) {
      e.preventDefault()
      const finalData = Object.fromEntries(new FormData(form))
      saveUserData(userId, finalData, true)

      if (typeof showResults === 'function') {
        showResults()
      } else {
        console.error(
          'showResults function not found. Make sure survey.js is loaded correctly.'
        )
        Swal.fire({
          icon: 'success',
          title: 'Vielen Dank!',
          text: 'Vielen Dank für das Ausfüllen der Umfrage!',
        })
      }
    })
  }
}

function checkInputsAndToggleLoginButton() {
  const coursesVal = document.getElementById('courses')?.value.trim() || ''
  const codeVal = document.getElementById('loginCode')?.value.trim() || ''
  const loginBtn = document.getElementById('loginButton')
  if (loginBtn) {
    loginBtn.style.display = coursesVal && codeVal ? 'block' : 'none'
  }
}

function initializeCopyCodeFunctionality() {
  const copyButton = document.getElementById('copyCodeButton')
  const codeTextEl = document.getElementById('codeText')
  if (copyButton && codeTextEl) {
    copyButton.addEventListener('click', function (e) {
      e.stopPropagation()
      const codeToCopy = codeTextEl.textContent.trim()
      navigator.clipboard
        .writeText(codeToCopy)
        .then(() => {
          Swal.fire({
            icon: 'success',
            title: 'Code kopiert!',
            text: 'Dein Code wurde in die Zwischenablage kopiert.',
            timer: 1500,
            showConfirmButton: false,
          })
        })
        .catch((err) => {
          console.error('Failed to copy code: ', err)
          Swal.fire({
            icon: 'error',
            title: 'Kopieren fehlgeschlagen',
            text: 'Es gab ein Problem beim Kopieren des Codes.',
          })
        })
    })
  }
}

function setupViewResultsButton() {
  const viewResultsBtn = document.getElementById('viewResultsButton');
  const resultsCodeInput = document.getElementById('resultsCode');

  if (viewResultsBtn && resultsCodeInput) {
    viewResultsBtn.addEventListener('click', async () => {
      const codeVal = resultsCodeInput.value.trim();
      if (!codeVal) {
        Swal.fire({
          icon: 'error',
          title: 'Fehler',
          text: 'Bitte geben Sie Ihren persönlichen Code ein, um Ergebnisse anzusehen.',
        });
        return;
      }
      try {
        const checkResp = await fetch('/api/check-results', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ code: codeVal }),
        });
        const checkData = await checkResp.json();
        if (!checkData.success) {
          Swal.fire({
            icon: 'error',
            title: 'Ergebnisse nicht verfügbar',
            text: checkData.message || 'Unbekannter Fehler',
          });
        } else {
          sessionStorage.clear();
          sessionStorage.setItem('userId', checkData.userId);
          sessionStorage.setItem('resultsCode', codeVal);
          window.location.href = 'results.html';
        }
      } catch (err) {
        console.error('Error checking results:', err);
        Swal.fire({
          icon: 'error',
          title: 'Serverfehler',
          text: 'Bitte versuchen Sie es später erneut.',
        });
      }
    });
  }
}

/* Main DOMContentLoaded */
document.addEventListener('DOMContentLoaded', function () {
  setupNavigationButtons()
  setupCodeGenerationForm()
  handleLoginFormSubmission()
  displayGeneratedCode()
  setupLogoutFunctionality()
  setupLoginPageFunctionality()
  setupStartSurveyButton()
  initializeCopyCodeFunctionality()
  setupViewResultsButton()

  if (document.getElementById('birthyear')) {
    initializeFlatpickr()
  }

  if (document.getElementById('surveyForm')) {
    loadStoredSurveyData()
    setupSurveyDataPersistence()
  }
})

if (typeof surveyData === 'undefined') {
  console.error(
    'surveyData ist nicht definiert. Bitte stellen Sie sicher, dass es geladen ist, bevor dieses Skript verwendet wird.'
  )
}
