//script.min.js

const labelMap = {
  'Suchen, Verarbeiten und Aufbewahren': 'Suchen',
  'Kommunikation und Kollaborieren': 'Kommunizieren',
  'Produzieren und Präsentieren': 'Produzieren',
  'Schützen und sicher Agieren': 'Schützen',
  'Problemlösen und Handeln': 'Problemlösen',
  'Analysieren und Reflektieren': 'Analysieren',
}

const colorMap = {
  'Suchen, Verarbeiten und Aufbewahren': '#00BF63',
  'Kommunikation und Kollaborieren': '#0CC0DF',
  'Produzieren und Präsentieren': '#FF6D5F',
  'Schützen und sicher Agieren': '#8C52FF',
  'Problemlösen und Handeln': '#E884C4',
  'Analysieren und Reflektieren': '#FFD473',
  overall: '#999999', // ADDED: Color for "overall" category
}

const competencyDescriptions = {
  'Suchen, Verarbeiten und Aufbewahren':
    'Umfasst das Wissen, die Motivation und Fähigkeiten, gezielt nach digitalen Daten und Inhalten zu suchen, diese effektiv zu organisieren, zu speichern und abzurufen.',
  'Kommunikation und Kollaborieren':
    'Umfasst das Wissen, die Motivation und Fähigkeiten, mithilfe digitaler Technologien effektiv zu interagieren, zu kollaborieren und Informationen auszutauschen, dabei die Verhaltensnormen in digitalen Umgebungen zu beachten und digitale Technologien zur gesellschaftlichen Teilhabe und Selbstermächtigung zu nutzen.',
  'Produzieren und Präsentieren':
    'Umfasst das Wissen, die Motivation und Fähigkeiten, digitale Inhalte in verschiedenen Formaten zu erstellen, zu bearbeiten und zu integrieren, dabei Urheberrecht und Lizenzen zu berücksichtigen, sowie das Programmieren digitaler Produkte.',
  'Schützen und sicher Agieren':
    'Umfasst das Wissen, die Motivation und Fähigkeiten, digitale Geräte und Inhalte zu schützen, Gesundheits- und Umweltgefahren bei der Nutzung digitaler Technologien zu vermeiden, und persönliche Daten, Identität sowie Privatsphäre in digitalen Umgebungen verantwortungsvoll zu schützen.',
  'Problemlösen und Handeln':
    'Umfasst das Wissen, die Motivation und Fähigkeiten, technische Probleme zu erkennen und zu lösen und kreative technische Lösungen für spezifische Bedürfnisse zu finden. Zudem gehört zum Kompetenzbereich informatisches Denken, also das strategische Lösen komplexer Probleme in digitalen Umgebungen und die kontinuierliche Weiterentwicklung der eigenen digitalen Kompetenzen.',
  'Analysieren und Reflektieren':
    'Umfasst das Wissen, die Motivation und Fähigkeiten, die Auswirkungen und Verbreitung digitaler Medien und Inhalte zu analysieren, deren Glaubwürdigkeit und Zuverlässigkeit kritisch zu bewerten sowie Geschäftsaktivitäten in digitalen Umgebungen zu identifizieren und angemessen darauf zu reagieren.',
}

// Helper function to lighten a color
function lightenColor(hex, ratio = 0.4) {
  if (!hex.startsWith('#')) return hex // Return if not a hex color
  let r = parseInt(hex.slice(1, 3), 16)
  let g = parseInt(hex.slice(3, 5), 16)
  let b = parseInt(hex.slice(5, 7), 16)
  r = Math.min(255, Math.floor(r + 255 * ratio))
  g = Math.min(255, Math.floor(g + 255 * ratio))
  b = Math.min(255, Math.floor(b + 255 * ratio))
  // Convert back to hex:
  return `#${r.toString(16).padStart(2, '0')}${g
    .toString(16)
    .padStart(2, '0')}${b.toString(16).padStart(2, '0')}`
}

// Helper function to darken a color
function darkenColor(hex, ratio = 0.3) {
  if (!hex.startsWith('#')) return hex
  let r = parseInt(hex.slice(1, 3), 16)
  let g = parseInt(hex.slice(3, 5), 16)
  let b = parseInt(hex.slice(5, 7), 16)
  r = Math.max(0, Math.floor(r - 255 * ratio))
  g = Math.max(0, Math.floor(g - 255 * ratio))
  b = Math.max(0, Math.floor(b - 255 * ratio))
  return `rgb(${r}, ${g}, ${b})`
}

//Helper function for download button
function downloadChart(e) {
  e.preventDefault()
  const chartCanvas = document.getElementById('competencyChart1') //ID of the canvas
  if (chartCanvas) {
    const link = document.createElement('a')
    link.download = 'kompetenz-diagramm.png'
    link.href = chartCanvas.toDataURL()
    link.click()
  }
}

//Helper function for description box
function updateDescriptionBox(box, category, description) {
  const borderColor = colorMap[category] || '#999999'
  const bgColor = lightenColor(borderColor)
  box.innerHTML = `
        <h3>${category}</h3>
        <p>${description || 'Beschreibung nicht verfügbar.'}</p>
    `
  box.style.backgroundColor = bgColor
  box.style.padding = '15px'
  box.style.borderRadius = '5px'
  box.style.border = `2px solid ${borderColor}`
  box.style.color = getContrastColor(bgColor) // White or black text
}

// Helper function for contrast color
function getContrastColor(hex) {
  if (!hex.startsWith('#')) return '#000'
  const r = parseInt(hex.slice(1, 3), 16),
    g = parseInt(hex.slice(3, 5), 16),
    b = parseInt(hex.slice(5, 7), 16)
  // Calculate relative luminance
  const luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255
  return luminance > 0.5 ? '#000000' : '#ffffff'
}

function createCompetencyChartConfig(
  categories,
  t1Data,
  t2Data,
  t3Data,
  canvasId,
  descriptionBoxId
) {
  const datasets = []
  if (t1Data.some((value) => value > 0)) {
    // Only add T1 if there's data
    datasets.push({
      label: 'Erste Befragung',
      data: t1Data,
      backgroundColor: categories.map((c) =>
        lightenColor(colorMap[c] || '#999999', 0.4)
      ),
      borderColor: categories.map((c) => colorMap[c] || '#999999'),
      borderWidth: 1,
    })
  }
  if (t2Data.some((value) => value > 0)) {
    // Only add T2 if there's data
    datasets.push({
      label: 'Zweite Befragung',
      data: t2Data,
      backgroundColor: categories.map((c) => colorMap[c] || '#999999'),
      borderColor: categories.map((c) => colorMap[c] || '#999999'),
      borderWidth: 1,
    })
  }
  if (t3Data.some((value) => value > 0)) {
    // Only add T3 if there's data
    datasets.push({
      label: 'Dritte Befragung',
      data: t3Data,
      backgroundColor: categories.map((c) =>
        darkenColor(colorMap[c] || '#999999', 0.3)
      ),
      borderColor: categories.map((c) => colorMap[c] || '#999999'),
      borderWidth: 1,
    })
  }

  const config = {
    type: 'bar',
    data: {
      labels: categories.map((cat) => labelMap[cat] || cat), // Use short labels
      datasets: datasets,
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      scales: {
        y: {
          beginAtZero: true,
          max: 100,
          title: {
            display: true,
            text: 'Score (%)',
          },
        },
        x: {
          ticks: {
            autoSkip: false,
            maxRotation: 45,
            minRotation: 45,
          },
        },
      },
      plugins: {
        legend: {
          display: datasets.length > 1, // Only show if more than 1 dataset
        },
        tooltip: {
          callbacks: {
            title: (tooltipItems) => {
              const index = tooltipItems[0].dataIndex
              return categories[index] || tooltipItems[0].label // Full category name
            },
            label: (tooltipItem) =>
              `${tooltipItem.dataset.label}: ${tooltipItem.parsed.y}%`,
          },
        },
      },
      onHover: (evt, item) => {
        const descriptionBox = document.getElementById(descriptionBoxId)
        if (item.length > 0 && descriptionBox) {
          const index = item[0].index
          const cat = categories[index]
          updateDescriptionBox(descriptionBox, cat, competencyDescriptions[cat])
        }
      },
    },
  }
  return config
}

function setupCodeGenerationForm() {
  const form = document.getElementById('generateCodeForm')
  if (form) {
    form.addEventListener('submit', handleCodeGenerationFormSubmission)
  }
}

function setupLoginPageFunctionality() {
  const iliasInputs = document.querySelectorAll(
    'input[name="iliasCourseCompleted"]'
  )
  const secondQuestion = document.getElementById('secondQuestion')
  const choiceContainer = document.getElementById('choiceContainer')
  const surveyOptionInput = document.getElementById('surveyOption')
  const codeInputField = document.getElementById('codeInput')
  const coursesList = document.getElementById('coursesList')
  const loginButton = document.getElementById('loginButton')
  const generateCodeButton = document.getElementById('generateCodeButton')

  function createChoiceCard(value, heading, text, iconClass) {
    const card = document.createElement('div')
    card.classList.add('choice-card')
    card.setAttribute('data-value', value)

    const icon = document.createElement('i')
    icon.className = `${iconClass} card-icon`

    const h3 = document.createElement('h3')
    h3.textContent = heading

    const p = document.createElement('p')
    p.textContent = text

    card.appendChild(icon)
    card.appendChild(h3)
    card.appendChild(p)
    choiceContainer.appendChild(card)
  }

  if (
    iliasInputs.length &&
    secondQuestion &&
    choiceContainer &&
    surveyOptionInput
  ) {
    iliasInputs.forEach((radio) => {
      radio.addEventListener('change', function () {
        const selectedValue = this.value
        choiceContainer.innerHTML = ''
        secondQuestion.style.display = 'block'
        surveyOptionInput.value = ''
        codeInputField.style.display = 'none'
        coursesList.style.display = 'none'
        if (loginButton) loginButton.style.display = 'none'
        if (generateCodeButton) generateCodeButton.style.display = 'none'

        if (selectedValue === 'no') {
          createChoiceCard(
            'register',
            'Ich möchte mich neu registrieren',
            'Neuen Code generieren',
            'fas fa-user-plus'
          )
          createChoiceCard(
            'continue',
            'Ich möchte meinen Fragebogen fortsetzen',
            'Mit Code Fragebogen fortsetzen',
            'fas fa-play-circle'
          )
        } else if (selectedValue === 'yes') {
          createChoiceCard(
            'redo',
            'Ich möchte den Fragebogen erneut ausfüllen',
            'Neues Mal ausfüllen',
            'fas fa-redo-alt'
          )
          createChoiceCard(
            'continue',
            'Ich möchte meinen Fragebogen fortsetzen',
            'Mit Code Fragebogen fortsetzen',
            'fas fa-play-circle'
          )
          createChoiceCard(
            'followup',
            'Follow-up Befragung (nach einem Monat)',
            'T3-Follow-up durchführen',
            'fas fa-clock'
          )
        }

        ;(function setupChoiceCardHandlers() {
          const cards = document.querySelectorAll('.choice-card')
          cards.forEach((card) => {
            card.addEventListener('click', function () {
              cards.forEach((c) => c.classList.remove('selected'))
              this.classList.add('selected')
              const value = this.getAttribute('data-value')
              surveyOptionInput.value = value
              handleOptionSelection(value)
            })
          })
        })()
      })
    })

    if (generateCodeButton) {
      generateCodeButton.addEventListener('click', function () {
        window.location.href = 'generateCode.html'
      })
    }
  }

  function handleOptionSelection(optionValue) {
    const courses = document.getElementById('courses')
    if (optionValue === 'register') {
      codeInputField.style.display = 'none'
      coursesList.style.display = 'none'
      if (loginButton) loginButton.style.display = 'none'
      if (generateCodeButton) generateCodeButton.style.display = 'block'
      if (courses) {
        courses.required = false
        courses.disabled = true
      }
    } else if (optionValue === 'redo') {
      codeInputField.style.display = 'block'
      coursesList.style.display = 'block'
      if (loginButton) loginButton.style.display = 'block'
      if (generateCodeButton) generateCodeButton.style.display = 'none'
      if (courses) {
        courses.required = true
        courses.disabled = false
      }
    } else if (optionValue === 'continue') {
      codeInputField.style.display = 'block'
      coursesList.style.display = 'none'
      if (loginButton) loginButton.style.display = 'block'
      if (generateCodeButton) generateCodeButton.style.display = 'none'
      if (courses) {
        courses.required = false
        courses.disabled = true
      }
    } else {
      // 'followup' or any other possibility
      codeInputField.style.display = 'block'
      coursesList.style.display = 'none'
      if (loginButton) loginButton.style.display = 'block'
      if (generateCodeButton) generateCodeButton.style.display = 'none'
      if (courses) {
        courses.required = false
        courses.disabled = true
      }
    }
  }
}

function setupNavigationButtons() {
  const buttonIds = ['letsGetStarted', 'startSurvey']
  buttonIds.forEach((btnId) => {
    const btn = document.getElementById(btnId)
    if (btn) {
      btn.addEventListener('click', function () {
        window.location.href = 'login.html'
      })
    }
  })
}

async function handleCodeGenerationFormSubmission(e) {
  e.preventDefault()
  const form = e.target
  if (!validateFormInputs(form)) return

  sessionStorage.clear()
  const generatedCode = generateCodeFromForm(form)

  const submitBtn = form.querySelector('button[type="submit"]')
  submitBtn.disabled = true
  submitBtn.textContent = 'Registrierung läuft...'

  try {
    const responseData = await submitForm('/register', { code: generatedCode })
    if (responseData.ok) {
      // Use userId as string (important change!)
      sessionStorage.setItem('userId', responseData.userId)
      sessionStorage.setItem('generatedCode', generatedCode)

      await Swal.fire({
        icon: 'success',
        title: 'Erfolg',
        text: 'Dein Code wurde erfolgreich registriert!',
        timer: 2000,
        showConfirmButton: false,
      })
      window.location.href = 'codeConfirmation.html'
    } else if (responseData.isDuplicateCode) {
      await Swal.fire({
        icon: 'error',
        title: 'Code bereits vergeben',
        text: 'Dieser Code existiert bereits. Bitte verwenden Sie stattdessen die Initialen Ihrer Erziehungsberechtigten für den zweiten Teil des Codes.',
      })
      updateParentFieldForFather()
    } else {
      await Swal.fire({
        icon: 'error',
        title: 'Registrierungsfehler',
        text: `Fehler beim Registrieren des Codes: ${
          responseData.message || 'Unbekannter Fehler'
        }`,
      })
    }
  } catch (err) {
    console.error('Error registering code:', err)
    await Swal.fire({
      icon: 'error',
      title: 'Registrierungsfehler',
      text: 'Es gab einen Fehler bei der Registrierung. Bitte versuchen Sie es später erneut.',
    })
  } finally {
    submitBtn.disabled = false
    submitBtn.textContent = 'Code Generieren'
  }
}

function updateParentFieldForFather() {
  const label = document.getElementById('parentLabel')
  const instructions = document.getElementById('parentInstructions')
  const inputField = document.getElementById('parentName')
  if (label && instructions && inputField) {
    label.textContent = 'Vorname des Vaters / Ihres Erziehungsberechtigten'
    instructions.textContent =
      'Bitte geben Sie den ersten und letzten Buchstaben des Vornamens Ihres Vaters ein. Bsp.: Thomas = TS'
    inputField.value = ''
    inputField.focus()
  }
}

function validateFormInputs(form) {
  const textInputs = form.querySelectorAll('input[type="text"]')
  let isValid = true

  textInputs.forEach((input) => {
    const value = input.value.trim()
    const labelText = input.previousElementSibling.textContent.trim()

    if (value.length !== 2) {
      Swal.fire({
        icon: 'error',
        title: 'Ungültige Eingabe',
        text: `Bitte geben Sie genau zwei Zeichen für ${labelText} ein.`,
      })
      isValid = false
      return
    }

    switch (input.id) {
      case 'birthplace':
      case 'parentName':
      case 'school':
        if (!/^[A-Za-z]{2}$/.test(value)) {
          Swal.fire({
            icon: 'error',
            title: 'Ungültige Eingabe',
            text: `${labelText} muss aus zwei Buchstaben bestehen.`,
          })
          isValid = false
        }
        break
      case 'birthday':
        const dayNumber = parseInt(value, 10)
        if (!/^\d{2}$/.test(value) || dayNumber < 1 || dayNumber > 31) {
          Swal.fire({
            icon: 'error',
            title: 'Ungültige Eingabe',
            text: `${labelText} muss eine gültige Zahl zwischen 01 und 31 sein.`,
          })
          isValid = false
        }
        break
      default:
        break
    }
  })

  return isValid
}

function generateCodeFromForm(form) {
  return (
    document.getElementById('birthplace').value.toUpperCase() +
    '-' +
    document.getElementById('parentName').value.toUpperCase() +
    '-' +
    document.getElementById('birthday').value +
    '-' +
    document.getElementById('school').value.toUpperCase()
  )
}

async function submitForm(url, data) {
  try {
    const res = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(data),
    })
    if (!res.ok) {
      const errorData = await res.json()
      return { ok: false, ...errorData }
    }
    const successData = await res.json()
    return { ok: true, ...successData }
  } catch (err) {
    console.error('Error submitting form:', err)
    throw err // Re-throw to be caught by the caller
  }
}

function handleLoginFormSubmission() {
  const loginForm = document.getElementById('loginForm')
  if (loginForm) {
    loginForm.addEventListener('submit', function (event) {
      event.preventDefault()
      handleLogin()
    })
  }
}

async function handleLogin() {
  const surveyOption = document.getElementById('surveyOption')?.value
  const loginCodeValue = (
    document.getElementById('loginCode')?.value || ''
  ).trim()

  // We read the user's free-text "Welche Kurse..." from #courses:
  const t2CourseText = (document.getElementById('courses')?.value || '').trim()

  if (!surveyOption) {
    Swal.fire({
      icon: 'error',
      title: 'Fehler',
      text: 'Bitte wählen Sie eine Option aus.',
    })
    return
  }
  if (surveyOption === 'register') {
    window.location.href = 'generateCode.html'
    return
  }
  if (!loginCodeValue) {
    Swal.fire({
      icon: 'error',
      title: 'Fehler',
      text: 'Bitte geben Sie Ihren persönlichen Code ein.',
    })
    return
  }

  const loginBtn = document.getElementById('loginButton')
  const generateBtn = document.getElementById('generateCodeButton')
  if (loginBtn) {
    loginBtn.disabled = true
    loginBtn.textContent = 'Login läuft...'
  }
  if (generateBtn) {
    generateBtn.disabled = true
  }

  try {
    // Build the request payload
    const payload = {
      code: loginCodeValue,
      surveyOption: surveyOption,
      t2CourseList: t2CourseText,
    }

    const response = await fetch('/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload),
    })

    if (!response.ok) {
      const errorData = await response.json()
      Swal.fire({
        icon: 'error',
        title: 'Fehler',
        text: errorData.message || 'Login Fehler',
      })
      if (loginBtn) {
        loginBtn.disabled = false
        loginBtn.textContent = 'Weiter'
      }
      return
    }

    // Success - parse response
    const responseData = await response.json()
    // Store userId, attemptNumber, etc. in sessionStorage
    sessionStorage.setItem('userId', responseData.userId)
    sessionStorage.setItem('attemptNumber', responseData.attemptNumber)
    // Store the completion flags
    sessionStorage.setItem('t1Complete', responseData.t1Complete)
    sessionStorage.setItem('t2Complete', responseData.t2Complete)
    sessionStorage.setItem('t3Complete', responseData.t3Complete)

    // Then navigate to your main survey page
    window.location.href = 'survey.html'
  } catch (err) {
    console.error('Error during login:', err)
    Swal.fire({
      icon: 'error',
      title: 'Fehler',
      text: 'Beim Login ist ein Fehler aufgetreten. Bitte versuchen Sie es erneut.',
    })
  } finally {
    if (loginBtn) {
      loginBtn.disabled = false
      loginBtn.textContent = 'Weiter'
    }
    if (generateBtn) {
      generateBtn.disabled = false
    }
  }
}

function setupLogoutFunctionality() {
  const logoutBtn = document.getElementById('logoutButton')
  if (logoutBtn) {
    logoutBtn.addEventListener('click', function () {
      sessionStorage.clear()
      window.location.href = 'login.html'
    })
  }
}

function isNewUser() {
  return sessionStorage.getItem('isNewUser') === 'true'
}

function initializeFlatpickr() {
  if (typeof flatpickr === 'function') {
    flatpickr('#birthyear', {
      dateFormat: 'Y',
      maxDate: new Date().getFullYear().toString(),
      minDate: '1900',
      defaultDate: '2000',
      allowInput: true, // Allow manual input
      disableMobile: 'true',
      onOpen: function (selectedDates, dateStr, instance) {
        // Prevent keyboard from opening on mobile
        instance.input.blur()
      },
      onChange: function (selectedDates, dateStr, instance) {
        // Force 4-digit year
        if (dateStr.length > 0 && dateStr.length < 4) {
          let year = parseInt(dateStr, 10)
          if (year < 100) {
            // Assume 2-digit years are in 20th or 21st century
            year = year >= 50 ? 1900 + year : 2000 + year
          }
          instance.setDate(year.toString(), true) // true to trigger onChange again
        }
      },
    })
  } else {
    console.warn(
      'Flatpickr ist nicht geladen. Die Funktionalität des Datumswählers kann eingeschränkt sein.'
    )
  }
}

function displayGeneratedCode() {
  const codeTextEl = document.getElementById('codeText')
  const generatedCode = sessionStorage.getItem('generatedCode')
  if (codeTextEl && generatedCode) {
    codeTextEl.textContent = generatedCode
  } else if (codeTextEl) {
    codeTextEl.textContent = 'Kein Code verfügbar oder Sitzung abgelaufen.'
  }
}

function setupStartSurveyButton() {
  const startSurveyButton = document.getElementById('startSurveyButton')
  if (startSurveyButton) {
    startSurveyButton.addEventListener('click', function () {
      window.location.href = 'survey.html'
    })
  }
}

function initializeCopyCodeFunctionality() {
  const copyButton = document.getElementById('copyCodeButton')
  const codeTextEl = document.getElementById('codeText')
  if (copyButton && codeTextEl) {
    copyButton.addEventListener('click', function (e) {
      e.stopPropagation()
      const codeToCopy = codeTextEl.textContent.trim()
      navigator.clipboard
        .writeText(codeToCopy)
        .then(() => {
          Swal.fire({
            icon: 'success',
            title: 'Code kopiert!',
            text: 'Dein Code wurde in die Zwischenablage kopiert.',
            timer: 1500,
            showConfirmButton: false,
          })
        })
        .catch((err) => {
          console.error('Failed to copy code: ', err)
          Swal.fire({
            icon: 'error',
            title: 'Kopieren fehlgeschlagen',
            text: 'Es gab ein Problem beim Kopieren des Codes.',
          })
        })
    })
  }
}

function setupViewResultsButton() {
  const viewResultsBtn = document.getElementById('viewResultsButton')
  const resultsCodeInput = document.getElementById('resultsCode')

  if (viewResultsBtn && resultsCodeInput) {
    viewResultsBtn.addEventListener('click', async () => {
      const codeVal = resultsCodeInput.value.trim()
      if (!codeVal) {
        Swal.fire({
          icon: 'error',
          title: 'Fehler',
          text: 'Bitte geben Sie Ihren persönlichen Code ein, um Ergebnisse anzusehen.',
        })
        return
      }
      try {
        const checkResp = await fetch('/api/check-results', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ code: codeVal }),
        })
        const checkData = await checkResp.json()
        if (!checkData.success) {
          Swal.fire({
            icon: 'error',
            title: 'Ergebnisse nicht verfügbar',
            text: checkData.message || 'Unbekannter Fehler',
          })
        } else {
          sessionStorage.clear()
          sessionStorage.setItem('userId', checkData.userId)
          sessionStorage.setItem('resultsCode', codeVal)
          window.location.href = 'results.html'
        }
      } catch (err) {
        console.error('Error checking results:', err)
        Swal.fire({
          icon: 'error',
          title: 'Serverfehler',
          text: 'Bitte versuchen Sie es später erneut.',
        })
      }
    })
  }
}

// Function to format code input (uppercase and hyphens)
function formatCodeInput(input) {
  let value = input.value.toUpperCase().replace(/[^A-Z0-9]/g, '') // Remove non-alphanumeric
  let formatted = ''

  if (value.length > 0) {
    formatted += value.substring(0, 2)
  }
  if (value.length > 2) {
    formatted += '-' + value.substring(2, 4)
  }
  if (value.length > 4) {
    formatted += '-' + value.substring(4, 6)
  }
  if (value.length > 6) {
    formatted += '-' + value.substring(6, 8)
  }

  input.value = formatted
}

function setupCodeInputFormatting() {
  const codeInputs = document.querySelectorAll('#loginCode, #resultsCode')
  codeInputs.forEach((input) => {
    input.addEventListener('input', () => formatCodeInput(input))
  })
}

/* Main DOMContentLoaded */
document.addEventListener('DOMContentLoaded', function () {
  setupNavigationButtons()
  setupCodeGenerationForm()
  handleLoginFormSubmission()
  displayGeneratedCode()
  setupLogoutFunctionality()
  setupLoginPageFunctionality()
  setupStartSurveyButton()
  initializeCopyCodeFunctionality()
  setupViewResultsButton()
  setupCodeInputFormatting()

  if (document.getElementById('birthyear')) {
    initializeFlatpickr()
  }
})
