function setupCodeGenerationForm() {
  const e = document.getElementById('generateCodeForm')
  e && e.addEventListener('submit', handleCodeGenerationFormSubmission)
}
function setupLoginPageFunctionality() {
  const e = document.querySelectorAll('input[name="iliasCourseCompleted"]'),
    t = document.getElementById('secondQuestion'),
    n = document.getElementById('choiceContainer'),
    o = document.getElementById('surveyOption'),
    i = document.getElementById('codeInput'),
    r = document.getElementById('coursesList'),
    s = document.getElementById('loginButton'),
    a = document.getElementById('generateCodeButton')
  function l(e, t, o, i) {
    const r = document.createElement('div')
    r.classList.add('choice-card'), r.setAttribute('data-value', e)
    const s = document.createElement('i')
    s.className = `${i} card-icon`
    const a = document.createElement('h3')
    a.textContent = t
    const l = document.createElement('p')
    ;(l.textContent = o),
      r.appendChild(s),
      r.appendChild(a),
      r.appendChild(l),
      n.appendChild(r)
  }
  e.length &&
    t &&
    n &&
    o &&
    (e.forEach((e) => {
      e.addEventListener('change', function () {
        const e = this.value
        ;(n.innerHTML = ''),
          (t.style.display = 'block'),
          (o.value = ''),
          (i.style.display = 'none'),
          (r.style.display = 'none'),
          s && (s.style.display = 'none'),
          a && (a.style.display = 'none'),
          'no' === e
            ? (l(
                'register',
                'Ich möchte mich neu registrieren',
                'Neuen Code generieren',
                'fas fa-user-plus'
              ),
              l(
                'continue',
                'Ich möchte meinen Fragebogen fortsetzen',
                'Mit Code Fragebogen fortsetzen',
                'fas fa-play-circle'
              ))
            : 'yes' === e &&
              (l(
                'redo',
                'Ich möchte den Fragebogen erneut ausfüllen',
                'Neues Mal ausfüllen',
                'fas fa-redo-alt'
              ),
              l(
                'continue',
                'Ich möchte meinen Fragebogen fortsetzen',
                'Mit Code Fragebogen fortsetzen',
                'fas fa-play-circle'
              )),
          (function () {
            const e = document.querySelectorAll('.choice-card')
            e.forEach((t) => {
              t.addEventListener('click', function () {
                e.forEach((e) => e.classList.remove('selected')),
                  this.classList.add('selected')
                const t = this.getAttribute('data-value')
                ;(o.value = t),
                  (function (e) {
                    const t = document.getElementById('courses')
                    'register' === e
                      ? ((i.style.display = 'none'),
                        (r.style.display = 'none'),
                        s && (s.style.display = 'none'),
                        a && (a.style.display = 'block'),
                        t && ((t.required = !1), (t.disabled = !0)))
                      : 'redo' === e
                      ? ((i.style.display = 'block'),
                        (r.style.display = 'block'),
                        s && (s.style.display = 'block'),
                        a && (a.style.display = 'none'),
                        t && ((t.required = !0), (t.disabled = !1)))
                      : 'continue' === e &&
                        ((i.style.display = 'block'),
                        (r.style.display = 'none'),
                        s && (s.style.display = 'block'),
                        a && (a.style.display = 'none'),
                        t && ((t.required = !1), (t.disabled = !0)))
                  })(t)
              })
            })
          })()
      })
    }),
    a &&
      a.addEventListener('click', function () {
        window.location.href = 'generateCode.html'
      }))
}
function setupNavigationButtons() {
  ;['letsGetStarted', 'startSurvey'].forEach((e) => {
    const t = document.getElementById(e)
    t &&
      t.addEventListener('click', function () {
        window.location.href = 'login.html'
      })
  })
}
async function handleCodeGenerationFormSubmission(e) {
  e.preventDefault()
  const t = e.target
  if (!validateFormInputs(t)) return
  sessionStorage.clear()
  const n = generateCodeFromForm(t),
    o = t.querySelector('button[type="submit"]')
  ;(o.disabled = !0), (o.textContent = 'Registrierung läuft...')
  try {
    const e = await submitForm('/register', { code: n }),
      t = e
    e.ok
      ? (sessionStorage.setItem('userId', t.userId),
        sessionStorage.setItem('generatedCode', n),
        await Swal.fire({
          icon: 'success',
          title: 'Erfolg',
          text: 'Dein Code wurde erfolgreich registriert!',
          timer: 2e3,
          showConfirmButton: !1,
        }),
        (window.location.href = 'codeConfirmation.html'))
      : t.isDuplicateCode
      ? (await Swal.fire({
          icon: 'error',
          title: 'Code bereits vergeben',
          text: 'Dieser Code existiert bereits. Bitte verwenden Sie stattdessen die Initialen Ihrer Erziehungsberechtigten für den zweiten Teil des Codes.',
        }),
        updateParentFieldForFather())
      : await Swal.fire({
          icon: 'error',
          title: 'Registrierungsfehler',
          text: `Fehler beim Registrieren des Codes: ${
            t.message || 'Unbekannter Fehler'
          }`,
        })
  } catch (e) {
    console.error('Error registering code:', e),
      await Swal.fire({
        icon: 'error',
        title: 'Registrierungsfehler',
        text: 'Es gab einen Fehler bei der Registrierung. Bitte versuchen Sie es später erneut.',
      })
  } finally {
    ;(o.disabled = !1), (o.textContent = 'Code Generieren')
  }
}
function updateParentFieldForFather() {
  const e = document.getElementById('parentLabel'),
    t = document.getElementById('parentInstructions'),
    n = document.getElementById('parentName')
  e &&
    t &&
    n &&
    ((e.textContent = 'Vorname des Vaters / Ihres Erziehungsberechtigten'),
    (t.textContent =
      'Bitte geben Sie den ersten und letzten Buchstaben des Vornamens Ihres Vaters ein. Bsp.: Thomas = TS'),
    (n.value = ''),
    n.focus())
}
function validateFormInputs(e) {
  const t = e.querySelectorAll('input[type="text"]')
  let n = !0
  return (
    t.forEach((e) => {
      const t = e.value.trim(),
        o = e.previousElementSibling.textContent.trim()
      if (2 !== t.length)
        return (
          Swal.fire({
            icon: 'error',
            title: 'Ungültige Eingabe',
            text: `Bitte geben Sie genau zwei Zeichen für ${o} ein.`,
          }),
          void (n = !1)
        )
      switch (e.id) {
        case 'birthplace':
        case 'parentName':
        case 'school':
          ;/^[A-Za-z]{2}$/.test(t) ||
            (Swal.fire({
              icon: 'error',
              title: 'Ungültige Eingabe',
              text: `${o} muss aus zwei Buchstaben bestehen.`,
            }),
            (n = !1))
          break
        case 'birthday':
          const e = parseInt(t, 10)
          ;(!/^\d{2}$/.test(t) || e < 1 || e > 31) &&
            (Swal.fire({
              icon: 'error',
              title: 'Ungültige Eingabe',
              text: `${o} muss eine gültige Zahl zwischen 01 und 31 sein.`,
            }),
            (n = !1))
      }
    }),
    n
  )
}
function generateCodeFromForm(e) {
  return `${document
    .getElementById('birthplace')
    .value.toUpperCase()}-${document
    .getElementById('parentName')
    .value.toUpperCase()}-${
    document.getElementById('birthday').value
  }-${document.getElementById('school').value.toUpperCase()}`
}
async function submitForm(e, t) {
  try {
    const n = await fetch(e, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(t),
    })
    if (!n.ok) {
      return { ok: !1, ...(await n.json()) }
    }
    return { ok: !0, ...(await n.json()) }
  } catch (e) {
    throw (console.error('Error submitting form:', e), e)
  }
}
function handleLoginFormSubmission() {
  const e = document.getElementById('loginForm')
  e &&
    e.addEventListener('submit', function (e) {
      e.preventDefault(), handleLogin()
    })
}
async function handleLogin() {
  const e = document.getElementById('surveyOption')?.value
  let t = document.getElementById('loginCode')?.value.trim() || ''
  const n = document.getElementById('courses')?.value.trim() || ''
  if (!e)
    return void Swal.fire({
      icon: 'error',
      title: 'Fehler',
      text: 'Bitte wählen Sie eine Option aus.',
    })
  if ('register' === e) return void (window.location.href = 'generateCode.html')
  if (!t)
    return void Swal.fire({
      icon: 'error',
      title: 'Fehler',
      text: 'Bitte geben Sie Ihren persönlichen Code ein.',
    })
  if ('redo' === e && !n)
    return void Swal.fire({
      icon: 'error',
      title: 'Fehler',
      text: 'Bitte geben Sie die absolvierten Kurse an.',
    })
  const o = document.getElementById('loginButton'),
    i = document.getElementById('generateCodeButton')
  o && ((o.disabled = !0), (o.textContent = 'Login läuft...')),
    i && (i.disabled = !0)
  try {
    let o = { code: t }
    'redo' === e
      ? ((o.courses = n), (o.startNewAttempt = !0))
      : 'continue' === e
      ? (o.startNewAttempt = !1)
      : 'register' === e && (o.startNewAttempt = !0)
    const i = await fetch('/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(o),
      }),
      r = await i.json()
    i.ok
      ? (sessionStorage.clear(),
        sessionStorage.setItem('userId', r.userId),
        sessionStorage.setItem('isComplete', r.isComplete),
        'redo' === e
          ? (sessionStorage.setItem('attemptNumber', '2'),
            sessionStorage.setItem('currentSection', '0'),
            sessionStorage.setItem('startNewAttempt', 'true'),
            console.log('Starting T2 attempt - section:', 0))
          : 'register' === e || o.startNewAttempt
          ? (sessionStorage.setItem('attemptNumber', '1'),
            sessionStorage.setItem('currentSection', '0'),
            sessionStorage.setItem('startNewAttempt', 'true'),
            console.log('Starting new attempt - section:', 0))
          : (sessionStorage.setItem('attemptNumber', '1'),
            sessionStorage.setItem('currentSection', r.currentSection || '0'),
            sessionStorage.setItem('startNewAttempt', 'false'),
            console.log(
              'Continuing attempt - section:',
              r.currentSection || '0'
            )),
        (window.location.href = 'survey.html'))
      : await Swal.fire({
          icon: 'error',
          title: 'Login fehlgeschlagen',
          text: r.message,
        })
  } catch (e) {
    console.error('Login error:', e),
      await Swal.fire({
        icon: 'error',
        title: 'Login Fehler',
        text: 'Fehler beim Einloggen. Bitte versuchen Sie es später erneut.',
      })
  } finally {
    o && ((o.disabled = !1), (o.textContent = 'Weiter')), i && (i.disabled = !1)
  }
}
function setupLogoutFunctionality() {
  const e = document.getElementById('logoutButton')
  e &&
    e.addEventListener('click', function () {
      sessionStorage.clear(), (window.location.href = 'login.html')
    })
}
function isNewUser() {
  return 'true' === sessionStorage.getItem('isNewUser')
}
function initializeFlatpickr() {
  'function' == typeof flatpickr
    ? flatpickr('#birthyear', {
        dateFormat: 'Y',
        maxDate: new Date().getFullYear().toString(),
        minDate: '1900',
        defaultDate: '2000',
      })
    : console.warn(
        'Flatpickr ist nicht geladen. Die Funktionalität des Datumswählers kann eingeschränkt sein.'
      )
}
function displayGeneratedCode() {
  const e = document.getElementById('codeText'),
    t = sessionStorage.getItem('generatedCode')
  e && t
    ? (e.textContent = t)
    : e && (e.textContent = 'Kein Code verfügbar oder Sitzung abgelaufen.')
}
function setupStartSurveyButton() {
  const e = document.getElementById('startSurveyButton')
  e &&
    e.addEventListener('click', function () {
      window.location.href = 'survey.html'
    })
}
function loadStoredSurveyData() {
  const e = document.getElementById('surveyForm'),
    t = sessionStorage.getItem('surveyData')
  if (e && t) {
    populateFormFields(e, JSON.parse(t))
  }
}
function populateFormFields(e, t) {
  Object.entries(t).forEach(([t, n]) => {
    const o = e.querySelector(`[name="${t}"]`)
    if (o)
      if ('radio' === o.type) {
        const o = e.querySelector(`[name="${t}"][value="${n}"]`)
        o && (o.checked = !0)
      } else o.value = n
  })
}
function saveUserData(e, t, n = !1) {
  const o = calculateCategoryScores(t)
  fetch('/api/save-user-data', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      userId: e,
      data: t,
      isComplete: n,
      categoryScores: o,
    }),
  })
    .then((e) => {
      if (!e.ok) throw new Error('Failed to save data')
      return e.json()
    })
    .then((e) => {
      sessionStorage.setItem('surveyData', JSON.stringify(t)),
        sessionStorage.setItem(
          'initialScores',
          JSON.stringify(e.initialScores)
        ),
        sessionStorage.setItem('updatedScores', JSON.stringify(e.updatedScores))
    })
    .catch((e) => {
      console.error('Fehler beim Speichern der Benutzerdaten:', e),
        Swal.fire({
          icon: 'error',
          title: 'Speicherfehler',
          text: 'Es gab einen Fehler beim Speichern Ihrer Daten. Bitte versuchen Sie es später erneut.',
        })
    })
}
function calculateCategoryScores(e) {
  const t = {}
  return (
    surveyData.forEach((n, o) => {
      if ('Persönliche Angaben' !== n.title) {
        let i = 0,
          r = 0
        if (
          (n.questions.forEach((t, n) => {
            const s = `q${o}_${n}`
            e[s] && 'scale' === t.type && ((i += parseInt(e[s], 10)), r++)
          }),
          r > 0)
        ) {
          const e = 6 * r
          t[n.title] = Math.round((i / e) * 100)
        } else t[n.title] = 0
      }
    }),
    t
  )
}
function setupSurveyDataPersistence() {
  const e = document.getElementById('surveyForm'),
    t = sessionStorage.getItem('userId')
  if (e && t) {
    const n = sessionStorage.getItem('surveyData')
    if (n) {
      const t = JSON.parse(n)
      populateFormFields(e, t)
    }
    e.addEventListener('input', function () {
      const n = Object.fromEntries(new FormData(e))
      saveUserData(t, n)
    }),
      e.addEventListener('submit', function (n) {
        n.preventDefault()
        const o = Object.fromEntries(new FormData(e))
        saveUserData(t, o, !0),
          'function' == typeof showResults
            ? showResults()
            : (console.error(
                'showResults function not found. Make sure survey.js is loaded correctly.'
              ),
              Swal.fire({
                icon: 'success',
                title: 'Vielen Dank!',
                text: 'Vielen Dank für das Ausfüllen der Umfrage!',
              }))
      })
  }
}
function checkInputsAndToggleLoginButton() {
  const e = document.getElementById('courses')?.value.trim() || '',
    t = document.getElementById('loginCode')?.value.trim() || '',
    n = document.getElementById('loginButton')
  n.style.display = e && t ? 'block' : 'none'
}
function initializeCopyCodeFunctionality() {
  const e = document.getElementById('copyCodeButton'),
    t = document.getElementById('codeText')
  e &&
    t &&
    e.addEventListener('click', function (e) {
      e.stopPropagation()
      const n = t.textContent.trim()
      navigator.clipboard
        .writeText(n)
        .then(() => {
          Swal.fire({
            icon: 'success',
            title: 'Code kopiert!',
            text: 'Dein Code wurde in die Zwischenablage kopiert.',
            timer: 1500,
            showConfirmButton: !1,
          })
        })
        .catch((e) => {
          console.error('Failed to copy code: ', e),
            Swal.fire({
              icon: 'error',
              title: 'Kopieren fehlgeschlagen',
              text: 'Es gab ein Problem beim Kopieren des Codes.',
            })
        })
    })
}
document.addEventListener('DOMContentLoaded', function () {
  setupNavigationButtons(),
    setupCodeGenerationForm(),
    handleLoginFormSubmission(),
    displayGeneratedCode(),
    setupLogoutFunctionality(),
    setupLoginPageFunctionality(),
    setupStartSurveyButton(),
    initializeCopyCodeFunctionality(),
    document.getElementById('birthyear') && initializeFlatpickr(),
    document.getElementById('surveyForm') &&
      (loadStoredSurveyData(), setupSurveyDataPersistence())
}),
  'undefined' == typeof surveyData &&
    console.error(
      'surveyData ist nicht definiert. Bitte stellen Sie sicher, dass es geladen ist, bevor dieses Skript verwendet wird.'
    )
